{"ast":null,"code":"import _objectSpread from \"/Users/metabou/Desktop/chatapp/client/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport axios from 'axios';\nimport { ROOT_URL } from '../../../config/networkSettings';\nimport { config, authToken } from '../../../config/token';\nimport { CREATING_SERVER, CREATE_SERVER_FAIL, CREATE_SERVER_SUCCESS, FINDING_SERVER, FIND_SERVER_FAIL, FIND_SERVER_SUCCESS, FINDING_SERVER_BANS, FIND_SERVER_BANS_FAIL, FIND_SERVER_BANS_SUCCESS, UNBANNING_USER, UNBAN_USER_FAIL, UNBAN_USER_SUCCESS, DELETING_SERVER, DELETE_SERVER_FAIL, DELETE_SERVER_SUCCESS, UPDATING_USER_ROLE, UPDATE_USER_ROLE_FAIL, UPDATE_USER_ROLE_SUCCESS, TOGGLING_SERVER, TOGGLE_SERVER_FAIL, TOGGLE_SERVER_SUCCESS, RESET_SERVER_VALUES } from '../../types'; // Initial States\n\nexport const initialState = {\n  isLoading: false,\n  error: false,\n  success: false,\n  user: null\n}; // Reducers\n\nexport default ((state = initialState, action) => {\n  switch (action.type) {\n    case CREATING_SERVER:\n      return _objectSpread({}, state, {\n        isLoading: true,\n        createServerError: false,\n        createServerSuccess: false\n      });\n\n    case CREATE_SERVER_SUCCESS:\n      return _objectSpread({}, state, {\n        isLoading: false,\n        createServerError: false,\n        createServerSuccess: true\n      });\n\n    case CREATE_SERVER_FAIL:\n      return _objectSpread({}, state, {\n        isLoading: false,\n        createServerError: true,\n        createServerSuccess: false\n      });\n\n    case FINDING_SERVER:\n      return _objectSpread({}, state, {\n        isLoading: true,\n        error: false,\n        success: false\n      });\n\n    case FIND_SERVER_SUCCESS:\n      return _objectSpread({}, state, {\n        isLoading: false,\n        findServerError: false,\n        findServerSuccess: true,\n        serverUserList: action.payload\n      });\n\n    case FIND_SERVER_FAIL:\n      return _objectSpread({}, state, {\n        isLoading: false,\n        error: true,\n        success: false\n      });\n\n    case FINDING_SERVER_BANS:\n      return _objectSpread({}, state, {\n        isLoading: true,\n        error: false,\n        success: false\n      });\n\n    case FIND_SERVER_BANS_SUCCESS:\n      return _objectSpread({}, state, {\n        isLoading: false,\n        findBansError: false,\n        findBansSuccess: true,\n        serverUserBans: action.payload\n      });\n\n    case FIND_SERVER_BANS_FAIL:\n      return _objectSpread({}, state, {\n        isLoading: false,\n        error: true,\n        success: false\n      });\n\n    case UNBANNING_USER:\n      return _objectSpread({}, state, {\n        isLoading: true,\n        error: false,\n        success: false\n      });\n\n    case UNBAN_USER_SUCCESS:\n      return _objectSpread({}, state, {\n        isLoading: false,\n        unbanUserError: false,\n        unbanUserSuccess: true,\n        serverUserBans: action.payload\n      });\n\n    case UNBAN_USER_FAIL:\n      return _objectSpread({}, state, {\n        isLoading: false,\n        error: true,\n        success: false\n      });\n\n    case DELETING_SERVER:\n      return _objectSpread({}, state, {\n        isLoading: true,\n        error: false,\n        success: false\n      });\n\n    case DELETE_SERVER_SUCCESS:\n      return _objectSpread({}, state, {\n        isLoading: false,\n        deleteServerError: false,\n        deleteServerSuccess: true\n      });\n\n    case DELETE_SERVER_FAIL:\n      return _objectSpread({}, state, {\n        isLoading: false,\n        error: true,\n        success: false\n      });\n\n    case RESET_SERVER_VALUES:\n      return _objectSpread({}, state, {\n        isLoading: false,\n        error: false,\n        success: false,\n        findServerError: false,\n        findServerSuccess: false,\n        unbanUserError: false,\n        unbanUserSuccess: false,\n        findBansError: false,\n        findBansSuccess: false,\n        createServerError: false,\n        createServerSuccess: false,\n        deleteServerError: false,\n        deleteServerSuccess: false\n      });\n\n    case UPDATING_USER_ROLE:\n      return _objectSpread({}, state, {\n        isLoading: true,\n        updateRoleError: false,\n        updateRoleSuccess: false\n      });\n\n    case UPDATE_USER_ROLE_SUCCESS:\n      return _objectSpread({}, state, {\n        isLoading: false,\n        updateRoleError: false,\n        updateRoleSuccess: true,\n        serverUserList: action.payload\n      });\n\n    case UPDATE_USER_ROLE_FAIL:\n      return _objectSpread({}, state, {\n        isLoading: false,\n        updateRoleError: true,\n        updateRoleSuccess: false\n      });\n\n    case TOGGLING_SERVER:\n      return _objectSpread({}, state, {\n        isLoading: true,\n        toggleServerError: false,\n        toggleServerSuccess: false\n      });\n\n    case TOGGLE_SERVER_SUCCESS:\n      return _objectSpread({}, state, {\n        isLoading: false,\n        toggleServerError: false,\n        toggleServerSuccess: true\n      });\n\n    case TOGGLE_SERVER_FAIL:\n      return _objectSpread({}, state, {\n        isLoading: false,\n        toggleServerError: true,\n        toggleServerSuccess: false\n      });\n\n    default:\n      return state;\n  }\n}); // Actions\n\nexport const serverCreate = params => async dispatch => {\n  dispatch({\n    type: CREATING_SERVER\n  });\n\n  try {\n    const headers = {\n      headers: {\n        'Content-Type': 'multipart/form-data',\n        'Accept': 'application/json',\n        'Authorization': authToken\n      }\n    };\n    const response = await axios.post(\"\".concat(ROOT_URL, \"/api/v1/serverCreate\"), params, headers);\n\n    if (response.data) {\n      dispatch({\n        type: CREATE_SERVER_SUCCESS,\n        payload: response.data\n      });\n    } else {\n      dispatch({\n        type: CREATE_SERVER_FAIL\n      });\n    }\n  } catch (err) {\n    dispatch({\n      type: CREATE_SERVER_FAIL\n    });\n  }\n};\nexport const findUserBans = params => async dispatch => {\n  dispatch({\n    type: FINDING_SERVER_BANS\n  });\n\n  try {\n    const response = await axios.get(\"\".concat(ROOT_URL, \"/api/v1/findUserBans\"), {\n      params: params\n    });\n\n    if (response.data) {\n      dispatch({\n        type: FIND_SERVER_BANS_SUCCESS,\n        payload: response.data\n      });\n    } else {\n      dispatch({\n        type: FIND_SERVER_BANS_FAIL\n      });\n    }\n  } catch (err) {\n    dispatch({\n      type: FIND_SERVER_BANS_FAIL\n    });\n  }\n};\nexport const unbanUser = params => async dispatch => {\n  dispatch({\n    type: UNBANNING_USER\n  });\n\n  try {\n    const response = await axios.post(\"\".concat(ROOT_URL, \"/api/v1/unbanUser\"), params, config);\n\n    if (response.data) {\n      dispatch({\n        type: UNBAN_USER_SUCCESS,\n        payload: response.data\n      });\n    } else {\n      dispatch({\n        type: UNBAN_USER_FAIL\n      });\n    }\n  } catch (err) {\n    dispatch({\n      type: UNBAN_USER_FAIL\n    });\n  }\n};\nexport const findUserList = params => async dispatch => {\n  dispatch({\n    type: FINDING_SERVER\n  });\n\n  try {\n    const response = await axios.get(\"\".concat(ROOT_URL, \"/api/v1/findUserList\"), {\n      params: params\n    });\n\n    if (response.data) {\n      dispatch({\n        type: FIND_SERVER_SUCCESS,\n        payload: response.data\n      });\n    } else {\n      dispatch({\n        type: FIND_SERVER_FAIL\n      });\n    }\n  } catch (err) {\n    dispatch({\n      type: FIND_SERVER_FAIL\n    });\n  }\n};\nexport const serverDelete = params => async dispatch => {\n  dispatch({\n    type: DELETING_SERVER\n  });\n\n  try {\n    const response = await axios.delete(\"\".concat(ROOT_URL, \"/api/v1/serverDelete\"), {\n      data: params\n    });\n\n    if (response.data) {\n      dispatch({\n        type: DELETE_SERVER_SUCCESS\n      });\n    } else {\n      dispatch({\n        type: DELETE_SERVER_FAIL\n      });\n    }\n  } catch (err) {\n    dispatch({\n      type: DELETE_SERVER_FAIL\n    });\n  }\n};\nexport const updateUserRole = params => async dispatch => {\n  dispatch({\n    type: UPDATING_USER_ROLE\n  });\n\n  try {\n    const response = await axios.put(\"\".concat(ROOT_URL, \"/api/v1/updateUserRole\"), params, config);\n\n    if (response.data) {\n      dispatch({\n        type: UPDATE_USER_ROLE_SUCCESS,\n        payload: response.data\n      });\n    } else {\n      dispatch({\n        type: UPDATE_USER_ROLE_FAIL\n      });\n    }\n  } catch (err) {\n    dispatch({\n      type: UPDATE_USER_ROLE_FAIL\n    });\n  }\n};\nexport const serverToggle = params => async dispatch => {\n  dispatch({\n    type: TOGGLING_SERVER\n  });\n\n  try {\n    const response = await axios.get(\"\".concat(ROOT_URL, \"/api/v1/findUserBans\"), {\n      params: params\n    });\n\n    if (response.data) {\n      dispatch({\n        type: TOGGLE_SERVER_SUCCESS,\n        payload: response.data\n      });\n    } else {\n      dispatch({\n        type: TOGGLE_SERVER_FAIL\n      });\n    }\n  } catch (err) {\n    dispatch({\n      type: TOGGLE_SERVER_FAIL\n    });\n  }\n};\nexport function resetServerValues() {\n  return function (dispatch) {\n    dispatch({\n      type: RESET_SERVER_VALUES\n    });\n  };\n}","map":{"version":3,"sources":["/Users/metabou/Desktop/chatapp/client/src/redux/modules/servers/servers.js"],"names":["axios","ROOT_URL","config","authToken","CREATING_SERVER","CREATE_SERVER_FAIL","CREATE_SERVER_SUCCESS","FINDING_SERVER","FIND_SERVER_FAIL","FIND_SERVER_SUCCESS","FINDING_SERVER_BANS","FIND_SERVER_BANS_FAIL","FIND_SERVER_BANS_SUCCESS","UNBANNING_USER","UNBAN_USER_FAIL","UNBAN_USER_SUCCESS","DELETING_SERVER","DELETE_SERVER_FAIL","DELETE_SERVER_SUCCESS","UPDATING_USER_ROLE","UPDATE_USER_ROLE_FAIL","UPDATE_USER_ROLE_SUCCESS","TOGGLING_SERVER","TOGGLE_SERVER_FAIL","TOGGLE_SERVER_SUCCESS","RESET_SERVER_VALUES","initialState","isLoading","error","success","user","state","action","type","createServerError","createServerSuccess","findServerError","findServerSuccess","serverUserList","payload","findBansError","findBansSuccess","serverUserBans","unbanUserError","unbanUserSuccess","deleteServerError","deleteServerSuccess","updateRoleError","updateRoleSuccess","toggleServerError","toggleServerSuccess","serverCreate","params","dispatch","headers","response","post","data","err","findUserBans","get","unbanUser","findUserList","serverDelete","delete","updateUserRole","put","serverToggle","resetServerValues"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport { ROOT_URL } from '../../../config/networkSettings';\nimport { config, authToken } from '../../../config/token';\n\nimport {\n  CREATING_SERVER,\n  CREATE_SERVER_FAIL,\n  CREATE_SERVER_SUCCESS,\n  FINDING_SERVER,\n  FIND_SERVER_FAIL,\n  FIND_SERVER_SUCCESS,\n  FINDING_SERVER_BANS,\n  FIND_SERVER_BANS_FAIL,\n  FIND_SERVER_BANS_SUCCESS,\n  UNBANNING_USER,\n  UNBAN_USER_FAIL,\n  UNBAN_USER_SUCCESS,\n  DELETING_SERVER,\n  DELETE_SERVER_FAIL,\n  DELETE_SERVER_SUCCESS,\n  UPDATING_USER_ROLE,\n  UPDATE_USER_ROLE_FAIL,\n  UPDATE_USER_ROLE_SUCCESS,\n  TOGGLING_SERVER,\n  TOGGLE_SERVER_FAIL,\n  TOGGLE_SERVER_SUCCESS,\n  RESET_SERVER_VALUES\n} from '../../types';\n\n// Initial States\nexport const initialState = {\n  isLoading: false,\n  error: false,\n  success: false,\n  user: null\n};\n\n// Reducers\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case CREATING_SERVER:\n      return {\n        ...state, isLoading: true, createServerError: false, createServerSuccess: false\n      };\n    case CREATE_SERVER_SUCCESS:\n      return {\n        ...state, isLoading: false, createServerError: false, createServerSuccess: true\n      };\n    case CREATE_SERVER_FAIL:\n      return {\n        ...state, isLoading: false, createServerError: true, createServerSuccess: false\n      };\n    case FINDING_SERVER:\n      return {\n        ...state, isLoading: true, error: false, success: false\n      };\n    case FIND_SERVER_SUCCESS:\n      return {\n        ...state, isLoading: false, findServerError: false, findServerSuccess: true, serverUserList: action.payload\n      };\n    case FIND_SERVER_FAIL:\n      return {\n        ...state, isLoading: false, error: true, success: false\n      };\n    case FINDING_SERVER_BANS:\n      return {\n        ...state, isLoading: true, error: false, success: false\n      };\n    case FIND_SERVER_BANS_SUCCESS:\n      return {\n        ...state, isLoading: false, findBansError: false, findBansSuccess: true, serverUserBans: action.payload\n      };\n    case FIND_SERVER_BANS_FAIL:\n      return {\n        ...state, isLoading: false, error: true, success: false\n      };\n    case UNBANNING_USER:\n      return {\n        ...state, isLoading: true, error: false, success: false\n      };\n    case UNBAN_USER_SUCCESS:\n      return {\n        ...state, isLoading: false, unbanUserError: false, unbanUserSuccess: true, serverUserBans: action.payload\n      };\n    case UNBAN_USER_FAIL:\n      return {\n        ...state, isLoading: false, error: true, success: false\n      };\n    case DELETING_SERVER:\n      return {\n        ...state, isLoading: true, error: false, success: false\n      };\n    case DELETE_SERVER_SUCCESS:\n      return {\n        ...state, isLoading: false, deleteServerError: false, deleteServerSuccess: true\n      };\n    case DELETE_SERVER_FAIL:\n      return {\n        ...state, isLoading: false, error: true, success: false\n      };\n    case RESET_SERVER_VALUES:\n      return {\n        ...state, isLoading: false, error: false, success: false, findServerError: false, findServerSuccess: false, unbanUserError: false, unbanUserSuccess: false, findBansError: false, findBansSuccess: false, createServerError: false, createServerSuccess: false, deleteServerError: false, deleteServerSuccess: false\n      };\n    case UPDATING_USER_ROLE:\n      return {\n        ...state, isLoading: true, updateRoleError: false, updateRoleSuccess: false\n      };\n    case UPDATE_USER_ROLE_SUCCESS:\n      return {\n        ...state, isLoading: false, updateRoleError: false, updateRoleSuccess: true, serverUserList: action.payload\n      };\n    case UPDATE_USER_ROLE_FAIL:\n      return {\n        ...state, isLoading: false, updateRoleError: true, updateRoleSuccess: false\n      };\n    case TOGGLING_SERVER:\n      return {\n        ...state, isLoading: true, toggleServerError: false, toggleServerSuccess:  false\n      };\n    case TOGGLE_SERVER_SUCCESS:\n      return {\n        ...state, isLoading: false, toggleServerError: false, toggleServerSuccess:  true\n      };\n    case TOGGLE_SERVER_FAIL:\n      return {\n        ...state, isLoading: false, toggleServerError: true, toggleServerSuccess:  false\n      };\n    default:\n      return state;\n  }\n};\n\n// Actions\nexport const serverCreate = params => async dispatch => {\n  dispatch({ type: CREATING_SERVER });\n  try {\n    const headers = {\n      headers: {\n        'Content-Type': 'multipart/form-data',\n        'Accept': 'application/json',\n        'Authorization': authToken\n      }\n    }\n    const response = await axios.post(`${ROOT_URL}/api/v1/serverCreate`, params, headers);\n    if (response.data) {\n      dispatch({ type: CREATE_SERVER_SUCCESS, payload: response.data });\n    } else {\n      dispatch({ type: CREATE_SERVER_FAIL });\n    }\n  } catch(err) {\n    dispatch({ type: CREATE_SERVER_FAIL });\n  }\n};\n\nexport const findUserBans = params => async dispatch => {\n  dispatch({ type: FINDING_SERVER_BANS });\n  try {\n    const response = await axios.get(`${ROOT_URL}/api/v1/findUserBans`, { params: params });\n    if (response.data) {\n      dispatch({ type: FIND_SERVER_BANS_SUCCESS, payload: response.data });\n    } else {\n      dispatch({ type: FIND_SERVER_BANS_FAIL });\n    }\n  } catch(err) {\n    dispatch({ type: FIND_SERVER_BANS_FAIL });\n  }\n};\n\nexport const unbanUser = params => async dispatch => {\n  dispatch({ type: UNBANNING_USER });\n  try {\n    const response = await axios.post(`${ROOT_URL}/api/v1/unbanUser`, params, config);\n    if (response.data) {\n      dispatch({ type: UNBAN_USER_SUCCESS, payload: response.data });\n    } else {\n      dispatch({ type: UNBAN_USER_FAIL });\n    }\n  } catch(err) {\n    dispatch({ type: UNBAN_USER_FAIL });\n  }\n}\n\nexport const findUserList = params => async dispatch => {\n  dispatch({ type: FINDING_SERVER });\n  try {\n    const response = await axios.get(`${ROOT_URL}/api/v1/findUserList`, { params: params });\n    if (response.data) {\n      dispatch({ type: FIND_SERVER_SUCCESS, payload: response.data });\n    } else {\n      dispatch({ type: FIND_SERVER_FAIL });\n    }\n  } catch(err) {\n    dispatch({ type: FIND_SERVER_FAIL });\n  }\n};\n\nexport const serverDelete = params => async dispatch => {\n  dispatch({ type: DELETING_SERVER });\n  try {\n    const response = await axios.delete(`${ROOT_URL}/api/v1/serverDelete`, { data: params });\n    if (response.data) {\n      dispatch({ type: DELETE_SERVER_SUCCESS });\n    } else {\n      dispatch({ type: DELETE_SERVER_FAIL });\n    }\n  } catch (err) {\n    dispatch({ type: DELETE_SERVER_FAIL });\n  }\n};\n\nexport const updateUserRole = params => async dispatch => {\n  dispatch({ type: UPDATING_USER_ROLE });\n  try {\n    const response = await axios.put(`${ROOT_URL}/api/v1/updateUserRole`, params, config);\n    if (response.data) {\n      dispatch({ type: UPDATE_USER_ROLE_SUCCESS, payload: response.data });\n    } else {\n      dispatch({ type: UPDATE_USER_ROLE_FAIL });\n    }\n  } catch (err) {\n    dispatch({ type: UPDATE_USER_ROLE_FAIL });\n  }\n};\n\nexport const serverToggle = params => async dispatch => {\n  dispatch({ type: TOGGLING_SERVER });\n  try {\n    const response = await axios.get(`${ROOT_URL}/api/v1/findUserBans`, { params: params });\n    if (response.data) {\n      dispatch({ type: TOGGLE_SERVER_SUCCESS, payload: response.data });\n    } else {\n      dispatch({ type: TOGGLE_SERVER_FAIL });\n    }\n  } catch(err) {\n    dispatch({ type: TOGGLE_SERVER_FAIL });\n  }\n};\n\nexport function resetServerValues() {\n  return function(dispatch) {\n    dispatch({ type: RESET_SERVER_VALUES });\n  };\n}\n"]},"metadata":{},"sourceType":"module"}