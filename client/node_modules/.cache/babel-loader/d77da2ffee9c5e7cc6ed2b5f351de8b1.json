{"ast":null,"code":"var validators = [[/^(a\\=candidate.*)$/, require('rtc-validator/candidate')]];\nvar reSdpLineBreak = /(\\r?\\n|\\\\r\\\\n)/;\n/**\n  # rtc-sdpclean\n\n  Remove invalid lines from your SDP.\n\n  ## Why?\n\n  This module removes the occasional \"bad egg\" that will slip into SDP when it\n  is generated by the browser.  In particular these situations are catered for:\n\n  - invalid ICE candidates\n\n**/\n\nmodule.exports = function (input, opts) {\n  var lineBreak = detectLineBreak(input);\n  var lines = input.split(lineBreak);\n  var collector = (opts || {}).collector; // filter out invalid lines\n\n  lines = lines.filter(function (line) {\n    // iterate through the validators and use the one that matches\n    var validator = validators.reduce(function (memo, data, idx) {\n      return typeof memo != 'undefined' ? memo : data[0].exec(line) && {\n        line: line.replace(data[0], '$1'),\n        fn: data[1]\n      };\n    }, undefined); // if we have a validator, ensure we have no errors\n\n    var errors = validator ? validator.fn(validator.line) : []; // if we have errors and an error collector, then add to the collector\n\n    if (collector) {\n      errors.forEach(function (err) {\n        collector.push(err);\n      });\n    }\n\n    return errors.length === 0;\n  });\n  return lines.join(lineBreak);\n};\n\nfunction detectLineBreak(input) {\n  var match = reSdpLineBreak.exec(input);\n  return match && match[0];\n}","map":null,"metadata":{},"sourceType":"script"}