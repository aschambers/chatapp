{"ast":null,"code":"var common = require('./common.js');\n\nvar System = common.System;\nvar VbrMode = common.VbrMode;\nvar Float = common.Float;\nvar ShortBlock = common.ShortBlock;\nvar Util = common.Util;\nvar Arrays = common.Arrays;\nvar new_array_n = common.new_array_n;\nvar new_byte = common.new_byte;\nvar new_double = common.new_double;\nvar new_float = common.new_float;\nvar new_float_n = common.new_float_n;\nvar new_int = common.new_int;\nvar new_int_n = common.new_int_n;\nvar assert = common.assert;\n\nvar GainAnalysis = require('./GainAnalysis.js');\n\nfunction ReplayGain() {\n  this.linprebuf = new_float(GainAnalysis.MAX_ORDER * 2);\n  /**\n   * left input samples, with pre-buffer\n   */\n\n  this.linpre = 0;\n  this.lstepbuf = new_float(GainAnalysis.MAX_SAMPLES_PER_WINDOW + GainAnalysis.MAX_ORDER);\n  /**\n   * left \"first step\" (i.e. post first filter) samples\n   */\n\n  this.lstep = 0;\n  this.loutbuf = new_float(GainAnalysis.MAX_SAMPLES_PER_WINDOW + GainAnalysis.MAX_ORDER);\n  /**\n   * left \"out\" (i.e. post second filter) samples\n   */\n\n  this.lout = 0;\n  this.rinprebuf = new_float(GainAnalysis.MAX_ORDER * 2);\n  /**\n   * right input samples ...\n   */\n\n  this.rinpre = 0;\n  this.rstepbuf = new_float(GainAnalysis.MAX_SAMPLES_PER_WINDOW + GainAnalysis.MAX_ORDER);\n  this.rstep = 0;\n  this.routbuf = new_float(GainAnalysis.MAX_SAMPLES_PER_WINDOW + GainAnalysis.MAX_ORDER);\n  this.rout = 0;\n  /**\n   * number of samples required to reach number of milliseconds required\n   * for RMS window\n   */\n\n  this.sampleWindow = 0;\n  this.totsamp = 0;\n  this.lsum = 0.;\n  this.rsum = 0.;\n  this.freqindex = 0;\n  this.first = 0;\n  this.A = new_int(0 | GainAnalysis.STEPS_per_dB * GainAnalysis.MAX_dB);\n  this.B = new_int(0 | GainAnalysis.STEPS_per_dB * GainAnalysis.MAX_dB);\n}\n\nmodule.exports = ReplayGain;","map":null,"metadata":{},"sourceType":"script"}