{"ast":null,"code":"import _objectSpread from \"/Users/metabou/Desktop/chatapp/client/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/metabou/Desktop/chatapp/client/src/views/Chatroom/Chatroom.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport * as actions from '../../redux';\nimport { ROOT_URL } from '../../config/networkSettings';\nimport io from \"socket.io-client\";\nimport './Chatroom.css';\nimport person from '../../assets/images/person-icon.png';\nimport general from '../../assets/images/general.png';\nimport AuthNavigation from '../../components/AuthNavigation/AuthNavigation';\n\nclass Chatroom extends Component {\n  constructor(props) {\n    super(props);\n\n    this.sendMessage = event => {\n      if (event) {\n        event.preventDefault();\n\n        if (this.state.clickedUsername.length > 0 && this.state.clickedUsername !== this.state.username) {\n          this.socket.emit('PRIVATE_MESSAGE', {\n            from: this.state.username,\n            to: this.state.clickedUsername,\n            fromSocket: this.state.socketId,\n            toSocket: this.state.currentSocket,\n            message: this.state.message\n          });\n          this.setState({\n            message: ''\n          });\n        } else if (this.state.clickedUsername.length > 0 && this.state.clickedUsername === this.state.username) {\n          this.socket.emit('PERSONAL_MESSAGE', {\n            from: this.state.username,\n            to: this.state.clickedUsername,\n            fromSocket: this.state.socketId,\n            toSocket: this.state.currentSocket,\n            message: this.state.message\n          });\n          this.setState({\n            message: ''\n          });\n        } else if (this.state.clickedUsername.length < 1) {\n          this.socket.emit('SEND_MESSAGE', {\n            username: this.state.username,\n            message: this.state.message\n          });\n          this.setState({\n            message: ''\n          });\n        }\n      }\n    };\n\n    this.userDetails = user => {\n      this.setState({\n        clickedUsername: user.username,\n        clickedType: user.type,\n        userDetails: true,\n        currentSocket: user.socketId\n      }, () => {\n        this.socket.emit('GET_USERS');\n      });\n    };\n\n    this.state = {\n      username: \"\",\n      message: \"\",\n      type: \"\",\n      messages: [],\n      users: [],\n      clickedUsername: \"\",\n      clickedType: \"\",\n      privateMessages: [],\n      personalMessages: [],\n      userDetails: false,\n      socketId: \"\",\n      currentSocket: \"\"\n    };\n  }\n\n  componentDidMount() {\n    this.props.currentUser();\n    this.socket = io(ROOT_URL);\n    this.socket.on('connect', () => {\n      this.setState({\n        socketId: this.socket.id\n      });\n    });\n    this.socket.emit('GET_MESSAGES');\n    this.socket.emit('GET_USERS');\n    this.socket.on('RECEIVE_MESSAGE', data => {\n      this.setState({\n        messages: data\n      });\n    });\n    this.socket.on('RECEIVE_USERS', data => {\n      this.setState({\n        users: data\n      });\n\n      if (data && data.length) {\n        for (let i = 0; i < data.length; i++) {\n          if (this.state.clickedUsername && this.state.clickedUsername.length > 0 && this.state.clickedUsername === this.state.username) {\n            let userPersonalMessages = [];\n\n            for (let k = 0; k < data[i].personalMessages.length; k++) {\n              if (data[i].personalMessages[k].username === this.state.username) {\n                userPersonalMessages.push(data[i].personalMessages[k]);\n              }\n            }\n\n            if (userPersonalMessages.length > 0) {\n              this.setState(_objectSpread({}, this.state, {\n                personalMessages: userPersonalMessages,\n                privateMessages: []\n              }));\n            }\n          } else {\n            let userPrivateMessages = [];\n\n            for (let j = 0; j < data[i].privateMessages.length; j++) {\n              if (data[i].privateMessages[j].username === this.state.username && data[i].privateMessages[j].sentTo === this.state.clickedUsername || data[i].privateMessages[j].username === this.state.clickedUsername && data[i].privateMessages[j].sentTo === this.state.username) {\n                userPrivateMessages.push(data[i].privateMessages[j]);\n              }\n            }\n\n            if (userPrivateMessages.length > 0) {\n              this.setState(_objectSpread({}, this.state, {\n                personalMessages: [],\n                privateMessages: userPrivateMessages\n              }));\n            }\n          }\n        }\n      }\n    });\n    this.socket.on('RECEIVE_LOGOUT', data => {\n      this.setState({\n        users: data\n      });\n    });\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if (nextProps.user) {\n      const _nextProps$user = nextProps.user,\n            username = _nextProps$user.username,\n            type = _nextProps$user.type,\n            personalMessages = _nextProps$user.personalMessages,\n            privateMessages = _nextProps$user.privateMessages;\n      this.setState({\n        username: username,\n        type: type\n      });\n      this.socket.emit('SEND_USER', {\n        username: username,\n        type: type,\n        socketId: this.socket.id,\n        personalMessages: personalMessages || [],\n        privateMessages: privateMessages || [],\n        active: true\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    this.socket.disconnect(true);\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"chatroom\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    }, React.createElement(AuthNavigation, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 147\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"chatContainer\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 148\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"chatContainer-list\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 149\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"chatContainer-general\",\n      onClick: () => {\n        this.setState({\n          clickedUsername: \"\",\n          clickedType: '',\n          userDetails: false\n        });\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150\n      },\n      __self: this\n    }, React.createElement(\"img\", {\n      src: general,\n      style: {\n        height: '2.5rem',\n        width: '2.5rem'\n      },\n      alt: \"general-chat\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 151\n      },\n      __self: this\n    }, \"general\")), this.state.users.length > 0 ? this.state.users.map((user, index) => {\n      return React.createElement(\"div\", {\n        key: index,\n        className: this.state.clickedUsername === user.username ? \"chatContainer-sideperson private-message\" : \"chatContainer-sideperson\",\n        onClick: () => this.userDetails(user),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155\n        },\n        __self: this\n      }, React.createElement(\"img\", {\n        src: user.type === 'owner' ? person : user.type === 'admin' ? person : user.type === 'moderator' ? person : user.type === 'voice' ? person : person,\n        alt: \"user-icon\",\n        style: {\n          height: '2.5rem',\n          width: '2.5rem'\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157\n        },\n        __self: this\n      }, user.username), \" \", user.active === true ? React.createElement(\"div\", {\n        className: \"userStatus-online\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157\n        },\n        __self: this\n      }) : React.createElement(\"div\", {\n        className: \"userStatus-offline\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 157\n        },\n        __self: this\n      }));\n    }) : null), React.createElement(\"div\", {\n      className: \"chatContainer-area\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162\n      },\n      __self: this\n    }, this.state.clickedUsername.length > 0 && this.state.clickedUsername !== this.state.username ? this.state.privateMessages.length > 0 ? this.state.privateMessages.map((message, index) => {\n      return React.createElement(\"div\", {\n        className: \"chatContainer-container\",\n        key: index,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 166\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        className: \"chatContainer-eachusername\",\n        style: {\n          fontWeight: 900\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 167\n        },\n        __self: this\n      }, message.username, \": \"), React.createElement(\"span\", {\n        className: \"chatContainer-eachmessage\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 168\n        },\n        __self: this\n      }, message.message));\n    }) : null : this.state.clickedUsername.length > 0 && this.state.clickedUsername === this.state.username ? this.state.personalMessages.length > 0 ? this.state.personalMessages.map((message, index) => {\n      return React.createElement(\"div\", {\n        className: \"chatContainer-container\",\n        key: index,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 174\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        className: \"chatContainer-eachusername\",\n        style: {\n          fontWeight: 900\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 175\n        },\n        __self: this\n      }, message.username, \": \"), React.createElement(\"span\", {\n        className: \"chatContainer-eachmessage\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 176\n        },\n        __self: this\n      }, message.message));\n    }) : null : this.state.clickedUsername.length < 1 ? this.state.messages.length > 0 ? this.state.messages.map((message, index) => {\n      return React.createElement(\"div\", {\n        className: \"chatContainer-container\",\n        key: index,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 182\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        className: \"chatContainer-eachusername\",\n        style: {\n          fontWeight: 900\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 183\n        },\n        __self: this\n      }, message.username, \": \"), React.createElement(\"span\", {\n        className: \"chatContainer-eachmessage\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 184\n        },\n        __self: this\n      }, message.message));\n    }) : null : null)), React.createElement(\"div\", {\n      className: \"chatContainer-message\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 189\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      className: \"chatMessage\",\n      type: \"text\",\n      onChange: event => {\n        this.setState({\n          message: event.target.value\n        });\n      },\n      value: this.state.message,\n      onKeyDown: event => {\n        event.keyCode === 13 && event.shiftKey === false ? this.sendMessage(event) : this.sendMessage(null);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      className: \"chatSend\",\n      onClick: event => {\n        this.sendMessage(event);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 191\n      },\n      __self: this\n    }, \"Send\")));\n  }\n\n}\n\nfunction mapStateToProps({\n  usersReducer\n}) {\n  return {\n    error: usersReducer.error,\n    isLoading: usersReducer.isLoading,\n    success: usersReducer.success,\n    user: usersReducer.user\n  };\n}\n\nexport default connect(mapStateToProps, actions)(Chatroom);","map":{"version":3,"sources":["/Users/metabou/Desktop/chatapp/client/src/views/Chatroom/Chatroom.js"],"names":["React","Component","connect","actions","ROOT_URL","io","person","general","AuthNavigation","Chatroom","constructor","props","sendMessage","event","preventDefault","state","clickedUsername","length","username","socket","emit","from","to","fromSocket","socketId","toSocket","currentSocket","message","setState","userDetails","user","clickedType","type","messages","users","privateMessages","personalMessages","componentDidMount","currentUser","on","id","data","i","userPersonalMessages","k","push","userPrivateMessages","j","sentTo","componentWillReceiveProps","nextProps","active","componentWillUnmount","disconnect","render","height","width","map","index","fontWeight","target","value","keyCode","shiftKey","mapStateToProps","usersReducer","error","isLoading","success"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport * as actions from '../../redux';\nimport { ROOT_URL } from '../../config/networkSettings';\nimport io from \"socket.io-client\";\nimport './Chatroom.css';\nimport person from '../../assets/images/person-icon.png';\nimport general from '../../assets/images/general.png';\nimport AuthNavigation from '../../components/AuthNavigation/AuthNavigation';\n\nclass Chatroom extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      username: \"\",\n      message: \"\",\n      type: \"\",\n      messages: [],\n      users: [],\n      clickedUsername: \"\",\n      clickedType: \"\",\n      privateMessages: [],\n      personalMessages: [],\n      userDetails: false,\n      socketId: \"\",\n      currentSocket: \"\"\n    }\n  }\n\n  componentDidMount() {\n    this.props.currentUser();\n\n    this.socket = io(ROOT_URL);\n\n    this.socket.on('connect', () => {\n      this.setState({ socketId: this.socket.id });\n    });\n\n    this.socket.emit('GET_MESSAGES');\n    this.socket.emit('GET_USERS');\n\n    this.socket.on('RECEIVE_MESSAGE', (data) => {\n      this.setState({ messages: data});\n    });\n\n    this.socket.on('RECEIVE_USERS', (data) => {\n      this.setState({ users: data });\n      if(data && data.length) {\n        for(let i = 0; i < data.length; i++) {\n          if(this.state.clickedUsername && this.state.clickedUsername.length > 0 && this.state.clickedUsername === this.state.username) {\n            let userPersonalMessages = [];\n            for(let k = 0; k < data[i].personalMessages.length; k++) {\n              if(data[i].personalMessages[k].username === this.state.username) {\n                userPersonalMessages.push(data[i].personalMessages[k]);\n              }\n            }\n            if(userPersonalMessages.length > 0) {\n              this.setState({ ...this.state, personalMessages: userPersonalMessages, privateMessages: [] });\n            }\n          } else {\n            let userPrivateMessages = [];\n            for(let j = 0; j < data[i].privateMessages.length; j++) {\n              if((data[i].privateMessages[j].username === this.state.username && data[i].privateMessages[j].sentTo === this.state.clickedUsername) || (data[i].privateMessages[j].username === this.state.clickedUsername && data[i].privateMessages[j].sentTo === this.state.username)) {\n                userPrivateMessages.push(data[i].privateMessages[j]);\n              }\n            }\n            if(userPrivateMessages.length > 0) {\n              this.setState({ ...this.state, personalMessages: [], privateMessages: userPrivateMessages });\n            }\n          }\n        }\n      }\n    });\n\n    this.socket.on('RECEIVE_LOGOUT', (data) => {\n      this.setState({ users: data });\n    });\n  }\n\n  componentWillReceiveProps(nextProps) {\n    if(nextProps.user) {\n      const {\n        username,\n        type,\n        personalMessages,\n        privateMessages\n      } = nextProps.user;\n\n      this.setState({ username: username, type: type });\n\n      this.socket.emit('SEND_USER', {\n        username: username,\n        type: type,\n        socketId: this.socket.id,\n        personalMessages: personalMessages || [],\n        privateMessages: privateMessages || [],\n        active: true\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    this.socket.disconnect(true);\n  }\n\n  sendMessage = (event) => {\n    if(event) {\n      event.preventDefault();\n      if(this.state.clickedUsername.length > 0 && this.state.clickedUsername !== this.state.username) {\n        this.socket.emit('PRIVATE_MESSAGE', {\n          from: this.state.username,\n          to: this.state.clickedUsername,\n          fromSocket: this.state.socketId,\n          toSocket: this.state.currentSocket,\n          message: this.state.message\n        });\n        this.setState({message: ''});\n      } else if(this.state.clickedUsername.length > 0 && this.state.clickedUsername === this.state.username) {\n        this.socket.emit('PERSONAL_MESSAGE', {\n          from: this.state.username,\n          to: this.state.clickedUsername,\n          fromSocket: this.state.socketId,\n          toSocket: this.state.currentSocket,\n          message: this.state.message\n        });\n        this.setState({message: ''});\n      } else if(this.state.clickedUsername.length < 1) {\n        this.socket.emit('SEND_MESSAGE', {\n          username: this.state.username,\n          message: this.state.message\n        });\n        this.setState({message: ''});\n      }\n    }\n  }\n\n  userDetails = (user) => {\n    this.setState({ clickedUsername: user.username, clickedType: user.type, userDetails: true, currentSocket: user.socketId }, () => {\n      this.socket.emit('GET_USERS');\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"chatroom\">\n        <AuthNavigation />\n        <div className=\"chatContainer\">\n          <div className=\"chatContainer-list\">\n          <div className=\"chatContainer-general\" onClick={() => { this.setState({ clickedUsername: \"\", clickedType: '', userDetails: false }) }}>\n            <img src={general} style={{ height: '2.5rem', width: '2.5rem' }} alt=\"general-chat\" /><div>general</div>\n          </div>\n          {this.state.users.length > 0 ? this.state.users.map((user, index)  => {\n            return (\n              <div key={index} className={this.state.clickedUsername === user.username ? \"chatContainer-sideperson private-message\" : \"chatContainer-sideperson\"} onClick={() => this.userDetails(user)}>\n                <img src={user.type === 'owner' ? person : (user.type === 'admin' ? person : (user.type === 'moderator' ? person : (user.type === 'voice' ? person : person)))} alt=\"user-icon\" style={{ height: '2.5rem', width: '2.5rem' }} />\n                <div>{user.username}</div> {user.active === true ? <div className=\"userStatus-online\" /> : <div className=\"userStatus-offline\" />}\n              </div>\n            )\n          }) : null}\n          </div>\n          <div className=\"chatContainer-area\">\n            {this.state.clickedUsername.length > 0 && this.state.clickedUsername !== this.state.username ?\n            (this.state.privateMessages.length > 0 ? this.state.privateMessages.map((message, index) => {\n              return (\n                <div className=\"chatContainer-container\" key={index}>\n                  <span className=\"chatContainer-eachusername\" style={{ fontWeight: 900 }}>{message.username}: </span>\n                  <span className=\"chatContainer-eachmessage\">{message.message}</span>\n                </div>\n              )\n            }) : null) :\n            this.state.clickedUsername.length > 0 && this.state.clickedUsername === this.state.username ? (this.state.personalMessages.length > 0 ? this.state.personalMessages.map((message, index) => {\n              return (\n                <div className=\"chatContainer-container\" key={index}>\n                  <span className=\"chatContainer-eachusername\" style={{ fontWeight: 900 }}>{message.username}: </span>\n                  <span className=\"chatContainer-eachmessage\">{message.message}</span>\n                </div>\n            )}) : null) :\n            this.state.clickedUsername.length < 1 ?\n            (this.state.messages.length > 0 ? this.state.messages.map((message, index)  => {\n            return (\n              <div className=\"chatContainer-container\" key={index}>\n                <span className=\"chatContainer-eachusername\" style={{ fontWeight: 900 }}>{message.username}: </span>\n                <span className=\"chatContainer-eachmessage\">{message.message}</span>\n              </div>\n            )}) : null) : null}\n          </div>\n        </div>\n        <div className=\"chatContainer-message\">\n          <input className=\"chatMessage\" type=\"text\" onChange={(event) => { this.setState({ message: event.target.value }); }} value={this.state.message} onKeyDown={(event) => { event.keyCode === 13 && event.shiftKey === false ? this.sendMessage(event) : this.sendMessage(null) }} />\n          <button className=\"chatSend\" onClick={(event) => { this.sendMessage(event) }}>Send</button>\n        </div>\n      </div>\n    );\n  }\n}\n\nfunction mapStateToProps({ usersReducer }) {\n  return {\n    error: usersReducer.error,\n    isLoading: usersReducer.isLoading,\n    success: usersReducer.success,\n    user: usersReducer.user\n  };\n}\n\nexport default connect(mapStateToProps, actions)(Chatroom);"]},"metadata":{},"sourceType":"module"}