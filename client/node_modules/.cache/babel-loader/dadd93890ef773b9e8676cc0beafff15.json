{"ast":null,"code":"import _slicedToArray from \"/Users/metabou/Desktop/chatapp/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/metabou/Desktop/chatapp/client/src/views/Dashboard/Dashboard.js\";\nimport React, { useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport * as actions from '../../redux';\nimport ReactTooltip from 'react-tooltip';\nimport { Redirect } from 'react-router';\nimport { toast } from 'react-toastify';\nimport ToastMessage from '../../components/ToastMessage/ToastMessage';\nimport Chatroom from '../../components/Chatroom/Chatroom';\nimport CreateServer from '../../components/CreateServer/CreateServer';\nimport JoinServer from '../../components/JoinServer/JoinServer';\nimport './Dashboard.css';\nimport chatot from '../../assets/images/chatot.png';\nimport friends from '../../assets/images/friends.png';\nimport settings from '../../assets/images/settings.png';\nimport numbersign from '../../assets/images/numbersign.png';\nimport invite from '../../assets/images/invite.png';\nimport notification from '../../assets/images/notification.png';\nimport privacylock from '../../assets/images/privacylock.png';\nimport serversettings from '../../assets/images/serversettings.png';\nimport category from '../../assets/images/category.png';\nimport createchannel from '../../assets/images/createchannel.png';\nimport Draggable from '../../components/Draggable/Draggable';\n\nconst Dashboard = props => {\n  const _useState = useState(''),\n        _useState2 = _slicedToArray(_useState, 2),\n        id = _useState2[0],\n        setId = _useState2[1];\n\n  const _useState3 = useState(''),\n        _useState4 = _slicedToArray(_useState3, 2),\n        username = _useState4[0],\n        setUsername = _useState4[1];\n\n  const _useState5 = useState(''),\n        _useState6 = _slicedToArray(_useState5, 2),\n        email = _useState6[0],\n        setEmail = _useState6[1];\n\n  const _useState7 = useState(''),\n        _useState8 = _slicedToArray(_useState7, 2),\n        imageUrl = _useState8[0],\n        setImageUrl = _useState8[1];\n\n  const _useState9 = useState(false),\n        _useState10 = _slicedToArray(_useState9, 2),\n        active = _useState10[0],\n        setActive = _useState10[1];\n\n  const _useState11 = useState('metabou'),\n        _useState12 = _slicedToArray(_useState11, 2),\n        server = _useState12[0],\n        setServer = _useState12[1];\n\n  const _useState13 = useState(''),\n        _useState14 = _slicedToArray(_useState13, 2),\n        hover = _useState14[0],\n        setHover = _useState14[1];\n\n  const _useState15 = useState(false),\n        _useState16 = _slicedToArray(_useState15, 2),\n        isSettingsOpen = _useState16[0],\n        setSettingsOpen = _useState16[1];\n\n  const _useState17 = useState(false),\n        _useState18 = _slicedToArray(_useState17, 2),\n        isModalOpen = _useState18[0],\n        setModalOpen = _useState18[1];\n\n  const _useState19 = useState(\"\"),\n        _useState20 = _slicedToArray(_useState19, 2),\n        currentModal = _useState20[0],\n        setCurrentModal = _useState20[1];\n\n  const _useState21 = useState(\"US West\"),\n        _useState22 = _slicedToArray(_useState21, 2),\n        region = _useState22[0],\n        setRegion = _useState22[1];\n\n  const _useState23 = useState([]),\n        _useState24 = _slicedToArray(_useState23, 2),\n        serversList = _useState24[0],\n        setServersList = _useState24[1];\n\n  const _useState25 = useState(false),\n        _useState26 = _slicedToArray(_useState25, 2),\n        generalMenu = _useState26[0],\n        showGeneralMenu = _useState26[1];\n\n  const _useState27 = useState(false),\n        _useState28 = _slicedToArray(_useState27, 2),\n        serverSettings = _useState28[0],\n        showServerSettings = _useState28[1];\n\n  useEffect(() => {\n    if (!props.user) {\n      props.currentUser();\n      window.addEventListener('keydown', detectEscape);\n    } else if (props.user) {\n      const _props$user = props.user,\n            id = _props$user.id,\n            username = _props$user.username,\n            email = _props$user.email,\n            imageUrl = _props$user.imageUrl,\n            active = _props$user.active,\n            serversList = _props$user.serversList;\n      setId(id);\n      setUsername(username);\n      setEmail(email);\n      setImageUrl(imageUrl);\n      setActive(active);\n      setServersList(serversList);\n    }\n  }, [props]);\n\n  const detectEscape = event => {\n    if (event.keyCode === 27) {\n      setSettingsOpen(false);\n    }\n  };\n\n  if (props.logout) {\n    return React.createElement(Redirect, {\n      push: true,\n      to: \"/\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    });\n  }\n\n  const userLogout = () => {\n    props.userLogout({\n      id: id\n    });\n  };\n\n  const toggleModal = value => {\n    setModalOpen(true);\n    setCurrentModal(value);\n  };\n\n  const getUpdatedServerList = closeModal => {\n    if (closeModal) {\n      setModalOpen(false);\n      toast.dismiss();\n      toast.success('Success, the server was created!', {\n        position: 'bottom-center'\n      });\n      props.getUpdatedUser({\n        userId: id\n      });\n    } else {\n      toast.dismiss();\n      toast.error('There was an error creating the server!', {\n        position: 'bottom-center'\n      });\n    }\n  };\n\n  return React.createElement(\"div\", {\n    className: \"dashboard\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  }, React.createElement(Draggable, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 88\n    },\n    __self: this\n  }));\n};\n\nfunction mapStateToProps({\n  usersReducer,\n  serversReducer\n}) {\n  return {\n    error: usersReducer.error,\n    isLoading: usersReducer.isLoading,\n    success: usersReducer.success,\n    logout: usersReducer.logout,\n    user: usersReducer.user,\n    users: usersReducer.users,\n    serversList: serversReducer.serversList\n  };\n}\n\nexport default connect(mapStateToProps, actions)(Dashboard);","map":{"version":3,"sources":["/Users/metabou/Desktop/chatapp/client/src/views/Dashboard/Dashboard.js"],"names":["React","useState","useEffect","connect","actions","ReactTooltip","Redirect","toast","ToastMessage","Chatroom","CreateServer","JoinServer","chatot","friends","settings","numbersign","invite","notification","privacylock","serversettings","category","createchannel","Draggable","Dashboard","props","id","setId","username","setUsername","email","setEmail","imageUrl","setImageUrl","active","setActive","server","setServer","hover","setHover","isSettingsOpen","setSettingsOpen","isModalOpen","setModalOpen","currentModal","setCurrentModal","region","setRegion","serversList","setServersList","generalMenu","showGeneralMenu","serverSettings","showServerSettings","user","currentUser","window","addEventListener","detectEscape","event","keyCode","logout","userLogout","toggleModal","value","getUpdatedServerList","closeModal","dismiss","success","position","getUpdatedUser","userId","error","mapStateToProps","usersReducer","serversReducer","isLoading","users"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport * as actions from '../../redux';\nimport ReactTooltip from 'react-tooltip';\nimport { Redirect } from 'react-router';\nimport { toast } from 'react-toastify';\nimport ToastMessage from '../../components/ToastMessage/ToastMessage';\nimport Chatroom from '../../components/Chatroom/Chatroom';\nimport CreateServer from '../../components/CreateServer/CreateServer';\nimport JoinServer from '../../components/JoinServer/JoinServer';\nimport './Dashboard.css';\nimport chatot from '../../assets/images/chatot.png';\nimport friends from '../../assets/images/friends.png';\nimport settings from '../../assets/images/settings.png';\nimport numbersign from '../../assets/images/numbersign.png';\nimport invite from '../../assets/images/invite.png';\nimport notification from '../../assets/images/notification.png';\nimport privacylock from '../../assets/images/privacylock.png';\nimport serversettings from '../../assets/images/serversettings.png';\nimport category from '../../assets/images/category.png';\nimport createchannel from '../../assets/images/createchannel.png';\nimport Draggable from '../../components/Draggable/Draggable';\n\nconst Dashboard = (props) => {\n  const [id, setId] = useState('');\n  const [username, setUsername] = useState('');\n  const [email, setEmail] = useState('');\n  const [imageUrl, setImageUrl] = useState('');\n  const [active, setActive] = useState(false);\n  const [server, setServer] = useState('metabou');\n  const [hover, setHover] = useState('');\n  const [isSettingsOpen, setSettingsOpen] = useState(false);\n  const [isModalOpen, setModalOpen] = useState(false);\n  const [currentModal, setCurrentModal] = useState(\"\");\n  const [region, setRegion] = useState(\"US West\");\n  const [serversList, setServersList] = useState([]);\n  const [generalMenu, showGeneralMenu] = useState(false);\n  const [serverSettings, showServerSettings] = useState(false);\n\n  useEffect(() => {\n    if(!props.user) {\n      props.currentUser();\n      window.addEventListener('keydown', detectEscape);\n    } else if(props.user) {\n      const { id, username, email, imageUrl, active, serversList } = props.user;\n      setId(id);\n      setUsername(username);\n      setEmail(email);\n      setImageUrl(imageUrl);\n      setActive(active);\n      setServersList(serversList);\n    }\n  }, [props]);\n\n  const detectEscape = (event) => {\n    if (event.keyCode === 27) {\n      setSettingsOpen(false);\n    }\n  }\n\n  if(props.logout) {\n    return <Redirect push to=\"/\" />;\n  }\n\n  const userLogout = () => {\n    props.userLogout({ id: id });\n  }\n\n  const toggleModal = (value) => {\n    setModalOpen(true);\n    setCurrentModal(value);\n  }\n\n  const getUpdatedServerList = (closeModal) => {\n    if (closeModal) {\n      setModalOpen(false);\n      toast.dismiss();\n      toast.success('Success, the server was created!', { position: 'bottom-center' });\n      props.getUpdatedUser({ userId: id });\n    } else {\n      toast.dismiss();\n      toast.error('There was an error creating the server!', { position: 'bottom-center' });\n    }\n  }\n\n  return (\n    <div className=\"dashboard\">\n      <Draggable />\n      {/* <ToastMessage />\n      {isModalOpen ? <span className=\"contentBackground\"></span> : null}\n      <div className=\"sidebar\">\n        <div className=\"sidebar-container\" onPointerOver={() => { setHover(\"Home\") }} onPointerOut={() => { setHover(\"\") }}>\n          {hover === \"Home\" && server !== \"\" ? <span className=\"sidebar-hover\"></span> : null}\n          {server === \"\" ? <span className=\"sidebar-select\"></span> : null}\n          <img className=\"sidebar-logo\" src={chatot} alt=\"chatter-icon-logo\" onClick={() => { setServer(\"\") }} />\n          {hover === \"Home\" ? <span className=\"tooltip\"><span>Home</span></span> : null}\n        </div>\n        <div className=\"sidebar-border\" />\n        <div className=\"sidebar-container\" onPointerOver={() => { setHover(username) }} onPointerOut={() => { setHover(\"\") }}>\n          {hover === username && server !== username && server !== \"Home\" ? <span className=\"sidebar-hover\"></span> : null}\n          {server === username ? <span className=\"sidebar-select\"></span> : null}\n          <img className=\"sidebar-logo\" src={chatot} alt=\"chatter-icon\" onClick={() => { setServer(username) }} />\n          {hover === username ? <span className=\"tooltip\"><span>{username}</span></span> : null}\n        </div>\n        {serversList && serversList.length > 0 ? serversList.map((item, index)  => {\n          return (\n            <div key={index} className=\"sidebar-container\" onPointerOver={() => { setHover(item.name) }} onPointerOut={() => { setHover(\"\") }}>\n              {hover === item.name && server !== item.name && server !== \"Home\" ? <span className=\"sidebar-hover\"></span> : null}\n              {server === item.name ? <span className=\"sidebar-select\"></span> : null}\n              <img className=\"sidebar-logo\" src={item.imageUrl ? item.imageUrl : chatot} alt=\"chatter-icon\" onClick={() => { setServer(item.name) }} />\n              {hover === item.name ? <span className=\"tooltip\"><span>{item.name}</span></span> : null}\n            </div>\n          )\n        }) : null}\n      </div>\n      {server === \"\" ?\n        <div className=\"sidebarleft\">\n          <div className=\"sidebarleft-container\">\n            <input placeholder=\"Find or start a conversation\"></input>\n          </div>\n          <div className=\"sidebarleft-border\" />\n          <div className=\"sidebarleft-friendscontainer\">\n            <img className=\"sidebarleft-logo\" src={friends} alt=\"friends-icon\" />\n            <span className=\"sidebarleft-friends\">Friends</span>\n          </div>\n          <div className=\"sidebarleft-border\" />\n          <div className=\"sidebarleft-directmessages\">\n            <span>Private Messages</span>\n          </div>\n          <div className=\"sidebarleft-bordertwo\" />\n          <div className=\"userinfo\">\n            <div className=\"username\">\n              <img className=\"username-image\" src={imageUrl ? imageUrl : chatot} alt=\"username-icon\" />\n            </div>\n            {active ? <div className=\"userinfo-online\"></div> : null}\n            <span style={{ color: 'white' }}>{username}</span>\n            <img className=\"settings-image\" src={settings} alt=\"settings-icon\" onClick={() => { setSettingsOpen(!isSettingsOpen); }} />\n          </div>\n        </div> :\n        <div className=\"sidebarleft\">\n          <div className=\"sidebarleft-container\">\n            <p className=\"sidebarleft-container-header\">{server}</p>\n            <p className=\"sidebarleft-container-dropdown\" onClick={() => { showServerSettings(!serverSettings); }}><i class=\"channelarrow down\"></i></p>\n            {serverSettings ?\n              <div className=\"serversettings-modal\">\n                <div className=\"serversettings-modal-section\">\n                  <img src={invite} alt=\"invite-people\" height={25} width={25} />\n                  <span>Invite People</span>\n                </div>\n                <div className=\"serversettings-modal-section\">\n                  <img src={serversettings} alt=\"server-settings\" height={25} width={25} />\n                  <span>Server Settings</span>\n                </div>\n                <div className=\"serversettings-modal-section\">\n                  <img src={createchannel} alt=\"server-settings\" height={25} width={25} />\n                  <span>Create Channel</span>\n                </div>\n                <div className=\"serversettings-modal-section\">\n                  <img src={category} alt=\"server-settings\" height={25} width={25} />\n                  <span>Create Category</span>\n                </div>\n                <div className=\"serversettings-modal-section\">\n                  <img src={notification} alt=\"server-settings\" height={25} width={25} />\n                  <span>Notification Settings</span>\n                </div>\n                <div className=\"serversettings-modal-section\">\n                  <img src={privacylock} alt=\"server-settings\" height={25} width={25} />\n                  <span>Privacy Settings</span>\n                </div>\n              </div>\n            : null}\n          </div>\n          <div className=\"sidebarleft-mainchat\">\n            <div></div>\n            <div className=\"sidebarleft-mainchat-outsidechannel\">\n              <p><img src={numbersign} alt=\"channel\" height={18} width={18} /><span>General</span></p>\n            </div>\n            <div className=\"sidebarleft-mainchat-outsidechannel\">\n              <p><img src={numbersign} alt=\"channel\" height={18} width={18} /><span>General</span></p>\n            </div>\n            <p className=\"sidebarleft-mainchat-dropdown\" onClick={() => { showGeneralMenu(!generalMenu); }}>{generalMenu ? <i class=\"arrow down\"></i> : <i class=\"arrow right\"></i>}<span>General</span></p>\n            {generalMenu ?\n            <div className=\"sidebarleft-mainchat-channel\">\n              <p><img src={numbersign} alt=\"channel\" height={18} width={18} /><span>General</span></p>\n            </div> : null}\n          </div>\n        </div>\n      }\n      {server !== \"\" ?\n        <Chatroom /> :\n        <div className=\"mainarea\">\n          <div className=\"mainarea-topnav\">\n          </div>\n          <div className=\"mainarea-container\">\n            <div className=\"mainarea-container-addserver\">\n              <h1>Create</h1>\n              <p>Create a new server and invite other people to join!</p>\n              <button onClick={() => { toggleModal(\"create\") }}>Create a server</button>\n            </div>\n            <div className=\"mainarea-container-joinserver\">\n              <h1>Join</h1>\n              <p>Enter an secret invite code to join an existing server!</p>\n              <button onClick={() => { toggleModal(\"join\") }}>Join a server</button>\n            </div>\n          </div>\n        </div>\n      }\n      {isSettingsOpen ?\n        <div className=\"usersettings\">\n          <div className=\"usersettings-sidebar\">\n            <h1>User Settings</h1>\n            <p>My Account</p>\n            <p>Privacy &amp; Safety</p>\n            <p>Connections</p>\n            <p>Billing</p>\n            <h1>App Settings</h1>\n            <p>Voice &amp; Video</p>\n            <p>Notifications</p>\n            <p>Appearance</p>\n            <p>Language</p>\n            <p onClick={userLogout}>Logout</p>\n          </div>\n          <div className=\"usersettings-accountcontainer\">\n            <div className=\"usersettings-myaccount\">\n              <h1>My Account</h1>\n              <div className=\"usersettings-myaccount__container\">\n                <div className=\"usersettings-myaccount__container-image\">\n                  <img src={imageUrl ? imageUrl : chatot} alt=\"username-icon\" />\n                </div>\n                <div className=\"usersettings-myaccount__container-info\">\n                  <div className=\"usersettings-myaccount__container-info-username\">\n                    <span>Username</span><br/>\n                    <span>{username}</span>\n                  </div>\n                  <div className=\"usersettings-myaccount__container-info-email\">\n                    <span>Email Address</span><br/>\n                    <span>{email}</span>\n                  </div>\n                </div>\n                <div className=\"usersettings-myaccount__container-edit\">\n                  <span>Edit</span>\n                </div>\n              </div>\n            </div>\n            <div className=\"usersettings-authentication\">\n              <h1>Two-Factor Authentication</h1>\n              <p>Protect your account with an extra layer of security. Once configured you'll be required to enter your password and an authentication code from your mobile device to login.</p>\n              <div className=\"usersettings-authentication-enable\">\n                <span>Enable</span>\n              </div>\n            </div>\n            <div className=\"usersettings-escape\" onClick={() => { setSettingsOpen(!isSettingsOpen); }}>\n              <span>&#215;</span>\n              <p>ESC</p>\n            </div>\n          </div>\n        </div>\n      : null}\n      {isModalOpen && currentModal === \"create\" ?\n        <CreateServer id={id} region={region} setRegion={(region) => { setRegion(region) }} setModalOpen={() => { setModalOpen(!isModalOpen) }} getUpdatedServerList={(closeModal) => { getUpdatedServerList(closeModal) }} />\n      : null}\n      {isModalOpen && currentModal === \"join\" ?\n        <JoinServer setModalOpen={() => { setModalOpen(!isModalOpen) }}/>\n      : null} */}\n    </div>\n  );\n}\n\nfunction mapStateToProps({ usersReducer, serversReducer }) {\n  return {\n    error: usersReducer.error,\n    isLoading: usersReducer.isLoading,\n    success: usersReducer.success,\n    logout: usersReducer.logout,\n    user: usersReducer.user,\n    users: usersReducer.users,\n    serversList: serversReducer.serversList\n  };\n}\n\nexport default connect(mapStateToProps, actions)(Dashboard);"]},"metadata":{},"sourceType":"module"}