{"ast":null,"code":"/* jshint node: true */\n\n/* global window: false */\n\n/* global navigator: false */\n'use strict';\n\nvar browser = require('detect-browser').detect();\n/**\n  ### `rtc-core/detect`\n\n  A browser detection helper for accessing prefix-free versions of the various\n  WebRTC types.\n\n  ### Example Usage\n\n  If you wanted to get the native `RTCPeerConnection` prototype in any browser\n  you could do the following:\n\n  ```js\n  var detect = require('rtc-core/detect'); // also available in rtc/detect\n  var RTCPeerConnection = detect('RTCPeerConnection');\n  ```\n\n  This would provide whatever the browser prefixed version of the\n  RTCPeerConnection is available (`webkitRTCPeerConnection`,\n  `mozRTCPeerConnection`, etc).\n**/\n\n\nvar detect = module.exports = function (target, opts) {\n  var attach = (opts || {}).attach;\n  var prefixIdx;\n  var prefix;\n  var testName;\n  var hostObject = this || (typeof window != 'undefined' ? window : undefined); // initialise to default prefixes\n  // (reverse order as we use a decrementing for loop)\n\n  var prefixes = ((opts || {}).prefixes || ['ms', 'o', 'moz', 'webkit']).concat(''); // if we have no host object, then abort\n\n  if (!hostObject) {\n    return;\n  } // iterate through the prefixes and return the class if found in global\n\n\n  for (prefixIdx = prefixes.length; prefixIdx--;) {\n    prefix = prefixes[prefixIdx]; // construct the test class name\n    // if we have a prefix ensure the target has an uppercase first character\n    // such that a test for getUserMedia would result in a\n    // search for webkitGetUserMedia\n\n    testName = prefix + (prefix ? target.charAt(0).toUpperCase() + target.slice(1) : target);\n\n    if (typeof hostObject[testName] != 'undefined') {\n      // update the last used prefix\n      detect.browser = detect.browser || prefix.toLowerCase();\n\n      if (attach) {\n        hostObject[target] = hostObject[testName];\n      }\n\n      return hostObject[testName];\n    }\n  }\n}; // detect mozilla (yes, this feels dirty)\n\n\ndetect.moz = typeof navigator != 'undefined' && !!navigator.mozGetUserMedia; // set the browser and browser version\n\ndetect.browser = browser.name;\ndetect.browserVersion = detect.version = browser.version;","map":null,"metadata":{},"sourceType":"script"}