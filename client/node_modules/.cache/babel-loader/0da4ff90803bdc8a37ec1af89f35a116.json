{"ast":null,"code":"var ready = require('./ready');\n/**\n  ### `source(socket)`\n\n  Create a pull-stream `Source` that will read data from the `socket`.\n\n  <<< examples/read.js\n\n**/\n\n\nmodule.exports = function (socket) {\n  var buffer = [];\n  var receiver;\n  var ended;\n  socket.addEventListener('message', function (evt) {\n    if (receiver) {\n      return receiver(null, evt.data);\n    }\n\n    buffer.push(evt.data);\n  });\n  socket.addEventListener('close', function (evt) {\n    if (ended) return;\n\n    if (receiver) {\n      return receiver(ended = true);\n    }\n  });\n  socket.addEventListener('error', function (evt) {\n    if (ended) return;\n    ended = evt;\n\n    if (receiver) {\n      receiver(ended);\n    }\n  });\n\n  function read(abort, cb) {\n    receiver = null; //if stream has already ended.\n\n    if (ended) return cb(ended); // if ended, abort\n\n    if (abort) {\n      //this will callback when socket closes\n      receiver = cb;\n      return socket.close();\n    }\n\n    ready(socket, function (end) {\n      if (end) {\n        return cb(ended = end);\n      } // read from the socket\n\n\n      if (ended && ended !== true) {\n        return cb(ended);\n      } else if (buffer.length > 0) {\n        return cb(null, buffer.shift());\n      } else if (ended) {\n        return cb(true);\n      }\n\n      receiver = cb;\n    });\n  }\n\n  ;\n  return read;\n};","map":null,"metadata":{},"sourceType":"script"}