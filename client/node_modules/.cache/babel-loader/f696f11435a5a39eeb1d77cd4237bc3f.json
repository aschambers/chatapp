{"ast":null,"code":"var debug = require('cog/logger')('rtc-validator');\n\nvar rePrefix = /^(?:a=)?candidate:/;\n/*\n\nvalidation rules as per:\nhttp://tools.ietf.org/html/draft-ietf-mmusic-ice-sip-sdp-03#section-8.1\n\n   candidate-attribute   = \"candidate\" \":\" foundation SP component-id SP\n                           transport SP\n                           priority SP\n                           connection-address SP     ;from RFC 4566\n                           port         ;port from RFC 4566\n                           SP cand-type\n                           [SP rel-addr]\n                           [SP rel-port]\n                           *(SP extension-att-name SP\n                                extension-att-value)\n\n   foundation            = 1*32ice-char\n   component-id          = 1*5DIGIT\n   transport             = \"UDP\" / transport-extension\n   transport-extension   = token              ; from RFC 3261\n   priority              = 1*10DIGIT\n   cand-type             = \"typ\" SP candidate-types\n   candidate-types       = \"host\" / \"srflx\" / \"prflx\" / \"relay\" / token\n   rel-addr              = \"raddr\" SP connection-address\n   rel-port              = \"rport\" SP port\n   extension-att-name    = token\n   extension-att-value   = *VCHAR\n   ice-char              = ALPHA / DIGIT / \"+\" / \"/\"\n*/\n\nvar partValidation = [[/.+/, 'invalid foundation component', 'foundation'], [/\\d+/, 'invalid component id', 'component-id'], [/(UDP|TCP)/i, 'transport must be TCP or UDP', 'transport'], [/\\d+/, 'numeric priority expected', 'priority'], [require('reu/ip'), 'invalid connection address', 'connection-address'], [/\\d+/, 'invalid connection port', 'connection-port'], [/typ/, 'Expected \"typ\" identifier', 'type classifier'], [/.+/, 'Invalid candidate type specified', 'candidate-type']];\n/**\n  ### `rtc-validator/candidate`\n\n  Validate that an `RTCIceCandidate` (or plain old object with data, sdpMid,\n  etc attributes) is a valid ice candidate.\n\n  Specs reviewed as part of the validation implementation:\n\n  - <http://tools.ietf.org/html/draft-ietf-mmusic-ice-sip-sdp-03#section-8.1>\n  - <http://tools.ietf.org/html/rfc5245>\n\n**/\n\nmodule.exports = function (data) {\n  var errors = [];\n  var candidate = data && (data.candidate || data);\n  var prefixMatch = candidate && rePrefix.exec(candidate);\n  var parts = prefixMatch && candidate.slice(prefixMatch[0].length).split(/\\s/);\n\n  if (!candidate) {\n    return [new Error('empty candidate')];\n  } // check that the prefix matches expected\n\n\n  if (!prefixMatch) {\n    return [new Error('candidate did not match expected sdp line format')];\n  } // perform the part validation\n\n\n  errors = errors.concat(parts.map(validateParts)).filter(Boolean);\n  return errors;\n};\n\nfunction validateParts(part, idx) {\n  var validator = partValidation[idx];\n\n  if (validator && !validator[0].test(part)) {\n    debug(validator[2] + ' part failed validation: ' + part);\n    return new Error(validator[1]);\n  }\n}","map":null,"metadata":{},"sourceType":"script"}