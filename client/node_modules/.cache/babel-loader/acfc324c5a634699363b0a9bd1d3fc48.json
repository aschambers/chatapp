{"ast":null,"code":"var _jsxFileName = \"/Users/metabou/Desktop/ChatterSanctum/chatapp/client/src/components/ChatroomFriend/ChatroomFriend.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport * as actions from '../../redux';\nimport { ROOT_URL } from '../../config/networkSettings';\nimport io from \"socket.io-client\";\nimport Moment from 'react-moment';\nimport 'moment-timezone';\nimport './ChatroomFriend.css';\n\nclass ChatroomFriend extends Component {\n  constructor(props) {\n    super(props);\n\n    this.sendMessage = event => {\n      if (event) {\n        event.preventDefault();\n        this.socket.emit('SEND_PRIVATE_MESSAGE', {\n          username: this.props.username,\n          message: this.state.message,\n          userId: this.props.userId,\n          friendId: this.props.friendId !== null ? this.props.friendId : this.props.userId,\n          room: this.state.room\n        });\n        this.setState({\n          message: \"\"\n        });\n      }\n    };\n\n    this.state = {\n      message: \"\",\n      messages: [],\n      socketId: \"\",\n      currentSocket: \"\",\n      userId: null,\n      friendId: null,\n      room: null,\n      previousRoom: null\n    };\n  }\n\n  async componentDidMount() {\n    this.socket = io(ROOT_URL);\n    this.socket.on('connect', () => {\n      this.setState({\n        socketId: this.socket.id,\n        userId: this.props.userId,\n        friendId: this.props.friendId,\n        room: \"\".concat(ROOT_URL, \"/\").concat(this.props.userId, \"/\").concat(this.props.friendId),\n        previousRoom: \"\".concat(ROOT_URL, \"/\").concat(this.props.userId, \"/\").concat(this.props.friendId)\n      });\n    });\n    console.log(this.props);\n    this.socket.emit('GET_PRIVATE_MESSAGES', {\n      userId: this.props.userId,\n      friendId: this.props.friendId !== null ? this.props.friendId : this.props.userId,\n      room: \"\".concat(ROOT_URL, \"/\").concat(this.props.userId, \"/\").concat(this.props.friendId),\n      previousRoom: \"\".concat(ROOT_URL, \"/\").concat(this.props.userId, \"/\").concat(this.props.friendId)\n    });\n    this.socket.on('RECEIVE_PRIVATE_MESSAGES', data => {\n      // scroll to latest message after rendering messages in firefox\n      if (navigator.userAgent.search(\"Firefox\") > -1) {\n        this.setState({\n          messages: data.reverse()\n        }, () => {\n          if (data && data.length > 0) {\n            const element = \"message\" + (this.state.messages.length - 1);\n\n            if (document.getElementById(element)) {\n              document.getElementById(element).scrollIntoView();\n            }\n          }\n        });\n      } else if (navigator.userAgent.search(\"Firefox\") < 0) {\n        this.setState({\n          messages: data\n        });\n      }\n    });\n  }\n\n  async componentWillReceiveProps(nextProps) {\n    if (nextProps.friendId !== this.state.friendId) {\n      this.setState({\n        previousRoom: this.state.room,\n        room: \"\".concat(ROOT_URL, \"/\").concat(nextProps.friendId),\n        userId: nextProps.userId,\n        friendId: nextProps.friendId\n      });\n      this.socket.emit('GET_PRIVATE_MESSAGES', {\n        userId: nextProps.userId,\n        friendId: nextProps.friendId,\n        previousRoom: this.state.previousRoom,\n        room: \"\".concat(ROOT_URL, \"/\").concat(nextProps.userId, \"/\").concat(nextProps.friendId)\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    this.socket.emit('LEAVE_CHATROOMS', {\n      room: this.state.room\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"chatroom\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"privatechatarea\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      id: \"privatechatareamessages\",\n      className: \"privatechatarea-messages\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 100\n      },\n      __self: this\n    }, this.state.messages && this.state.messages.length > 0 ? this.state.messages.map((item, index) => {\n      return React.createElement(\"div\", {\n        id: \"message\" + index,\n        key: index,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        className: \"privatechatarea-messages-user\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104\n        },\n        __self: this\n      }, item.username), \" \", React.createElement(Moment, {\n        format: \"MM/DD/YYYY\",\n        className: \"privatechatarea-messages-time\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104\n        },\n        __self: this\n      }, item.createdAt))), React.createElement(\"p\", {\n        className: \"privatechatarea-messages-message\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 105\n        },\n        __self: this\n      }, item.message));\n    }) : null), React.createElement(\"div\", {\n      className: \"privatechatarea-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      placeholder: \"Send a message!\",\n      type: \"text\",\n      onChange: event => {\n        this.setState({\n          message: event.target.value\n        });\n      },\n      value: this.state.message,\n      onKeyDown: event => {\n        event.keyCode === 13 && event.shiftKey === false ? this.sendMessage(event) : this.sendMessage(null);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }))));\n  }\n\n}\n\nfunction mapStateToProps({\n  usersReducer\n}) {\n  return {\n    error: usersReducer.error,\n    isLoading: usersReducer.isLoading,\n    success: usersReducer.success,\n    user: usersReducer.user,\n    users: usersReducer.users\n  };\n}\n\nexport default connect(mapStateToProps, actions)(ChatroomFriend);","map":{"version":3,"sources":["/Users/metabou/Desktop/ChatterSanctum/chatapp/client/src/components/ChatroomFriend/ChatroomFriend.js"],"names":["React","Component","connect","actions","ROOT_URL","io","Moment","ChatroomFriend","constructor","props","sendMessage","event","preventDefault","socket","emit","username","message","state","userId","friendId","room","setState","messages","socketId","currentSocket","previousRoom","componentDidMount","on","id","console","log","data","navigator","userAgent","search","reverse","length","element","document","getElementById","scrollIntoView","componentWillReceiveProps","nextProps","componentWillUnmount","render","map","item","index","createdAt","target","value","keyCode","shiftKey","mapStateToProps","usersReducer","error","isLoading","success","user","users"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport * as actions from '../../redux';\nimport { ROOT_URL } from '../../config/networkSettings';\nimport io from \"socket.io-client\";\nimport Moment from 'react-moment';\nimport 'moment-timezone';\nimport './ChatroomFriend.css';\n\nclass ChatroomFriend extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      message: \"\",\n      messages: [],\n      socketId: \"\",\n      currentSocket: \"\",\n      userId: null,\n      friendId: null,\n      room: null,\n      previousRoom: null\n    }\n  }\n\n  async componentDidMount() {\n    this.socket = io(ROOT_URL);\n\n    this.socket.on('connect', () => {\n      this.setState({ socketId: this.socket.id, userId: this.props.userId, friendId: this.props.friendId, room: `${ROOT_URL}/${this.props.userId}/${this.props.friendId}`, previousRoom: `${ROOT_URL}/${this.props.userId}/${this.props.friendId}` });\n    });\n\n    console.log(this.props);\n\n    this.socket.emit('GET_PRIVATE_MESSAGES', {\n      userId: this.props.userId,\n      friendId: this.props.friendId !== null ? this.props.friendId : this.props.userId,\n      room: `${ROOT_URL}/${this.props.userId}/${this.props.friendId}`,\n      previousRoom: `${ROOT_URL}/${this.props.userId}/${this.props.friendId}`\n    });\n\n    this.socket.on('RECEIVE_PRIVATE_MESSAGES', (data) => {\n      // scroll to latest message after rendering messages in firefox\n      if (navigator.userAgent.search(\"Firefox\") > -1) {\n        this.setState({ messages: data.reverse() }, () => {\n          if (data && data.length > 0) {\n            const element = \"message\" + (this.state.messages.length - 1);\n            if (document.getElementById(element)) {\n              document.getElementById(element).scrollIntoView();\n            }\n          }\n        });\n      } else if (navigator.userAgent.search(\"Firefox\") < 0) {\n        this.setState({ messages: data });\n      }\n    });\n  }\n\n  async componentWillReceiveProps(nextProps) {\n    if (nextProps.friendId !== this.state.friendId) {\n      this.setState({\n        previousRoom: this.state.room,\n        room: `${ROOT_URL}/${nextProps.friendId}`,\n        userId: nextProps.userId,\n        friendId: nextProps.friendId\n      });\n      this.socket.emit('GET_PRIVATE_MESSAGES', {\n        userId: nextProps.userId,\n        friendId: nextProps.friendId,\n        previousRoom: this.state.previousRoom,\n        room: `${ROOT_URL}/${nextProps.userId}/${nextProps.friendId}`\n      });\n    }\n  }\n\n  componentWillUnmount() {\n    this.socket.emit('LEAVE_CHATROOMS', {\n      room: this.state.room\n    });\n  }\n\n  sendMessage = (event) => {\n    if (event) {\n      event.preventDefault();\n      this.socket.emit('SEND_PRIVATE_MESSAGE', {\n        username: this.props.username,\n        message: this.state.message,\n        userId: this.props.userId,\n        friendId: this.props.friendId !== null ? this.props.friendId : this.props.userId,\n        room: this.state.room\n      });\n      this.setState({ message: \"\" });\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"chatroom\">\n        <div className=\"privatechatarea\">\n          <div id=\"privatechatareamessages\" className=\"privatechatarea-messages\">\n            {this.state.messages && this.state.messages.length > 0 ? this.state.messages.map((item, index) => {\n              return (\n                <div id={\"message\" + index} key={index}>\n                  <p><span className=\"privatechatarea-messages-user\">{item.username}</span> <Moment format=\"MM/DD/YYYY\" className=\"privatechatarea-messages-time\"><span>{item.createdAt}</span></Moment></p>\n                  <p className=\"privatechatarea-messages-message\">{item.message}</p>\n                </div>\n              )\n            }) : null}\n          </div>\n          <div className=\"privatechatarea-container\">\n            <input placeholder=\"Send a message!\" type=\"text\" onChange={(event) => { this.setState({ message: event.target.value }); }} value={this.state.message} onKeyDown={(event) => { event.keyCode === 13 && event.shiftKey === false ? this.sendMessage(event) : this.sendMessage(null) }}></input>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nfunction mapStateToProps({ usersReducer }) {\n  return {\n    error: usersReducer.error,\n    isLoading: usersReducer.isLoading,\n    success: usersReducer.success,\n    user: usersReducer.user,\n    users: usersReducer.users\n  };\n}\n\nexport default connect(mapStateToProps, actions)(ChatroomFriend);"]},"metadata":{},"sourceType":"module"}