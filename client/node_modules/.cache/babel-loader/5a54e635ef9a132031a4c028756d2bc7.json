{"ast":null,"code":"import _objectSpread from \"/Users/metabou/Desktop/chatapp/client/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport axios from 'axios';\nimport { ROOT_URL } from '../../../config/networkSettings';\nimport { CREATING_SERVER, CREATE_SERVER_FAIL, CREATE_SERVER_SUCCESS, FINDING_SERVER, FIND_SERVER_FAIL, FIND_SERVER_SUCCESS, DELETING_SERVER, DELETE_SERVER_FAIL, DELETE_SERVER_SUCCESS, RESET_SERVER_VALUES } from '../../types'; // Initial States\n\nexport const initialState = {\n  isLoading: false,\n  error: false,\n  success: false,\n  user: null\n}; // Reducers\n\nexport default ((state = initialState, action) => {\n  switch (action.type) {\n    case CREATING_SERVER:\n      return _objectSpread({}, state, {\n        isLoading: true,\n        error: false,\n        success: false\n      });\n\n    case CREATE_SERVER_SUCCESS:\n      return _objectSpread({}, state, {\n        isLoading: false,\n        error: false,\n        success: true,\n        serversList: action.payload\n      });\n\n    case CREATE_SERVER_FAIL:\n      return _objectSpread({}, state, {\n        isLoading: false,\n        error: true,\n        success: false\n      });\n\n    case FINDING_SERVER:\n      return _objectSpread({}, state, {\n        isLoading: true,\n        error: false,\n        success: false\n      });\n\n    case FIND_SERVER_SUCCESS:\n      return _objectSpread({}, state, {\n        isLoading: false,\n        error: false,\n        success: true,\n        serverUserList: action.payload\n      });\n\n    case FIND_SERVER_FAIL:\n      return _objectSpread({}, state, {\n        isLoading: false,\n        error: true,\n        success: false\n      });\n\n    case DELETING_SERVER:\n      return _objectSpread({}, state, {\n        isLoading: true,\n        error: false,\n        success: false\n      });\n\n    case DELETE_SERVER_SUCCESS:\n      return _objectSpread({}, state, {\n        isLoading: false,\n        error: false,\n        success: true,\n        user: action.payload\n      });\n\n    case DELETE_SERVER_FAIL:\n      return _objectSpread({}, state, {\n        isLoading: false,\n        error: true,\n        success: false\n      });\n\n    case RESET_SERVER_VALUES:\n      return _objectSpread({}, state, {\n        isLoading: false,\n        error: false,\n        success: false\n      });\n\n    default:\n      return state;\n  }\n}); // Actions\n\nexport const serverCreate = params => async dispatch => {\n  dispatch({\n    type: CREATING_SERVER\n  });\n\n  try {\n    const response = await axios({\n      method: 'post',\n      url: \"\".concat(ROOT_URL, \"/api/v1/serverCreate\"),\n      data: params,\n      config: {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      }\n    });\n\n    if (response.data) {\n      dispatch({\n        type: CREATE_SERVER_SUCCESS,\n        payload: response.data\n      });\n    } else {\n      dispatch({\n        type: CREATE_SERVER_FAIL\n      });\n    }\n  } catch (err) {\n    dispatch({\n      type: CREATE_SERVER_FAIL\n    });\n  }\n};\nexport const serverFind = params => async dispatch => {\n  dispatch({\n    type: FINDING_SERVER\n  });\n\n  try {\n    const response = await axios.post(\"\".concat(ROOT_URL, \"/api/v1/serverFind\"), params);\n\n    if (response.data) {\n      dispatch({\n        type: FIND_SERVER_SUCCESS,\n        payload: response.data\n      });\n    } else {\n      dispatch({\n        type: FIND_SERVER_FAIL\n      });\n    }\n  } catch (err) {\n    dispatch({\n      type: FIND_SERVER_FAIL\n    });\n  }\n};\nexport const findUserList = params => async dispatch => {\n  dispatch({\n    type: FINDING_SERVER\n  });\n\n  try {\n    const response = await axios.post(\"\".concat(ROOT_URL, \"/api/v1/findUserList\"), params);\n\n    if (response.data) {\n      dispatch({\n        type: FIND_SERVER_SUCCESS,\n        payload: response.data\n      });\n    } else {\n      dispatch({\n        type: FIND_SERVER_FAIL\n      });\n    }\n  } catch (err) {\n    dispatch({\n      type: FIND_SERVER_FAIL\n    });\n  }\n};\nexport const serverDelete = params => async dispatch => {\n  dispatch({\n    type: DELETING_SERVER\n  });\n\n  try {\n    const response = await axios.post(\"\".concat(ROOT_URL, \"/api/v1/serverDelete\"), params);\n\n    if (response.data) {\n      dispatch({\n        type: DELETE_SERVER_SUCCESS\n      });\n    } else {\n      dispatch({\n        type: DELETE_SERVER_FAIL\n      });\n    }\n  } catch (err) {\n    dispatch({\n      type: DELETE_SERVER_FAIL\n    });\n  }\n};\nexport function resetServerValues() {\n  return function (dispatch) {\n    dispatch({\n      type: RESET_SERVER_VALUES\n    });\n  };\n}","map":{"version":3,"sources":["/Users/metabou/Desktop/chatapp/client/src/redux/modules/servers/servers.js"],"names":["axios","ROOT_URL","CREATING_SERVER","CREATE_SERVER_FAIL","CREATE_SERVER_SUCCESS","FINDING_SERVER","FIND_SERVER_FAIL","FIND_SERVER_SUCCESS","DELETING_SERVER","DELETE_SERVER_FAIL","DELETE_SERVER_SUCCESS","RESET_SERVER_VALUES","initialState","isLoading","error","success","user","state","action","type","serversList","payload","serverUserList","serverCreate","params","dispatch","response","method","url","data","config","headers","err","serverFind","post","findUserList","serverDelete","resetServerValues"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport { ROOT_URL } from '../../../config/networkSettings';\n\nimport {\n  CREATING_SERVER,\n  CREATE_SERVER_FAIL,\n  CREATE_SERVER_SUCCESS,\n  FINDING_SERVER,\n  FIND_SERVER_FAIL,\n  FIND_SERVER_SUCCESS,\n  DELETING_SERVER,\n  DELETE_SERVER_FAIL,\n  DELETE_SERVER_SUCCESS,\n  RESET_SERVER_VALUES\n} from '../../types';\n\n// Initial States\nexport const initialState = {\n  isLoading: false,\n  error: false,\n  success: false,\n  user: null\n};\n\n// Reducers\nexport default (state = initialState, action) => {\n  switch (action.type) {\n    case CREATING_SERVER:\n      return {\n        ...state, isLoading: true, error: false, success: false\n      };\n    case CREATE_SERVER_SUCCESS:\n      return {\n        ...state, isLoading: false, error: false, success: true, serversList: action.payload\n      };\n    case CREATE_SERVER_FAIL:\n      return {\n        ...state, isLoading: false, error: true, success: false\n      };\n    case FINDING_SERVER:\n      return {\n        ...state, isLoading: true, error: false, success: false\n      };\n    case FIND_SERVER_SUCCESS:\n      return {\n        ...state, isLoading: false, error: false, success: true, serverUserList: action.payload\n      };\n    case FIND_SERVER_FAIL:\n      return {\n        ...state, isLoading: false, error: true, success: false\n      };\n    case DELETING_SERVER:\n      return {\n        ...state, isLoading: true, error: false, success: false\n      };\n    case DELETE_SERVER_SUCCESS:\n      return {\n        ...state, isLoading: false, error: false, success: true, user: action.payload\n      };\n    case DELETE_SERVER_FAIL:\n      return {\n        ...state, isLoading: false, error: true, success: false\n      };\n    case RESET_SERVER_VALUES:\n      return {\n        ...state, isLoading: false, error: false, success: false\n      };\n    default:\n      return state;\n  }\n};\n\n// Actions\nexport const serverCreate = params => async dispatch => {\n  dispatch({ type: CREATING_SERVER });\n  try {\n    const response = await axios({\n      method: 'post',\n      url: `${ROOT_URL}/api/v1/serverCreate`,\n      data: params,\n      config: { headers: {'Content-Type': 'multipart/form-data'}}\n    });\n    if(response.data) {\n      dispatch({ type: CREATE_SERVER_SUCCESS, payload: response.data });\n    } else {\n      dispatch({ type: CREATE_SERVER_FAIL });\n    }\n  } catch(err) {\n    dispatch({ type: CREATE_SERVER_FAIL });\n  }\n};\n\nexport const serverFind = params => async dispatch => {\n  dispatch({ type: FINDING_SERVER });\n  try {\n    const response = await axios.post(`${ROOT_URL}/api/v1/serverFind`, params);\n    if(response.data) {\n      dispatch({ type: FIND_SERVER_SUCCESS, payload: response.data });\n    } else {\n      dispatch({ type: FIND_SERVER_FAIL });\n    }\n  } catch(err) {\n    dispatch({ type: FIND_SERVER_FAIL });\n  }\n};\n\nexport const findUserList = params => async dispatch => {\n  dispatch({ type: FINDING_SERVER });\n  try {\n    const response = await axios.post(`${ROOT_URL}/api/v1/findUserList`, params);\n    if(response.data) {\n      dispatch({ type: FIND_SERVER_SUCCESS, payload: response.data });\n    } else {\n      dispatch({ type: FIND_SERVER_FAIL });\n    }\n  } catch(err) {\n    dispatch({ type: FIND_SERVER_FAIL });\n  }\n};\n\nexport const serverDelete = params => async dispatch => {\n  dispatch({ type: DELETING_SERVER });\n  try {\n    const response = await axios.post(`${ROOT_URL}/api/v1/serverDelete`, params);\n    if (response.data) {\n      dispatch({ type: DELETE_SERVER_SUCCESS });\n    } else {\n      dispatch({ type: DELETE_SERVER_FAIL });\n    }\n  } catch (err) {\n    dispatch({ type: DELETE_SERVER_FAIL });\n  }\n};\n\nexport function resetServerValues() {\n  return function(dispatch) {\n    dispatch({ type: RESET_SERVER_VALUES });\n  };\n}\n"]},"metadata":{},"sourceType":"module"}