{"ast":null,"code":"var fs = require('fs');\n\nvar path = require('path');\n\nvar os = require('os');\n\nvar abi = process.versions.modules; // TODO: support old node where this is undef\n\nvar runtime = isElectron() ? 'electron' : 'node';\nvar arch = os.arch();\nvar platform = os.platform();\nmodule.exports = load;\n\nfunction load(dir) {\n  return require(load.path(dir));\n}\n\nload.path = function (dir) {\n  dir = path.resolve(dir || '.');\n\n  try {\n    var name = require(path.join(dir, 'package.json')).name.toUpperCase().replace(/-/g, '_');\n\n    if (process.env[name + '_PREBUILD']) dir = process.env[name + '_PREBUILD'];\n  } catch (err) {}\n\n  var release = getFirst(path.join(dir, 'build/Release'), matchBuild);\n  if (release) return release;\n  var debug = getFirst(path.join(dir, 'build/Debug'), matchBuild);\n  if (debug) return debug;\n  var prebuild = getFirst(path.join(dir, 'prebuilds/' + platform + '-' + arch), matchPrebuild);\n  if (prebuild) return prebuild;\n  var napi = getFirst(path.join(dir, 'prebuilds/' + platform + '-' + arch), matchNapi);\n  if (napi) return napi;\n  throw new Error('No native build was found for runtime=' + runtime + ' abi=' + abi + ' platform=' + platform + ' arch=' + arch);\n};\n\nfunction getFirst(dir, filter) {\n  try {\n    var files = fs.readdirSync(dir).filter(filter);\n    return files[0] && path.join(dir, files[0]);\n  } catch (err) {\n    return null;\n  }\n}\n\nfunction matchNapi(name) {\n  return name === 'node-napi.node';\n}\n\nfunction matchPrebuild(name) {\n  var parts = name.split('-');\n  return parts[0] === runtime && parts[1] === abi + '.node';\n}\n\nfunction matchBuild(name) {\n  return /\\.node$/.test(name);\n}\n\nfunction isElectron() {\n  if (process.versions && process.versions.electron) return true;\n  if (process.env.ELECTRON_RUN_AS_NODE) return true;\n  return typeof window !== 'undefined' && window.process && window.process.type === 'renderer';\n}","map":null,"metadata":{},"sourceType":"script"}