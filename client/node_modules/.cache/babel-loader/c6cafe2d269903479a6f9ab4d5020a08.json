{"ast":null,"code":"import _slicedToArray from \"/Users/metabou/Desktop/chatapp/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/metabou/Desktop/chatapp/client/src/components/InviteModal/InviteModal.js\";\nimport React, { useEffect, useState, useRef } from 'react';\nimport settings from '../../assets/images/settings.png';\nimport './InviteModal.css';\n\nconst InviteModal = props => {\n  const _useState = useState(false),\n        _useState2 = _slicedToArray(_useState, 2),\n        inviteExpiresModal = _useState2[0],\n        setInviteExpiresModal = _useState2[1];\n\n  const _useState3 = useState(true),\n        _useState4 = _slicedToArray(_useState3, 2),\n        instantFormat = _useState4[0],\n        setInstantFormat = _useState4[1];\n\n  const ref = useRef();\n  useOnClickOutside(ref, () => props.setShowInviteModal(false));\n  return React.createElement(\"div\", {\n    ref: ref,\n    className: \"invitemodal-container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12\n    },\n    __self: this\n  }, inviteExpiresModal ? React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 15\n    },\n    __self: this\n  }, \"Change when invite expires.\")) : React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 17\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    className: \"invitemodal-container-title\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 18\n    },\n    __self: this\n  }, instantFormat ? \"Create Invite\" : \"Send Invites\"), React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20\n    },\n    __self: this\n  }, \"Change invite type\"), React.createElement(\"label\", {\n    className: \"switch\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21\n    },\n    __self: this\n  }, React.createElement(\"input\", {\n    type: \"checkbox\",\n    onChange: () => {\n      setInstantFormat(!instantFormat);\n    },\n    checked: instantFormat,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  }), React.createElement(\"span\", {\n    className: \"slider round\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  }))), React.createElement(\"button\", {\n    className: \"invitemodal-container-cancel\",\n    onClick: () => {\n      props.setInviteModal(false);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }, \"Cancel\"), React.createElement(\"button\", {\n    className: \"invitemodal-container-create\",\n    onClick: () => {\n      props.createNewInvite();\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 27\n    },\n    __self: this\n  }, \"Create\"), React.createElement(\"img\", {\n    className: \"settings-image\",\n    src: settings,\n    alt: \"settings-icon\",\n    onClick: () => {\n      setInviteExpiresModal(true);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28\n    },\n    __self: this\n  })));\n};\n\nconst useOnClickOutside = (ref, handler) => {\n  useEffect(() => {\n    const listener = event => {\n      // Do nothing if clicking ref's element or descendent elements\n      if (!ref.current || ref.current.contains(event.target)) {\n        return;\n      }\n\n      handler(event);\n    };\n\n    document.addEventListener('mousedown', listener);\n    document.addEventListener('touchstart', listener);\n    return () => {\n      document.removeEventListener('mousedown', listener);\n      document.removeEventListener('touchstart', listener);\n    };\n  }, [ref, handler]);\n};\n\nexport default InviteModal;","map":{"version":3,"sources":["/Users/metabou/Desktop/chatapp/client/src/components/InviteModal/InviteModal.js"],"names":["React","useEffect","useState","useRef","settings","InviteModal","props","inviteExpiresModal","setInviteExpiresModal","instantFormat","setInstantFormat","ref","useOnClickOutside","setShowInviteModal","setInviteModal","createNewInvite","handler","listener","event","current","contains","target","document","addEventListener","removeEventListener"],"mappings":"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","sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\nimport settings from '../../assets/images/settings.png';\nimport './InviteModal.css';\n\nconst InviteModal = (props) => {\n  const [inviteExpiresModal, setInviteExpiresModal] = useState(false);\n  const [instantFormat, setInstantFormat] = useState(true);\n  const ref = useRef();\n  useOnClickOutside(ref, () => props.setShowInviteModal(false));\n\n  return (\n    <div ref={ref} className=\"invitemodal-container\">\n      {inviteExpiresModal ?\n        <div>\n          <p>Change when invite expires.</p>\n        </div> :\n        <div>\n          <p className=\"invitemodal-container-title\">{instantFormat ? \"Create Invite\" : \"Send Invites\"}</p>\n          <div>\n            <span>Change invite type</span>\n            <label className=\"switch\">\n              <input type=\"checkbox\" onChange={() => { setInstantFormat(!instantFormat); }} checked={instantFormat} />\n              <span className=\"slider round\"></span>\n            </label>\n          </div>\n          <button className=\"invitemodal-container-cancel\" onClick={() => { props.setInviteModal(false); }}>Cancel</button>\n          <button className=\"invitemodal-container-create\" onClick={() => { props.createNewInvite(); }}>Create</button>\n          <img className=\"settings-image\" src={settings} alt=\"settings-icon\" onClick={() => { setInviteExpiresModal(true); }} />\n        </div>\n      }\n    </div>\n  );\n}\n\nconst useOnClickOutside = (ref, handler) => {\n  useEffect(() => {\n    const listener = event => {\n      // Do nothing if clicking ref's element or descendent elements\n      if (!ref.current || ref.current.contains(event.target)) {\n        return;\n      }\n\n      handler(event);\n    };\n\n    document.addEventListener('mousedown', listener);\n    document.addEventListener('touchstart', listener);\n\n    return () => {\n      document.removeEventListener('mousedown', listener);\n      document.removeEventListener('touchstart', listener);\n    };\n  }, [ref, handler]);\n}\n\nexport default InviteModal;"]},"metadata":{},"sourceType":"module"}