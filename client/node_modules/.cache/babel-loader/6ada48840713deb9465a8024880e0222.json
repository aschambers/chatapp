{"ast":null,"code":"import _slicedToArray from \"/Users/metabou/Desktop/chatapp/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { useState, useEffect } from \"react\";\n\nconst useDrag = ({\n  id,\n  effect,\n  ref,\n  onDragStart,\n  onDragOver,\n  onDragEnd\n}) => {\n  const _useState = useState(\"draggable\"),\n        _useState2 = _slicedToArray(_useState, 2),\n        dragState = _useState2[0],\n        updateDragState = _useState2[1];\n\n  useEffect(() => {\n    const elem = ref.current;\n\n    const dragStartCb = ev => {\n      updateDragState(\"dragStart\");\n      ev.dataTransfer.dropEffect = effect;\n      ev.dataTransfer.setData(\"source\", id);\n      onDragStart && onDragStart();\n    };\n\n    const dragOverCb = ev => {\n      updateDragState(\"dragging\");\n      onDragOver && onDragOver();\n    };\n\n    const dragEndCb = ev => {\n      updateDragState(\"draggable\");\n      onDragEnd && onDragEnd();\n    };\n\n    if (elem) {\n      elem.setAttribute(\"draggable\", true);\n      elem.addEventListener(\"dragstart\", dragStartCb);\n      elem.addEventListener(\"dragover\", dragOverCb);\n      elem.addEventListener(\"dragend\", dragEndCb);\n      return () => {\n        elem.removeEventListener(\"dragstart\", dragStartCb);\n        elem.removeEventListener(\"dragover\", dragOverCb);\n        elem.removeEventListener(\"dragend\", dragEndCb);\n      };\n    }\n  }, [ref, effect, id, onDragEnd, onDragOver, onDragStart]);\n  return {\n    dragState: dragState\n  };\n};\n\nexport default useDrag;","map":{"version":3,"sources":["/Users/metabou/Desktop/chatapp/client/src/hooks/useDrag.js"],"names":["useState","useEffect","useDrag","id","effect","ref","onDragStart","onDragOver","onDragEnd","dragState","updateDragState","elem","current","dragStartCb","ev","dataTransfer","dropEffect","setData","dragOverCb","dragEndCb","setAttribute","addEventListener","removeEventListener"],"mappings":";AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;;AAEA,MAAMC,OAAO,GAAG,CAAC;AAAEC,EAAAA,EAAF;AAAMC,EAAAA,MAAN;AAAcC,EAAAA,GAAd;AAAmBC,EAAAA,WAAnB;AAAgCC,EAAAA,UAAhC;AAA4CC,EAAAA;AAA5C,CAAD,KAA6D;AAAA,oBACtCR,QAAQ,CAAC,WAAD,CAD8B;AAAA;AAAA,QACpES,SADoE;AAAA,QACzDC,eADyD;;AAE3ET,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMU,IAAI,GAAGN,GAAG,CAACO,OAAjB;;AACA,UAAMC,WAAW,GAAGC,EAAE,IAAI;AACxBJ,MAAAA,eAAe,CAAC,WAAD,CAAf;AACAI,MAAAA,EAAE,CAACC,YAAH,CAAgBC,UAAhB,GAA6BZ,MAA7B;AACAU,MAAAA,EAAE,CAACC,YAAH,CAAgBE,OAAhB,CAAwB,QAAxB,EAAkCd,EAAlC;AACAG,MAAAA,WAAW,IAAIA,WAAW,EAA1B;AACD,KALD;;AAMA,UAAMY,UAAU,GAAGJ,EAAE,IAAI;AACvBJ,MAAAA,eAAe,CAAC,UAAD,CAAf;AACAH,MAAAA,UAAU,IAAIA,UAAU,EAAxB;AACD,KAHD;;AAIA,UAAMY,SAAS,GAAGL,EAAE,IAAI;AACtBJ,MAAAA,eAAe,CAAC,WAAD,CAAf;AACAF,MAAAA,SAAS,IAAIA,SAAS,EAAtB;AACD,KAHD;;AAIA,QAAIG,IAAJ,EAAU;AACRA,MAAAA,IAAI,CAACS,YAAL,CAAkB,WAAlB,EAA+B,IAA/B;AACAT,MAAAA,IAAI,CAACU,gBAAL,CAAsB,WAAtB,EAAmCR,WAAnC;AACAF,MAAAA,IAAI,CAACU,gBAAL,CAAsB,UAAtB,EAAkCH,UAAlC;AACAP,MAAAA,IAAI,CAACU,gBAAL,CAAsB,SAAtB,EAAiCF,SAAjC;AACA,aAAO,MAAM;AACXR,QAAAA,IAAI,CAACW,mBAAL,CAAyB,WAAzB,EAAsCT,WAAtC;AACAF,QAAAA,IAAI,CAACW,mBAAL,CAAyB,UAAzB,EAAqCJ,UAArC;AACAP,QAAAA,IAAI,CAACW,mBAAL,CAAyB,SAAzB,EAAoCH,SAApC;AACD,OAJD;AAKD;AACF,GA3BQ,EA2BN,CAACd,GAAD,EAAMD,MAAN,EAAcD,EAAd,EAAkBK,SAAlB,EAA6BD,UAA7B,EAAyCD,WAAzC,CA3BM,CAAT;AA4BA,SAAO;AACLG,IAAAA,SAAS,EAAEA;AADN,GAAP;AAGD,CAjCD;;AAmCA,eAAeP,OAAf","sourcesContent":["import { useState, useEffect } from \"react\";\n\nconst useDrag = ({ id, effect, ref, onDragStart, onDragOver, onDragEnd }) => {\n  const [dragState, updateDragState] = useState(\"draggable\");\n  useEffect(() => {\n    const elem = ref.current;\n    const dragStartCb = ev => {\n      updateDragState(\"dragStart\");\n      ev.dataTransfer.dropEffect = effect;\n      ev.dataTransfer.setData(\"source\", id);\n      onDragStart && onDragStart();\n    };\n    const dragOverCb = ev => {\n      updateDragState(\"dragging\");\n      onDragOver && onDragOver();\n    };\n    const dragEndCb = ev => {\n      updateDragState(\"draggable\");\n      onDragEnd && onDragEnd();\n    };\n    if (elem) {\n      elem.setAttribute(\"draggable\", true);\n      elem.addEventListener(\"dragstart\", dragStartCb);\n      elem.addEventListener(\"dragover\", dragOverCb);\n      elem.addEventListener(\"dragend\", dragEndCb);\n      return () => {\n        elem.removeEventListener(\"dragstart\", dragStartCb);\n        elem.removeEventListener(\"dragover\", dragOverCb);\n        elem.removeEventListener(\"dragend\", dragEndCb);\n      };\n    }\n  }, [ref, effect, id, onDragEnd, onDragOver, onDragStart]);\n  return {\n    dragState: dragState\n  };\n};\n\nexport default useDrag;\n"]},"metadata":{},"sourceType":"module"}