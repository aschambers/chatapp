{"ast":null,"code":"var WebSocket = typeof window !== 'undefined' && window.WebSocket || require('ws');\n\nvar wsurl = require('wsurl');\n\nvar ps = require('pull-ws');\n\nvar defaults = require('cog/defaults');\n\nvar reTrailingSlash = /\\/$/;\nvar DEFAULT_FAILCODES = [];\n/**\n  # messenger-ws\n\n  This is a simple messaging implementation for sending and receiving data\n  via websockets.\n\n  Follows the [messenger-archetype](https://github.com/DamonOehlman/messenger-archetype)\n\n  ## Example Usage\n\n  <<< examples/simple.js\n\n**/\n\nmodule.exports = function (url, opts) {\n  var timeout = (opts || {}).timeout || 1000;\n  var failcodes = (opts || {}).failcodes || DEFAULT_FAILCODES;\n  var endpoints = ((opts || {}).endpoints || ['/']).map(function (endpoint) {\n    return url.replace(reTrailingSlash, '') + endpoint;\n  });\n\n  function connect(callback) {\n    var queue = [].concat(endpoints);\n    var isConnected = false;\n    var socket;\n    var failTimer;\n    var successTimer;\n    var removeListener;\n    var source;\n\n    function attemptNext() {\n      // if we have already connected, do nothing\n      // NOTE: workaround for websockets/ws#489\n      if (isConnected) {\n        return;\n      } // if we have no more valid endpoints, then erorr out\n\n\n      if (queue.length === 0) {\n        return callback(new Error('Unable to connect to url: ' + url));\n      }\n\n      socket = new WebSocket(wsurl(queue.shift()));\n      socket.addEventListener('message', connect);\n      socket.addEventListener('error', handleError);\n      socket.addEventListener('close', handleClose);\n      socket.addEventListener('open', handleOpen);\n      removeListener = socket.removeEventListener || socket.removeListener;\n      failTimer = setTimeout(attemptNext, timeout);\n    }\n\n    function connect() {\n      // if we are already connected, abort\n      // NOTE: workaround for websockets/ws#489\n      if (isConnected) {\n        return;\n      } // clear any monitors\n\n\n      clearTimeout(failTimer);\n      clearTimeout(successTimer); // remove the close and error listeners as messenger-ws has done\n      // what it set out to do and that is create a connection\n      // NOTE: issue websockets/ws#489 causes means this fails in ws\n\n      removeListener.call(socket, 'open', handleOpen);\n      removeListener.call(socket, 'close', handleClose);\n      removeListener.call(socket, 'error', handleError);\n      removeListener.call(socket, 'message', connect); // trigger the callback\n\n      isConnected = true;\n      callback(null, source, ps.sink(socket, opts));\n    }\n\n    function handleClose(evt) {\n      var clean = evt.wasClean && (evt.code === undefined || failcodes.indexOf(evt.code) < 0); // if this was not a clean close, then handle error\n\n      if (!clean) {\n        return handleError();\n      }\n\n      clearTimeout(successTimer);\n      clearTimeout(failTimer);\n    }\n\n    function handleError() {\n      clearTimeout(successTimer);\n      clearTimeout(failTimer);\n      attemptNext();\n    }\n\n    function handleOpen() {\n      // create the source immediately to buffer any data\n      source = ps.source(socket, opts); // monitor data flowing from the socket\n\n      successTimer = setTimeout(connect, 100);\n    }\n\n    attemptNext();\n  }\n\n  return connect;\n};","map":null,"metadata":{},"sourceType":"script"}