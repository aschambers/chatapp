{"ast":null,"code":"import _slicedToArray from \"/Users/metabou/Desktop/ChatterSanctum/chatapp/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/metabou/Desktop/ChatterSanctum/chatapp/client/src/views/ResetPassword/ResetPassword.js\";\nimport React, { useState, useEffect } from 'react';\nimport queryString from 'query-string';\nimport Loading from '../../components/Loading/Loading';\nimport ToastMessage from '../../components/ToastMessage/ToastMessage';\nimport { toast } from 'react-toastify';\nimport { Redirect } from 'react-router';\nimport { connect } from 'react-redux';\nimport * as actions from '../../redux';\nimport Navigation from '../../components/Navigation/Navigation';\nimport './ResetPassword.css';\n\nconst ResetPassword = props => {\n  const _useState = useState(\"\"),\n        _useState2 = _slicedToArray(_useState, 2),\n        password = _useState2[0],\n        setPassword = _useState2[1];\n\n  const _useState3 = useState(\"\"),\n        _useState4 = _slicedToArray(_useState3, 2),\n        confirmPassword = _useState4[0],\n        setConfirmPassword = _useState4[1];\n\n  const _useState5 = useState(false),\n        _useState6 = _slicedToArray(_useState5, 2),\n        isLoading = _useState6[0],\n        setIsLoading = _useState6[1];\n\n  const _useState7 = useState(false),\n        _useState8 = _slicedToArray(_useState7, 2),\n        isRedirect = _useState8[0],\n        setIsRedirect = _useState8[1];\n\n  const params = queryString.parse(props.location.search);\n  const email = params.email;\n  const token = params.token;\n  useEffect(() => {\n    if (props.resetPassSuccess) {\n      setIsLoading(false);\n      toast.dismiss();\n      toast.success(\"Password was reset successfully!\", {\n        position: toast.POSITION.BOTTOM_CENTER\n      });\n      setTimeout(() => {\n        setIsRedirect(true);\n      }, 3000);\n    }\n\n    if (props.resetPassError) {\n      setIsLoading(false);\n      toast.dismiss();\n      toast.error(\"Password was unable to be reset.\", {\n        position: toast.POSITION.BOTTOM_CENTER\n      });\n    }\n\n    props.resetUserValues();\n  }, [props, email, token]);\n\n  if (isRedirect) {\n    return React.createElement(Redirect, {\n      push: true,\n      to: \"/Login\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    });\n  }\n\n  if (isLoading) {\n    return React.createElement(Loading, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50\n      },\n      __self: this\n    });\n  }\n\n  const resetPassword = () => {\n    if (password !== confirmPassword) {\n      toast.dismiss();\n      toast.error(\"Password and Confirm Password do not match.\", {\n        position: toast.POSITION.BOTTOM_CENTER\n      });\n    }\n\n    setIsLoading(true);\n    props.resetPassword({\n      token: token,\n      password: password\n    });\n  };\n\n  if (!isLoading) {\n    return React.createElement(\"div\", {\n      className: \"resetpassword\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, React.createElement(Navigation, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }), React.createElement(ToastMessage, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: \"resetpassword__container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, \"Reset Password\"), React.createElement(\"div\", {\n      className: \"resetpassword__container__section\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }, \"Password\"), React.createElement(\"input\", {\n      type: \"password\",\n      onChange: event => setPassword(event.target.value),\n      value: password,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }), React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 78\n      },\n      __self: this\n    }, \"Confirm Password\"), React.createElement(\"input\", {\n      type: \"password\",\n      onChange: event => setConfirmPassword(event.target.value),\n      value: confirmPassword,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      onClick: resetPassword,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, \"Confirm\"))));\n  }\n};\n\nfunction mapStateToProps({\n  usersReducer\n}) {\n  return {\n    resetPassLoading: usersReducer.isLoading,\n    resetPassSuccess: usersReducer.resetPassSuccess,\n    resetPassError: usersReducer.resetPassError\n  };\n}\n\nexport default connect(mapStateToProps, actions)(ResetPassword);","map":{"version":3,"sources":["/Users/metabou/Desktop/ChatterSanctum/chatapp/client/src/views/ResetPassword/ResetPassword.js"],"names":["React","useState","useEffect","queryString","Loading","ToastMessage","toast","Redirect","connect","actions","Navigation","ResetPassword","props","password","setPassword","confirmPassword","setConfirmPassword","isLoading","setIsLoading","isRedirect","setIsRedirect","params","parse","location","search","email","token","resetPassSuccess","dismiss","success","position","POSITION","BOTTOM_CENTER","setTimeout","resetPassError","error","resetUserValues","resetPassword","event","target","value","mapStateToProps","usersReducer","resetPassLoading"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport queryString from 'query-string';\nimport Loading from '../../components/Loading/Loading';\nimport ToastMessage from '../../components/ToastMessage/ToastMessage';\nimport { toast } from 'react-toastify';\nimport { Redirect } from 'react-router';\nimport { connect } from 'react-redux';\nimport * as actions from '../../redux';\nimport Navigation from '../../components/Navigation/Navigation';\nimport './ResetPassword.css';\n\nconst ResetPassword = (props) => {\n  const [password, setPassword] = useState(\"\");\n  const [confirmPassword, setConfirmPassword] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n  const [isRedirect, setIsRedirect] = useState(false);\n  const params = queryString.parse(props.location.search);\n  const email = params.email;\n  const token = params.token;\n\n  useEffect(() => {\n    if (props.resetPassSuccess) {\n      setIsLoading(false);\n      toast.dismiss();\n      toast.success(\"Password was reset successfully!\", {\n        position: toast.POSITION.BOTTOM_CENTER\n      });\n      setTimeout(() => {\n        setIsRedirect(true);\n      }, 3000);\n    }\n\n    if (props.resetPassError) {\n      setIsLoading(false);\n      toast.dismiss();\n      toast.error(\"Password was unable to be reset.\", {\n        position: toast.POSITION.BOTTOM_CENTER\n      });\n    }\n\n    props.resetUserValues();\n  }, [props, email, token]);\n\n  if (isRedirect) {\n    return <Redirect push to=\"/Login\" />;\n  }\n\n  if (isLoading) {\n    return (\n      <Loading />\n    );\n  }\n\n  const resetPassword = () => {\n    if (password !== confirmPassword) {\n      toast.dismiss();\n      toast.error(\"Password and Confirm Password do not match.\", {\n        position: toast.POSITION.BOTTOM_CENTER\n      });\n    }\n    setIsLoading(true);\n    props.resetPassword({\n      token: token,\n      password: password\n    });\n  }\n\n  if (!isLoading) {\n    return (\n      <div className=\"resetpassword\">\n        <Navigation />\n        <ToastMessage />\n        <div className=\"resetpassword__container\">\n          <span>Reset Password</span>\n          <div className=\"resetpassword__container__section\">\n            <span>Password</span>\n            <input type=\"password\" onChange={event => setPassword(event.target.value)} value={password}/>\n            <span>Confirm Password</span>\n            <input type=\"password\" onChange={event => setConfirmPassword(event.target.value)} value={confirmPassword} />\n            <button onClick={resetPassword}>Confirm</button>\n          </div>\n        </div>\n      </div>\n    );\n  }\n};\n\nfunction mapStateToProps({ usersReducer }) {\n  return {\n    resetPassLoading: usersReducer.isLoading,\n    resetPassSuccess: usersReducer.resetPassSuccess,\n    resetPassError: usersReducer.resetPassError\n  };\n}\n\nexport default connect(mapStateToProps, actions)(ResetPassword);"]},"metadata":{},"sourceType":"module"}