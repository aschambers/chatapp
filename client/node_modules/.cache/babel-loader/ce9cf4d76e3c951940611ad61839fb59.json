{"ast":null,"code":"var mbus = require('mbus');\n\nmodule.exports = function (signaller, opts) {\n  opts = opts || {};\n  /**\n    Creates a new heartbeat\n   **/\n\n  function create(id) {\n    var heartbeat = mbus();\n    var delay = typeof opts.heartbeat === 'number' ? opts.heartbeat : 2500;\n    var ignoreDisconnection = (opts || {}).ignoreDisconnection || false; //if you want to rely on your switchboard to tell if the call is still going\n\n    var timer = null;\n    var connected = false;\n    var lastping = 0;\n    /**\n      Pings the target peer\n     **/\n\n    function ping() {\n      signaller.to(id).send('/ping');\n    }\n    /**\n      Checks the state of the signaller connection\n     **/\n\n\n    function check() {\n      if (!heartbeat) return;\n      var tickInactive = Date.now() - delay * 4; //doesnt always work\n\n      var currentlyConnected = ignoreDisconnection ? ignoreDisconnection : lastping >= tickInactive; // If we have changed connection state, flag the change\n\n      if (connected !== currentlyConnected) {\n        heartbeat(currentlyConnected ? 'connected' : 'disconnected');\n        heartbeat('signalling:state', currentlyConnected);\n        connected = currentlyConnected;\n      }\n    }\n    /**\n      Checks the state of the connection, and pings as well\n     **/\n\n\n    function beat() {\n      check();\n      ping();\n    }\n    /**\n      Starts the heartbeat\n     **/\n\n\n    heartbeat.start = function () {\n      if (timer) heartbeat.stop();\n      if (delay <= 0) return;\n      timer = setInterval(beat, delay);\n      beat();\n    };\n    /**\n      Stops the heartbeat\n     **/\n\n\n    heartbeat.stop = function () {\n      if (!timer) return;\n      clearInterval(timer);\n      timer = null;\n    };\n    /**\n      Destroys the heartbeat\n     **/\n\n\n    heartbeat.destroy = function () {\n      // Stop the heartbeat\n      heartbeat.stop(); // Destroy the mbus events\n\n      heartbeat.clear();\n    };\n    /**\n      Registers the receipt on a ping\n     **/\n\n\n    heartbeat.touch = function () {\n      lastping = Date.now();\n      check();\n    };\n    /**\n      Updates the delay interval\n     **/\n\n\n    heartbeat.updateDelay = function (value) {\n      delay = value;\n      heartbeat.start();\n    };\n\n    heartbeat.start();\n    return heartbeat;\n  }\n\n  return {\n    create: create\n  };\n};","map":null,"metadata":{},"sourceType":"script"}