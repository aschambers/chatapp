{"ast":null,"code":"import _slicedToArray from \"/Users/metabou/Desktop/chatapp/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/metabou/Desktop/chatapp/client/src/views/Invite/Invite.js\";\nimport React, { useState, useEffect } from 'react';\nimport queryString from 'query-string';\nimport Loading from '../../components/Loading/Loading';\nimport ToastMessage from '../../components/ToastMessage/ToastMessage';\nimport { toast } from 'react-toastify';\nimport { Redirect } from 'react-router';\nimport { connect } from 'react-redux';\nimport * as actions from '../../redux';\nimport Navigation from '../../components/Navigation/Navigation';\nimport './Invite.css';\n\nconst Invite = props => {\n  const _useState = useState(false),\n        _useState2 = _slicedToArray(_useState, 2),\n        isLoading = _useState2[0],\n        setIsLoading = _useState2[1];\n\n  const _useState3 = useState(false),\n        _useState4 = _slicedToArray(_useState3, 2),\n        isRedirectSuccess = _useState4[0],\n        setIsRedirectSuccess = _useState4[1];\n\n  const _useState5 = useState(false),\n        _useState6 = _slicedToArray(_useState5, 2),\n        isRedirectFail = _useState6[0],\n        setIsRedirectFail = _useState6[1];\n\n  const params = queryString.parse(props.location.search);\n  const email = params.email;\n  const token = params.token;\n  useEffect(() => {\n    if ((!email || !token) && !isRedirectFail) {\n      setIsLoading(false);\n      setIsRedirectFail(true);\n    }\n\n    if (email && token && !isLoading) {\n      setIsLoading(true);\n      props.inviteVerification({\n        email: email,\n        token: token\n      });\n    }\n\n    if (props.success && !isRedirectSuccess) {\n      setIsLoading(false);\n      setIsRedirectSuccess(true);\n    }\n\n    if (props.error && !isRedirectFail) {\n      setIsLoading(false);\n      setIsRedirectFail(true);\n    }\n\n    props.resetUserValues();\n  }, [props, email, token, isLoading, isRedirectSuccess, isRedirectFail]);\n\n  const closeToast = () => {\n    setIsRedirect(true);\n  };\n\n  if (alreadyVerified && !isRedirect) {\n    return toast.success(\"Invite has expired or is no longer valid!\", {\n      position: toast.POSITION.BOTTOM_CENTER\n    }, {\n      onClose: closeToast()\n    });\n  }\n\n  if (isRedirect) {\n    return React.createElement(Redirect, {\n      push: true,\n      to: \"/Login\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 61\n      },\n      __self: this\n    });\n  }\n\n  if (isLoading) {\n    return React.createElement(Loading, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    });\n  }\n\n  if (!isLoading && !isVerified) {\n    return React.createElement(\"div\", {\n      className: \"verification\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, React.createElement(Navigation, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }), React.createElement(ToastMessage, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, \"Your account has not been verified. Please send another email to verify your account.\"), React.createElement(\"input\", {\n      value: emailAddress,\n      onChange: event => {\n        setEmailAddress(event.target.value);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      onClick: () => {\n        sendEmail();\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, \"Send Email\"));\n  }\n};\n\nfunction mapStateToProps({\n  usersReducer\n}) {\n  return {\n    error: usersReducer.error,\n    isLoading: usersReducer.isLoading,\n    success: usersReducer.success,\n    already: usersReducer.already,\n    resultEmail: usersReducer.resultEmail,\n    noEmail: usersReducer.noEmail\n  };\n}\n\nexport default connect(mapStateToProps, actions)(Invite);","map":{"version":3,"sources":["/Users/metabou/Desktop/chatapp/client/src/views/Invite/Invite.js"],"names":["React","useState","useEffect","queryString","Loading","ToastMessage","toast","Redirect","connect","actions","Navigation","Invite","props","isLoading","setIsLoading","isRedirectSuccess","setIsRedirectSuccess","isRedirectFail","setIsRedirectFail","params","parse","location","search","email","token","inviteVerification","success","error","resetUserValues","closeToast","setIsRedirect","alreadyVerified","isRedirect","position","POSITION","BOTTOM_CENTER","onClose","isVerified","emailAddress","event","setEmailAddress","target","value","sendEmail","mapStateToProps","usersReducer","already","resultEmail","noEmail"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport queryString from 'query-string';\nimport Loading from '../../components/Loading/Loading';\nimport ToastMessage from '../../components/ToastMessage/ToastMessage';\nimport { toast } from 'react-toastify';\nimport { Redirect } from 'react-router';\nimport { connect } from 'react-redux';\nimport * as actions from '../../redux';\nimport Navigation from '../../components/Navigation/Navigation';\nimport './Invite.css';\n\nconst Invite = (props) => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [isRedirectSuccess, setIsRedirectSuccess] = useState(false);\n  const [isRedirectFail, setIsRedirectFail] = useState(false);\n  const params = queryString.parse(props.location.search);\n  const email = params.email;\n  const token = params.token;\n\n  useEffect(() => {\n    if ((!email || !token) && !isRedirectFail) {\n      setIsLoading(false);\n      setIsRedirectFail(true);\n    }\n\n    if (email && token && !isLoading) {\n      setIsLoading(true);\n      props.inviteVerification({\n        email: email,\n        token: token\n      });\n    }\n\n    if (props.success && !isRedirectSuccess) {\n      setIsLoading(false);\n      setIsRedirectSuccess(true);\n    }\n\n    if (props.error && !isRedirectFail) {\n      setIsLoading(false);\n      setIsRedirectFail(true);\n    }\n    props.resetUserValues();\n  }, [props, email, token, isLoading, isRedirectSuccess, isRedirectFail]);\n\n  const closeToast = () => {\n    setIsRedirect(true);\n  }\n\n  if (alreadyVerified && !isRedirect) {\n    return (\n      toast.success(\"Invite has expired or is no longer valid!\", {\n        position: toast.POSITION.BOTTOM_CENTER\n      }, {\n        onClose: closeToast()\n      })\n    );\n  }\n\n  if (isRedirect) {\n    return <Redirect push to=\"/Login\" />;\n  }\n\n  if (isLoading) {\n    return (\n      <Loading />\n    );\n  }\n\n  if (!isLoading && !isVerified) {\n    return (\n      <div className=\"verification\">\n        <Navigation />\n        <ToastMessage />\n        <p>Your account has not been verified. Please send another email to verify your account.</p>\n        <input value={emailAddress} onChange={(event) => { setEmailAddress(event.target.value); }} />\n        <button onClick={() => { sendEmail(); }}>Send Email</button>\n      </div>\n    );\n  }\n};\n\nfunction mapStateToProps({ usersReducer }) {\n  return {\n    error: usersReducer.error,\n    isLoading: usersReducer.isLoading,\n    success: usersReducer.success,\n    already: usersReducer.already,\n    resultEmail: usersReducer.resultEmail,\n    noEmail: usersReducer.noEmail\n  };\n}\n\nexport default connect(mapStateToProps, actions)(Invite);"]},"metadata":{},"sourceType":"module"}