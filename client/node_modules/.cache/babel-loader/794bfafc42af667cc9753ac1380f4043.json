{"ast":null,"code":"/* jshint node: true */\n'use strict';\n\nvar debug = require('cog/logger')('generators');\n\nvar detect = require('./detect');\n\nvar defaults = require('cog/defaults');\n\nvar mappings = {\n  create: {\n    dtls: function (c) {\n      if (!detect.moz) {\n        c.optional = (c.optional || []).concat({\n          DtlsSrtpKeyAgreement: true\n        });\n      }\n    }\n  }\n};\n/**\n  ### rtc-tools/generators\n\n  The generators package provides some utility methods for generating\n  constraint objects and similar constructs.\n\n  ```js\n  var generators = require('rtc/generators');\n  ```\n\n**/\n\n/**\n  #### generators.config(config)\n\n  Generate a configuration object suitable for passing into an W3C\n  RTCPeerConnection constructor first argument, based on our custom config.\n\n  In the event that you use short term authentication for TURN, and you want\n  to generate new `iceServers` regularly, you can specify an iceServerGenerator\n  that will be used prior to coupling. This generator should return a fully\n  compliant W3C (RTCIceServer dictionary)[http://www.w3.org/TR/webrtc/#idl-def-RTCIceServer].\n\n  If you pass in both a generator and iceServers, the iceServers _will be\n  ignored and the generator used instead.\n**/\n\nexports.config = function (config) {\n  var iceServerGenerator = (config || {}).iceServerGenerator;\n  return defaults({}, config, {\n    iceServers: typeof iceServerGenerator == 'function' ? iceServerGenerator() : []\n  });\n};\n/**\n  #### generators.connectionConstraints(flags, constraints)\n\n  This is a helper function that will generate appropriate connection\n  constraints for a new `RTCPeerConnection` object which is constructed\n  in the following way:\n\n  ```js\n  var conn = new RTCPeerConnection(flags, constraints);\n  ```\n\n  In most cases the constraints object can be left empty, but when creating\n  data channels some additional options are required.  This function\n  can generate those additional options and intelligently combine any\n  user defined constraints (in `constraints`) with shorthand flags that\n  might be passed while using the `rtc.createConnection` helper.\n**/\n\n\nexports.connectionConstraints = function (flags, constraints) {\n  var generated = {};\n  var m = mappings.create;\n  var out; // iterate through the flags and apply the create mappings\n\n  Object.keys(flags || {}).forEach(function (key) {\n    if (m[key]) {\n      m[key](generated);\n    }\n  }); // generate the connection constraints\n\n  out = defaults({}, constraints, generated);\n  debug('generated connection constraints: ', out);\n  return out;\n};","map":null,"metadata":{},"sourceType":"script"}