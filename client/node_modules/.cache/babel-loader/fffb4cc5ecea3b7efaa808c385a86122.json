{"ast":null,"code":"var jsonparse = require('cog/jsonparse');\n/**\n  ### process\n\n  ```\n  fn(signaller, opts) => fn(message)\n  ```\n\n  The core processing logic that is used to respond to incoming signaling\n  messages.\n\n**/\n\n\nmodule.exports = function (signaller, opts) {\n  var handlers = {\n    announce: require('./handlers/announce')(signaller, opts)\n  };\n\n  function sendEvent(parts, srcState, data) {\n    // initialise the event name\n    var evtName = 'message:' + parts[0].slice(1); // convert any valid json objects to json\n\n    var args = parts.slice(2).map(jsonparse);\n    signaller.apply(signaller, [evtName].concat(args).concat([srcState, data]));\n  }\n\n  return function (originalData) {\n    var data = originalData;\n    var isMatch = true;\n    var parts;\n    var handler;\n    var srcData;\n    var srcState;\n    var isDirectMessage = false; // discard primus messages\n\n    if (data && data.slice(0, 6) === 'primus') {\n      return;\n    } // force the id into string format so we can run length and comparison tests on it\n\n\n    var id = signaller.id + ''; // process /to messages\n\n    if (data.slice(0, 3) === '/to') {\n      isMatch = data.slice(4, id.length + 4) === id;\n\n      if (isMatch) {\n        parts = data.slice(5 + id.length).split('|').map(jsonparse); // get the source data\n\n        isDirectMessage = true; // extract the vector clock and update the parts\n\n        parts = parts.map(jsonparse);\n      }\n    } // if this is not a match, then bail\n\n\n    if (!isMatch) {\n      return;\n    } // chop the data into parts\n\n\n    signaller('rawdata', data);\n    parts = parts || data.split('|').map(jsonparse); // if we have a specific handler for the action, then invoke\n\n    if (typeof parts[0] == 'string') {\n      // extract the metadata from the input data\n      srcData = parts[1]; // if we got data from ourself, then this is pretty dumb\n      // but if we have then throw it away\n\n      if (srcData === signaller.id) {\n        return console.warn('got data from ourself, discarding');\n      } // get the source state\n\n\n      srcState = signaller.peers.get(srcData) || srcData; // handle commands\n\n      if (parts[0].charAt(0) === '/') {\n        // look for a handler for the message type\n        handler = handlers[parts[0].slice(1)];\n\n        if (typeof handler == 'function') {\n          handler(parts.slice(2), parts[0].slice(1), srcData, srcState, isDirectMessage);\n        } else {\n          sendEvent(parts, srcState, originalData);\n        }\n      } // otherwise, emit data\n      else {\n          signaller('data', parts.slice(0, 1).concat(parts.slice(2)), srcData, srcState, isDirectMessage);\n        }\n    }\n  };\n};","map":null,"metadata":{},"sourceType":"script"}