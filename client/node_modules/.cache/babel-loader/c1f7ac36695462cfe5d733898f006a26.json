{"ast":null,"code":"var _jsxFileName = \"/Users/metabou/Desktop/chatapp/client/src/components/ChannelModal/ChannelModal.js\";\nimport React, { useEffect, useRef } from 'react';\nimport './ChannelModal.css';\n\nconst ChannelModal = props => {\n  const ref = useRef();\n  useOnClickOutside(ref, () => props.setModalOpen(false));\n  return React.createElement(\"div\", {\n    ref: ref,\n    className: \"categorymodal-container\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 9\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    className: \"categorymodal-container-title\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 10\n    },\n    __self: this\n  }, \"Create Channel\"), React.createElement(\"p\", {\n    className: \"categorymodal-container-name\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 11\n    },\n    __self: this\n  }, \"Channel Name\"), React.createElement(\"input\", {\n    onChange: event => {\n      props.setNewChannel(event);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12\n    },\n    __self: this\n  }), React.createElement(\"br\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 12\n    },\n    __self: this\n  }), React.createElement(\"button\", {\n    className: \"categorymodal-container-cancel\",\n    onClick: () => {\n      props.setShowChannelModal(false);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13\n    },\n    __self: this\n  }, \"Cancel\"), React.createElement(\"button\", {\n    className: \"categorymodal-container-create\",\n    onClick: () => {\n      props.createNewChannel();\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14\n    },\n    __self: this\n  }, \"Create\"));\n};\n\nconst useOnClickOutside = (ref, handler) => {\n  useEffect(() => {\n    const listener = event => {\n      // Do nothing if clicking ref's element or descendent elements\n      if (!ref.current || ref.current.contains(event.target)) {\n        return;\n      }\n\n      handler(event);\n    };\n\n    document.addEventListener('mousedown', listener);\n    document.addEventListener('touchstart', listener);\n    return () => {\n      document.removeEventListener('mousedown', listener);\n      document.removeEventListener('touchstart', listener);\n    };\n  }, [ref, handler]);\n};\n\nexport default ChannelModal;","map":{"version":3,"sources":["/Users/metabou/Desktop/chatapp/client/src/components/ChannelModal/ChannelModal.js"],"names":["React","useEffect","useRef","ChannelModal","props","ref","useOnClickOutside","setModalOpen","event","setNewChannel","setShowChannelModal","createNewChannel","handler","listener","current","contains","target","document","addEventListener","removeEventListener"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,MAA3B,QAAyC,OAAzC;AACA,OAAO,oBAAP;;AAEA,MAAMC,YAAY,GAAIC,KAAD,IAAW;AAC9B,QAAMC,GAAG,GAAGH,MAAM,EAAlB;AACAI,EAAAA,iBAAiB,CAACD,GAAD,EAAM,MAAMD,KAAK,CAACG,YAAN,CAAmB,KAAnB,CAAZ,CAAjB;AAEA,SACE;AAAK,IAAA,GAAG,EAAEF,GAAV;AAAe,IAAA,SAAS,EAAC,yBAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAG,IAAA,SAAS,EAAC,+BAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sBADF,EAEE;AAAG,IAAA,SAAS,EAAC,8BAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAFF,EAGE;AAAO,IAAA,QAAQ,EAAGG,KAAD,IAAW;AAAEJ,MAAAA,KAAK,CAACK,aAAN,CAAoBD,KAApB;AAA6B,KAA3D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHF,EAGiE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHjE,EAIE;AAAQ,IAAA,SAAS,EAAC,gCAAlB;AAAmD,IAAA,OAAO,EAAE,MAAM;AAAEJ,MAAAA,KAAK,CAACM,mBAAN,CAA0B,KAA1B;AAAmC,KAAvG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAJF,EAKE;AAAQ,IAAA,SAAS,EAAC,gCAAlB;AAAmD,IAAA,OAAO,EAAE,MAAM;AAAEN,MAAAA,KAAK,CAACO,gBAAN;AAA2B,KAA/F;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cALF,CADF;AASD,CAbD;;AAeA,MAAML,iBAAiB,GAAG,CAACD,GAAD,EAAMO,OAAN,KAAkB;AAC1CX,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMY,QAAQ,GAAGL,KAAK,IAAI;AACxB;AACA,UAAI,CAACH,GAAG,CAACS,OAAL,IAAgBT,GAAG,CAACS,OAAJ,CAAYC,QAAZ,CAAqBP,KAAK,CAACQ,MAA3B,CAApB,EAAwD;AACtD;AACD;;AAEDJ,MAAAA,OAAO,CAACJ,KAAD,CAAP;AACD,KAPD;;AASAS,IAAAA,QAAQ,CAACC,gBAAT,CAA0B,WAA1B,EAAuCL,QAAvC;AACAI,IAAAA,QAAQ,CAACC,gBAAT,CAA0B,YAA1B,EAAwCL,QAAxC;AAEA,WAAO,MAAM;AACXI,MAAAA,QAAQ,CAACE,mBAAT,CAA6B,WAA7B,EAA0CN,QAA1C;AACAI,MAAAA,QAAQ,CAACE,mBAAT,CAA6B,YAA7B,EAA2CN,QAA3C;AACD,KAHD;AAID,GAjBQ,EAiBN,CAACR,GAAD,EAAMO,OAAN,CAjBM,CAAT;AAkBD,CAnBD;;AAqBA,eAAeT,YAAf","sourcesContent":["import React, { useEffect, useRef } from 'react';\nimport './ChannelModal.css';\n\nconst ChannelModal = (props) => {\n  const ref = useRef();\n  useOnClickOutside(ref, () => props.setModalOpen(false));\n\n  return (\n    <div ref={ref} className=\"categorymodal-container\">\n      <p className=\"categorymodal-container-title\">Create Channel</p>\n      <p className=\"categorymodal-container-name\">Channel Name</p>\n      <input onChange={(event) => { props.setNewChannel(event); }} /><br />\n      <button className=\"categorymodal-container-cancel\" onClick={() => { props.setShowChannelModal(false); }}>Cancel</button>\n      <button className=\"categorymodal-container-create\" onClick={() => { props.createNewChannel(); }}>Create</button>\n    </div>\n  );\n}\n\nconst useOnClickOutside = (ref, handler) => {\n  useEffect(() => {\n    const listener = event => {\n      // Do nothing if clicking ref's element or descendent elements\n      if (!ref.current || ref.current.contains(event.target)) {\n        return;\n      }\n\n      handler(event);\n    };\n\n    document.addEventListener('mousedown', listener);\n    document.addEventListener('touchstart', listener);\n\n    return () => {\n      document.removeEventListener('mousedown', listener);\n      document.removeEventListener('touchstart', listener);\n    };\n  }, [ref, handler]);\n}\n\nexport default ChannelModal;"]},"metadata":{},"sourceType":"module"}