{"ast":null,"code":"/* jshint node: true */\n'use strict';\n\nvar debug = require('cog/logger')('rtc/cleanup');\n\nvar CANNOT_CLOSE_STATES = ['closed'];\nvar EVENTS_DECOUPLE_BC = ['addstream', 'datachannel', 'icecandidate', 'negotiationneeded', 'removestream', 'signalingstatechange'];\nvar EVENTS_DECOUPLE_AC = ['iceconnectionstatechange'];\n/**\n  ### rtc-tools/cleanup\n\n  ```\n  cleanup(pc)\n  ```\n\n  The `cleanup` function is used to ensure that a peer connection is properly\n  closed and ready to be cleaned up by the browser.\n\n**/\n\nmodule.exports = function (pc) {\n  if (!pc) return; // see if we can close the connection\n\n  var currentState = pc.iceConnectionState;\n  var currentSignaling = pc.signalingState;\n  var canClose = CANNOT_CLOSE_STATES.indexOf(currentState) < 0 && CANNOT_CLOSE_STATES.indexOf(currentSignaling) < 0;\n\n  function decouple(events) {\n    events.forEach(function (evtName) {\n      if (pc['on' + evtName]) {\n        pc['on' + evtName] = null;\n      }\n    });\n  } // decouple \"before close\" events\n\n\n  decouple(EVENTS_DECOUPLE_BC);\n\n  if (canClose) {\n    debug('attempting connection close, current state: ' + pc.iceConnectionState);\n\n    try {\n      pc.close();\n    } catch (e) {\n      console.warn('Could not close connection', e);\n    }\n  } // remove the event listeners\n  // after a short delay giving the connection time to trigger\n  // close and iceconnectionstatechange events\n\n\n  setTimeout(function () {\n    decouple(EVENTS_DECOUPLE_AC);\n  }, 100);\n};","map":null,"metadata":{},"sourceType":"script"}