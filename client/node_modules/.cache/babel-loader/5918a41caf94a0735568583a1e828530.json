{"ast":null,"code":"/* jshint node: true */\n'use strict';\n/**\n  # rtc-tools\n\n  The `rtc-tools` module does most of the heavy lifting within the\n  [rtc.io](http://rtc.io) suite.  Primarily it handles the logic of coupling\n  a local `RTCPeerConnection` with it's remote counterpart via an\n  [rtc-signaller](https://github.com/rtc-io/rtc-signaller) signalling\n  channel.\n\n  ## Getting Started\n\n  If you decide that the `rtc-tools` module is a better fit for you than either\n  [rtc-quickconnect](https://github.com/rtc-io/rtc-quickconnect) or\n  [rtc](https://github.com/rtc-io/rtc) then the code snippet below\n  will provide you a guide on how to get started using it in conjunction with\n  the [rtc-signaller](https://github.com/rtc-io/rtc-signaller) (version 5.0 and above)\n  and [rtc-media](https://github.com/rtc-io/rtc-media) modules:\n\n  <<< examples/getting-started.js\n\n  This code definitely doesn't cover all the cases that you need to consider\n  (i.e. peers leaving, etc) but it should demonstrate how to:\n\n  1. Capture video and add it to a peer connection\n  2. Couple a local peer connection with a remote peer connection\n  3. Deal with the remote steam being discovered and how to render\n     that to the local interface.\n\n  ## Reference\n\n**/\n\nvar gen = require('./generators'); // export detect\n\n\nvar detect = exports.detect = require('./detect');\n\nvar findPlugin = require('rtc-core/plugin'); // export cog logger for convenience\n\n\nexports.logger = require('cog/logger'); // export peer connection\n\nvar RTCPeerConnection = exports.RTCPeerConnection = detect('RTCPeerConnection'); // add the couple utility\n\nexports.couple = require('./couple');\n/**\n  ### createConnection\n\n  ```\n  createConnection(opts?, constraints?) => RTCPeerConnection\n  ```\n\n  Create a new `RTCPeerConnection` auto generating default opts as required.\n\n  ```js\n  var conn;\n\n  // this is ok\n  conn = rtc.createConnection();\n\n  // and so is this\n  conn = rtc.createConnection({\n    iceServers: []\n  });\n  ```\n**/\n\nexports.createConnection = function (opts, constraints) {\n  var plugin = findPlugin((opts || {}).plugins);\n  var PeerConnection = (opts || {}).RTCPeerConnection || RTCPeerConnection; // generate the config based on options provided\n\n  var config = gen.config(opts); // generate appropriate connection constraints\n\n  constraints = gen.connectionConstraints(opts, constraints);\n\n  if (plugin && typeof plugin.createConnection == 'function') {\n    return plugin.createConnection(config, constraints);\n  }\n\n  return new PeerConnection(config, constraints);\n};","map":null,"metadata":{},"sourceType":"script"}