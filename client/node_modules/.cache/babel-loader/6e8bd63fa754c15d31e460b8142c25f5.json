{"ast":null,"code":"var common = require('./common.js');\n\nvar System = common.System;\nvar VbrMode = common.VbrMode;\nvar Float = common.Float;\nvar ShortBlock = common.ShortBlock;\nvar Util = common.Util;\nvar Arrays = common.Arrays;\nvar new_array_n = common.new_array_n;\nvar new_byte = common.new_byte;\nvar new_double = common.new_double;\nvar new_float = common.new_float;\nvar new_float_n = common.new_float_n;\nvar new_int = common.new_int;\nvar new_int_n = common.new_int_n;\nvar assert = common.assert;\n\nvar Encoder = require('./Encoder.js');\n/**\n * ATH related stuff, if something new ATH related has to be added, please plug\n * it here into the ATH.\n */\n\n\nfunction ATH() {\n  /**\n   * Method for the auto adjustment.\n   */\n  this.useAdjust = 0;\n  /**\n   * factor for tuning the (sample power) point below which adaptive threshold\n   * of hearing adjustment occurs\n   */\n\n  this.aaSensitivityP = 0.;\n  /**\n   * Lowering based on peak volume, 1 = no lowering.\n   */\n\n  this.adjust = 0.;\n  /**\n   * Limit for dynamic ATH adjust.\n   */\n\n  this.adjustLimit = 0.;\n  /**\n   * Determined to lower x dB each second.\n   */\n\n  this.decay = 0.;\n  /**\n   * Lowest ATH value.\n   */\n\n  this.floor = 0.;\n  /**\n   * ATH for sfbs in long blocks.\n   */\n\n  this.l = new_float(Encoder.SBMAX_l);\n  /**\n   * ATH for sfbs in short blocks.\n   */\n\n  this.s = new_float(Encoder.SBMAX_s);\n  /**\n   * ATH for partitioned sfb21 in long blocks.\n   */\n\n  this.psfb21 = new_float(Encoder.PSFB21);\n  /**\n   * ATH for partitioned sfb12 in short blocks.\n   */\n\n  this.psfb12 = new_float(Encoder.PSFB12);\n  /**\n   * ATH for long block convolution bands.\n   */\n\n  this.cb_l = new_float(Encoder.CBANDS);\n  /**\n   * ATH for short block convolution bands.\n   */\n\n  this.cb_s = new_float(Encoder.CBANDS);\n  /**\n   * Equal loudness weights (based on ATH).\n   */\n\n  this.eql_w = new_float(Encoder.BLKSIZE / 2);\n}\n\nmodule.exports = ATH;","map":null,"metadata":{},"sourceType":"script"}