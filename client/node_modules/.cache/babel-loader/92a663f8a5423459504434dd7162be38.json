{"ast":null,"code":"var _jsxFileName = \"/Users/metabou/Desktop/chatapp/client/src/components/ChatroomFriend/ChatroomFriend.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport * as actions from '../../redux';\nimport { ROOT_URL } from '../../config/networkSettings';\nimport io from \"socket.io-client\";\nimport Moment from 'react-moment';\nimport 'moment-timezone';\nimport './ChatroomFriend.css';\n\nclass ChatroomFriend extends Component {\n  constructor(props) {\n    super(props);\n\n    this.sendMessage = event => {\n      if (event) {\n        event.preventDefault();\n        this.socket.emit('SEND_PRIVATE_MESSAGE', {\n          username: this.props.username,\n          message: this.state.message,\n          userId: this.props.userId,\n          friendId: this.props.friendId\n        });\n        this.setState({\n          message: \"\"\n        });\n      }\n    };\n\n    this.state = {\n      id: \"\",\n      username: \"\",\n      active: false,\n      type: \"\",\n      imageUrl: \"\",\n      message: \"\",\n      messages: [],\n      userDetails: false,\n      socketId: \"\",\n      currentSocket: \"\"\n    };\n  }\n\n  async componentDidMount() {\n    this.socket = io(ROOT_URL);\n    this.socket.on('connect', () => {\n      this.setState({\n        socketId: this.socket.id\n      });\n    });\n    this.socket.emit('GET_PRIVATE_MESSAGES', {\n      userId: this.props.userId,\n      friendId: this.props.friendId\n    });\n    this.socket.on('RECEIVE_PRIVATE_MESSAGE', data => {\n      // scroll to latest message after rendering messages in firefox\n      if (navigator.userAgent.search(\"Firefox\") > -1) {\n        this.setState({\n          messages: data.reverse()\n        }, () => {\n          if (data && data.length > 0) {\n            const element = \"message\" + (this.state.messages.length - 1);\n\n            if (document.getElementById(element)) {\n              document.getElementById(element).scrollIntoView();\n            }\n          }\n        });\n      } else if (navigator.userAgent.search(\"Firefox\") < 0) {\n        this.setState({\n          messages: data\n        });\n      }\n    });\n  }\n\n  async componentWillReceiveProps(nextProps) {\n    if (nextProps.activeChatroomId) {\n      this.socket.emit('GET_PRIVATE_MESSAGES', {\n        chatroomId: nextProps.activeChatroomId\n      });\n    }\n\n    if (nextProps.user) {\n      const _nextProps$user = nextProps.user,\n            id = _nextProps$user.id,\n            username = _nextProps$user.username,\n            active = _nextProps$user.active,\n            type = _nextProps$user.type;\n      this.setState({\n        id: id,\n        username: username,\n        active: active,\n        type: type\n      });\n    }\n\n    if (nextProps.users && nextProps.users.length) {\n      const userList = [];\n\n      for (let i = 0; i < nextProps.users.length; i++) {\n        userList.push(nextProps.users[i]);\n      }\n\n      this.setState({\n        users: userList\n      });\n    }\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"chatroom\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 97\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"chatarea\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 98\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      id: \"chatareamessages\",\n      className: \"chatarea-messages\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 99\n      },\n      __self: this\n    }, this.state.messages && this.state.messages.length > 0 ? this.state.messages.map((item, index) => {\n      return React.createElement(\"div\", {\n        id: \"message\" + index,\n        key: index,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        className: \"chatarea-messages-user\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        },\n        __self: this\n      }, item.username), \" \", React.createElement(Moment, {\n        format: \"MM/DD/YYYY\",\n        className: \"chatarea-messages-time\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        },\n        __self: this\n      }, item.createdAt))), React.createElement(\"p\", {\n        className: \"chatarea-messages-message\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104\n        },\n        __self: this\n      }, item.message));\n    }) : null), React.createElement(\"div\", {\n      className: \"chatarea-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      placeholder: \"Send a message!\",\n      type: \"text\",\n      onChange: event => {\n        this.setState({\n          message: event.target.value\n        });\n      },\n      value: this.state.message,\n      onKeyDown: event => {\n        event.keyCode === 13 && event.shiftKey === false ? this.sendMessage(event) : this.sendMessage(null);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110\n      },\n      __self: this\n    }))));\n  }\n\n}\n\nfunction mapStateToProps({\n  usersReducer\n}) {\n  return {\n    error: usersReducer.error,\n    isLoading: usersReducer.isLoading,\n    success: usersReducer.success,\n    user: usersReducer.user,\n    users: usersReducer.users\n  };\n}\n\nexport default connect(mapStateToProps, actions)(ChatroomFriend);","map":{"version":3,"sources":["/Users/metabou/Desktop/chatapp/client/src/components/ChatroomFriend/ChatroomFriend.js"],"names":["React","Component","connect","actions","ROOT_URL","io","Moment","ChatroomFriend","constructor","props","sendMessage","event","preventDefault","socket","emit","username","message","state","userId","friendId","setState","id","active","type","imageUrl","messages","userDetails","socketId","currentSocket","componentDidMount","on","data","navigator","userAgent","search","reverse","length","element","document","getElementById","scrollIntoView","componentWillReceiveProps","nextProps","activeChatroomId","chatroomId","user","users","userList","i","push","render","map","item","index","createdAt","target","value","keyCode","shiftKey","mapStateToProps","usersReducer","error","isLoading","success"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport * as actions from '../../redux';\nimport { ROOT_URL } from '../../config/networkSettings';\nimport io from \"socket.io-client\";\nimport Moment from 'react-moment';\nimport 'moment-timezone';\nimport './ChatroomFriend.css';\n\nclass ChatroomFriend extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      id: \"\",\n      username: \"\",\n      active: false,\n      type: \"\",\n      imageUrl: \"\",\n      message: \"\",\n      messages: [],\n      userDetails: false,\n      socketId: \"\",\n      currentSocket: \"\",\n    }\n  }\n\n  async componentDidMount() {\n    this.socket = io(ROOT_URL);\n\n    this.socket.on('connect', () => {\n      this.setState({ socketId: this.socket.id });\n    });\n\n    this.socket.emit('GET_PRIVATE_MESSAGES', {\n      userId: this.props.userId,\n      friendId: this.props.friendId\n    });\n\n    this.socket.on('RECEIVE_PRIVATE_MESSAGE', (data) => {\n      // scroll to latest message after rendering messages in firefox\n      if (navigator.userAgent.search(\"Firefox\") > -1) {\n        this.setState({ messages: data.reverse() }, () => {\n          if (data && data.length > 0) {\n            const element = \"message\" + (this.state.messages.length - 1);\n            if (document.getElementById(element)) {\n              document.getElementById(element).scrollIntoView();\n            }\n          }\n        });\n      } else if (navigator.userAgent.search(\"Firefox\") < 0) {\n        this.setState({ messages: data });\n      }\n    });\n  }\n\n  async componentWillReceiveProps(nextProps) {\n    if (nextProps.activeChatroomId) {\n      this.socket.emit('GET_PRIVATE_MESSAGES', {\n        chatroomId: nextProps.activeChatroomId\n      });\n    }\n    if (nextProps.user) {\n      const { id, username, active, type } = nextProps.user;\n      this.setState({\n        id: id,\n        username: username,\n        active: active,\n        type: type\n      });\n    }\n\n    if (nextProps.users && nextProps.users.length) {\n      const userList = [];\n      for(let i = 0; i < nextProps.users.length; i++) {\n        userList.push(nextProps.users[i]);\n      }\n      this.setState({ users: userList });\n    }\n  }\n\n  sendMessage = (event) => {\n    if (event) {\n      event.preventDefault();\n      this.socket.emit('SEND_PRIVATE_MESSAGE', {\n        username: this.props.username,\n        message: this.state.message,\n        userId: this.props.userId,\n        friendId: this.props.friendId\n      });\n      this.setState({ message: \"\" });\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"chatroom\">\n        <div className=\"chatarea\">\n          <div id=\"chatareamessages\" className=\"chatarea-messages\">\n            {this.state.messages && this.state.messages.length > 0 ? this.state.messages.map((item, index) => {\n              return (\n                <div id={\"message\" + index} key={index}>\n                  <p><span className=\"chatarea-messages-user\">{item.username}</span> <Moment format=\"MM/DD/YYYY\" className=\"chatarea-messages-time\"><span>{item.createdAt}</span></Moment></p>\n                  <p className=\"chatarea-messages-message\">{item.message}</p>\n                </div>\n              )\n            }) : null}\n          </div>\n          <div className=\"chatarea-container\">\n            <input placeholder=\"Send a message!\" type=\"text\" onChange={(event) => { this.setState({ message: event.target.value }); }} value={this.state.message} onKeyDown={(event) => { event.keyCode === 13 && event.shiftKey === false ? this.sendMessage(event) : this.sendMessage(null) }}></input>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nfunction mapStateToProps({ usersReducer }) {\n  return {\n    error: usersReducer.error,\n    isLoading: usersReducer.isLoading,\n    success: usersReducer.success,\n    user: usersReducer.user,\n    users: usersReducer.users\n  };\n}\n\nexport default connect(mapStateToProps, actions)(ChatroomFriend);"]},"metadata":{},"sourceType":"module"}