{"ast":null,"code":"//package mp3;\n\n/**\n * Layer III side information.\n *\n * @author Ken\n *\n */\nvar common = require('./common.js');\n\nvar System = common.System;\nvar VbrMode = common.VbrMode;\nvar Float = common.Float;\nvar ShortBlock = common.ShortBlock;\nvar Util = common.Util;\nvar Arrays = common.Arrays;\nvar new_array_n = common.new_array_n;\nvar new_byte = common.new_byte;\nvar new_double = common.new_double;\nvar new_float = common.new_float;\nvar new_float_n = common.new_float_n;\nvar new_int = common.new_int;\nvar new_int_n = common.new_int_n;\nvar assert = common.assert;\n\nvar Encoder = require('./Encoder.js');\n\nfunction ScaleFac(arrL, arrS, arr21, arr12) {\n  this.l = new_int(1 + Encoder.SBMAX_l);\n  this.s = new_int(1 + Encoder.SBMAX_s);\n  this.psfb21 = new_int(1 + Encoder.PSFB21);\n  this.psfb12 = new_int(1 + Encoder.PSFB12);\n  var l = this.l;\n  var s = this.s;\n\n  if (arguments.length == 4) {\n    //public ScaleFac(final int[] arrL, final int[] arrS, final int[] arr21,\n    //    final int[] arr12) {\n    this.arrL = arguments[0];\n    this.arrS = arguments[1];\n    this.arr21 = arguments[2];\n    this.arr12 = arguments[3];\n    System.arraycopy(this.arrL, 0, l, 0, Math.min(this.arrL.length, this.l.length));\n    System.arraycopy(this.arrS, 0, s, 0, Math.min(this.arrS.length, this.s.length));\n    System.arraycopy(this.arr21, 0, this.psfb21, 0, Math.min(this.arr21.length, this.psfb21.length));\n    System.arraycopy(this.arr12, 0, this.psfb12, 0, Math.min(this.arr12.length, this.psfb12.length));\n  }\n}\n\nmodule.exports = ScaleFac;","map":null,"metadata":{},"sourceType":"script"}