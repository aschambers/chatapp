{"ast":null,"code":"/**\n * Expose `PriorityQueue`.\n */\nmodule.exports = PriorityQueue;\n/**\n * Initializes a new empty `PriorityQueue` with the given `comparator(a, b)`\n * function, uses `.DEFAULT_COMPARATOR()` when no function is provided.\n *\n * The comparator function must return a positive number when `a > b`, 0 when\n * `a == b` and a negative number when `a < b`.\n *\n * @param {Function}\n * @return {PriorityQueue}\n * @api public\n */\n\nfunction PriorityQueue(comparator) {\n  this._comparator = comparator || PriorityQueue.DEFAULT_COMPARATOR;\n  this._elements = [];\n}\n/**\n * Compares `a` and `b`, when `a > b` it returns a positive number, when\n * it returns 0 and when `a < b` it returns a negative number.\n *\n * @param {String|Number} a\n * @param {String|Number} b\n * @return {Number}\n * @api public\n */\n\n\nPriorityQueue.DEFAULT_COMPARATOR = function (a, b) {\n  if (typeof a === 'number' && typeof b === 'number') {\n    return a - b;\n  } else {\n    a = a.toString();\n    b = b.toString();\n    if (a == b) return 0;\n    return a > b ? 1 : -1;\n  }\n};\n/**\n * Returns whether the priority queue is empty or not.\n *\n * @return {Boolean}\n * @api public\n */\n\n\nPriorityQueue.prototype.isEmpty = function () {\n  return this.size() === 0;\n};\n/**\n * Peeks at the top element of the priority queue.\n *\n * @return {Object}\n * @throws {Error} when the queue is empty.\n * @api public\n */\n\n\nPriorityQueue.prototype.peek = function () {\n  if (this.isEmpty()) throw new Error('PriorityQueue is empty');\n  return this._elements[0];\n};\n/**\n * Dequeues the top element of the priority queue.\n *\n * @return {Object}\n * @throws {Error} when the queue is empty.\n * @api public\n */\n\n\nPriorityQueue.prototype.deq = function () {\n  var first = this.peek();\n\n  var last = this._elements.pop();\n\n  var size = this.size();\n  if (size === 0) return first;\n  this._elements[0] = last;\n  var current = 0;\n\n  while (current < size) {\n    var largest = current;\n    var left = 2 * current + 1;\n    var right = 2 * current + 2;\n\n    if (left < size && this._compare(left, largest) >= 0) {\n      largest = left;\n    }\n\n    if (right < size && this._compare(right, largest) >= 0) {\n      largest = right;\n    }\n\n    if (largest === current) break;\n\n    this._swap(largest, current);\n\n    current = largest;\n  }\n\n  return first;\n};\n/**\n * Enqueues the `element` at the priority queue and returns its new size.\n *\n * @param {Object} element\n * @return {Number}\n * @api public\n */\n\n\nPriorityQueue.prototype.enq = function (element) {\n  var size = this._elements.push(element);\n\n  var current = size - 1;\n\n  while (current > 0) {\n    var parent = Math.floor((current - 1) / 2);\n    if (this._compare(current, parent) <= 0) break;\n\n    this._swap(parent, current);\n\n    current = parent;\n  }\n\n  return size;\n};\n/**\n * Returns the size of the priority queue.\n *\n * @return {Number}\n * @api public\n */\n\n\nPriorityQueue.prototype.size = function () {\n  return this._elements.length;\n};\n/**\n *  Iterates over queue elements\n *\n *  @param {Function} fn\n */\n\n\nPriorityQueue.prototype.forEach = function (fn) {\n  return this._elements.forEach(fn);\n};\n/**\n * Compares the values at position `a` and `b` in the priority queue using its\n * comparator function.\n *\n * @param {Number} a\n * @param {Number} b\n * @return {Number}\n * @api private\n */\n\n\nPriorityQueue.prototype._compare = function (a, b) {\n  return this._comparator(this._elements[a], this._elements[b]);\n};\n/**\n * Swaps the values at position `a` and `b` in the priority queue.\n *\n * @param {Number} a\n * @param {Number} b\n * @api private\n */\n\n\nPriorityQueue.prototype._swap = function (a, b) {\n  var aux = this._elements[a];\n  this._elements[a] = this._elements[b];\n  this._elements[b] = aux;\n};","map":null,"metadata":{},"sourceType":"script"}