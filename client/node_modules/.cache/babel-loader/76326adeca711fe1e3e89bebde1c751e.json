{"ast":null,"code":"import _slicedToArray from \"/Users/metabou/Desktop/chatapp/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/metabou/Desktop/chatapp/client/src/views/Verification/Verification.js\";\nimport React, { useState, useEffect } from 'react';\nimport queryString from 'query-string';\nimport Loading from '../../components/Loading/Loading';\nimport { toast } from 'react-toastify';\nimport ToastMessage from '../../components/ToastMessage/ToastMessage';\nimport { Redirect } from 'react-router';\nimport { connect } from 'react-redux';\nimport * as actions from '../../redux';\nimport './Verification.css';\n\nconst Verification = props => {\n  const _useState = useState(false),\n        _useState2 = _slicedToArray(_useState, 2),\n        isVerified = _useState2[0],\n        setIsVerified = _useState2[1];\n\n  const _useState3 = useState(false),\n        _useState4 = _slicedToArray(_useState3, 2),\n        alreadyVerified = _useState4[0],\n        setAlreadyVerified = _useState4[1];\n\n  const _useState5 = useState(false),\n        _useState6 = _slicedToArray(_useState5, 2),\n        notVerified = _useState6[0],\n        setNotVerified = _useState6[1];\n\n  const _useState7 = useState(false),\n        _useState8 = _slicedToArray(_useState7, 2),\n        isLoading = _useState8[0],\n        setIsLoading = _useState8[1];\n\n  const _useState9 = useState(false),\n        _useState10 = _slicedToArray(_useState9, 2),\n        isRedirect = _useState10[0],\n        setIsRedirect = _useState10[1];\n\n  const params = queryString.parse(props.location.search);\n  const email = params.email;\n  const token = params.token;\n  useEffect(() => {\n    if (email && token && !isLoading) {\n      setIsLoading(true);\n      props.userVerification({\n        email: email,\n        token: token\n      });\n    }\n\n    if (props.success) {\n      setAlreadyVerified(true);\n      setIsLoading(false);\n      setIsVerified(true);\n    }\n  }, [props, email, token, isLoading]);\n\n  const closeToast = () => {\n    setIsRedirect(true);\n  };\n\n  if (alreadyVerified && !isRedirect) {\n    return toast.success(\"Your account has already been verified!\", {\n      position: toast.POSITION.BOTTOM_CENTER\n    }, {\n      onClose: closeToast()\n    });\n  }\n\n  if (isVerified && !isRedirect) {\n    return toast.success(\"Success Notification !\", {\n      position: toast.POSITION.BOTTOM_CENTER\n    }, {\n      onClose: closeToast()\n    });\n  }\n\n  if (isRedirect) {\n    return React.createElement(Redirect, {\n      push: true,\n      to: \"/Login\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    });\n  }\n\n  if (isLoading) {\n    return React.createElement(Loading, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    });\n  } else if (!isLoading && !isVerified) {\n    return React.createElement(\"div\", {\n      className: \"verification\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }, \"You must send another email to verify your account.\"), React.createElement(\"button\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, \"Send email\"));\n  }\n};\n\nfunction mapStateToProps({\n  usersReducer\n}) {\n  return {\n    error: usersReducer.error,\n    isLoading: usersReducer.isLoading,\n    success: usersReducer.success\n  };\n}\n\nexport default connect(mapStateToProps, actions)(Verification);","map":{"version":3,"sources":["/Users/metabou/Desktop/chatapp/client/src/views/Verification/Verification.js"],"names":["React","useState","useEffect","queryString","Loading","toast","ToastMessage","Redirect","connect","actions","Verification","props","isVerified","setIsVerified","alreadyVerified","setAlreadyVerified","notVerified","setNotVerified","isLoading","setIsLoading","isRedirect","setIsRedirect","params","parse","location","search","email","token","userVerification","success","closeToast","position","POSITION","BOTTOM_CENTER","onClose","mapStateToProps","usersReducer","error"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport queryString from 'query-string';\nimport Loading from '../../components/Loading/Loading';\nimport { toast } from 'react-toastify';\nimport ToastMessage from '../../components/ToastMessage/ToastMessage';\nimport { Redirect } from 'react-router';\nimport { connect } from 'react-redux';\nimport * as actions from '../../redux';\nimport './Verification.css';\n\nconst Verification = (props) => {\n  const [isVerified, setIsVerified] = useState(false);\n  const [alreadyVerified, setAlreadyVerified] = useState(false);\n  const [notVerified, setNotVerified] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isRedirect, setIsRedirect] = useState(false);\n  const params = queryString.parse(props.location.search);\n  const email = params.email;\n  const token = params.token;\n\n  useEffect(() => {\n    if (email && token && !isLoading) {\n      setIsLoading(true);\n      props.userVerification({\n        email: email,\n        token: token\n      });\n    }\n\n    if (props.success) {\n      setAlreadyVerified(true);\n      setIsLoading(false);\n      setIsVerified(true);\n    }\n  }, [props, email, token, isLoading]);\n\n  const closeToast = () => {\n    setIsRedirect(true);\n  }\n\n  if (alreadyVerified && !isRedirect) {\n    return (\n      toast.success(\"Your account has already been verified!\", {\n        position: toast.POSITION.BOTTOM_CENTER\n      }, {\n        onClose: closeToast()\n      })\n    );\n  }\n\n  if (isVerified && !isRedirect) {\n    return (\n      toast.success(\"Success Notification !\", {\n        position: toast.POSITION.BOTTOM_CENTER\n      }, {\n        onClose: closeToast()\n      })\n    );\n  }\n\n  if (isRedirect) {\n    return <Redirect push to=\"/Login\" />;\n  }\n\n  if (isLoading) {\n    return (\n      <Loading />\n    );\n  } else if (!isLoading && !isVerified) {\n    return (\n      <div className=\"verification\">\n        <div>You must send another email to verify your account.</div>\n        <button>Send email</button>\n      </div>\n    );\n  }\n};\n\nfunction mapStateToProps({ usersReducer }) {\n  return {\n    error: usersReducer.error,\n    isLoading: usersReducer.isLoading,\n    success: usersReducer.success\n  };\n}\n\nexport default connect(mapStateToProps, actions)(Verification);"]},"metadata":{},"sourceType":"module"}