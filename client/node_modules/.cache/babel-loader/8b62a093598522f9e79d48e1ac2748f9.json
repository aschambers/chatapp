{"ast":null,"code":"exports.id = function (item) {\n  return item;\n};\n\nexports.prop = function (map) {\n  if ('string' == typeof map) {\n    var key = map;\n    return function (data) {\n      return data[key];\n    };\n  }\n\n  return map;\n};\n\nexports.tester = function (test) {\n  if (!test) return exports.id;\n  if ('object' === typeof test && 'function' === typeof test.test) return test.test.bind(test);\n  return exports.prop(test) || exports.id;\n};\n\nexports.addPipe = addPipe;\n\nfunction addPipe(read) {\n  if ('function' !== typeof read) return read;\n\n  read.pipe = read.pipe || function (reader) {\n    if ('function' != typeof reader) throw new Error('must pipe to reader');\n    return addPipe(reader(read));\n  };\n\n  read.type = 'Source';\n  return read;\n}\n\nvar Source = exports.Source = function Source(createRead) {\n  function s() {\n    var args = [].slice.call(arguments);\n    return addPipe(createRead.apply(null, args));\n  }\n\n  s.type = 'Source';\n  return s;\n};\n\nvar Through = exports.Through = function (createRead) {\n  return function () {\n    var args = [].slice.call(arguments);\n    var piped = [];\n\n    function reader(read) {\n      args.unshift(read);\n      read = createRead.apply(null, args);\n\n      while (piped.length) read = piped.shift()(read);\n\n      return read; //pipeing to from this reader should compose...\n    }\n\n    reader.pipe = function (read) {\n      piped.push(read);\n      if (read.type === 'Source') throw new Error('cannot pipe ' + reader.type + ' to Source');\n      reader.type = read.type === 'Sink' ? 'Sink' : 'Through';\n      return reader;\n    };\n\n    reader.type = 'Through';\n    return reader;\n  };\n};\n\nvar Sink = exports.Sink = function Sink(createReader) {\n  return function () {\n    var args = [].slice.call(arguments);\n    if (!createReader) throw new Error('must be createReader function');\n\n    function s(read) {\n      args.unshift(read);\n      return createReader.apply(null, args);\n    }\n\n    s.type = 'Sink';\n    return s;\n  };\n};\n\nexports.maybeSink = exports.maybeDrain = function (createSink, cb) {\n  if (!cb) return Through(function (read) {\n    var ended;\n    return function (close, cb) {\n      if (close) return read(close, cb);\n      if (ended) return cb(ended);\n      createSink(function (err, data) {\n        ended = err || true;\n        if (!err) cb(null, data);else cb(ended);\n      })(read);\n    };\n  })();\n  return Sink(function (read) {\n    return createSink(cb)(read);\n  })();\n};","map":null,"metadata":{},"sourceType":"script"}