{"ast":null,"code":"import _slicedToArray from \"/Users/metabou/Desktop/chatapp/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/metabou/Desktop/chatapp/client/src/views/Verification/Verification.js\";\nimport React, { useState, useEffect } from 'react';\nimport queryString from 'query-string';\nimport Loading from '../../components/Loading/Loading';\nimport ToastMessage from '../../components/ToastMessage/ToastMessage';\nimport { Redirect } from 'react-router';\nimport { connect } from 'react-redux';\nimport * as actions from '../../redux';\nimport './Verification.css';\n\nconst Verification = props => {\n  const _useState = useState(false),\n        _useState2 = _slicedToArray(_useState, 2),\n        isVerified = _useState2[0],\n        setIsVerified = _useState2[1];\n\n  const _useState3 = useState(false),\n        _useState4 = _slicedToArray(_useState3, 2),\n        isLoading = _useState4[0],\n        setIsLoading = _useState4[1];\n\n  const params = queryString.parse(props.location.search);\n  const email = params.email;\n  const token = params.token;\n  useEffect(() => {\n    if (email && token && !isLoading) {\n      setIsLoading(true);\n      props.userVerification({\n        email: email,\n        token: token\n      });\n    }\n\n    if (props.success) {\n      setIsLoading(false);\n      setIsVerified(true);\n    }\n  }, [props, email, token, isLoading]);\n\n  if (isVerified) {\n    setTimeout(() => {\n      React.createElement(ToastMessage, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 34\n        },\n        __self: this\n      });\n      return React.createElement(Redirect, {\n        push: true,\n        to: \"/Login\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35\n        },\n        __self: this\n      });\n    }, 4000);\n  }\n\n  if (isLoading) {\n    return React.createElement(Loading, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 41\n      },\n      __self: this\n    });\n  } else if (!isLoading && !isVerified) {\n    return React.createElement(\"div\", {\n      className: \"verification\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 45\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    }, \"You must send another email to verify your account.\"), React.createElement(\"button\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47\n      },\n      __self: this\n    }, \"Send email\"));\n  }\n};\n\nfunction mapStateToProps({\n  usersReducer\n}) {\n  return {\n    error: usersReducer.error,\n    isLoading: usersReducer.isLoading,\n    success: usersReducer.success\n  };\n}\n\nexport default connect(mapStateToProps, actions)(Verification);","map":{"version":3,"sources":["/Users/metabou/Desktop/chatapp/client/src/views/Verification/Verification.js"],"names":["React","useState","useEffect","queryString","Loading","ToastMessage","Redirect","connect","actions","Verification","props","isVerified","setIsVerified","isLoading","setIsLoading","params","parse","location","search","email","token","userVerification","success","setTimeout","mapStateToProps","usersReducer","error"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,WAAP,MAAwB,cAAxB;AACA,OAAOC,OAAP,MAAoB,kCAApB;AACA,OAAOC,YAAP,MAAyB,4CAAzB;AACA,SAASC,QAAT,QAAyB,cAAzB;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAO,KAAKC,OAAZ,MAAyB,aAAzB;AACA,OAAO,oBAAP;;AAEA,MAAMC,YAAY,GAAIC,KAAD,IAAW;AAAA,oBACMT,QAAQ,CAAC,KAAD,CADd;AAAA;AAAA,QACvBU,UADuB;AAAA,QACXC,aADW;;AAAA,qBAEIX,QAAQ,CAAC,KAAD,CAFZ;AAAA;AAAA,QAEvBY,SAFuB;AAAA,QAEZC,YAFY;;AAG9B,QAAMC,MAAM,GAAGZ,WAAW,CAACa,KAAZ,CAAkBN,KAAK,CAACO,QAAN,CAAeC,MAAjC,CAAf;AACA,QAAMC,KAAK,GAAGJ,MAAM,CAACI,KAArB;AACA,QAAMC,KAAK,GAAGL,MAAM,CAACK,KAArB;AAEAlB,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIiB,KAAK,IAAIC,KAAT,IAAkB,CAACP,SAAvB,EAAkC;AAChCC,MAAAA,YAAY,CAAC,IAAD,CAAZ;AACAJ,MAAAA,KAAK,CAACW,gBAAN,CAAuB;AACrBF,QAAAA,KAAK,EAAEA,KADc;AAErBC,QAAAA,KAAK,EAAEA;AAFc,OAAvB;AAID;;AAED,QAAIV,KAAK,CAACY,OAAV,EAAmB;AACjBR,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACAF,MAAAA,aAAa,CAAC,IAAD,CAAb;AACD;AACF,GAbQ,EAaN,CAACF,KAAD,EAAQS,KAAR,EAAeC,KAAf,EAAsBP,SAAtB,CAbM,CAAT;;AAeA,MAAIF,UAAJ,EAAgB;AACdY,IAAAA,UAAU,CAAC,MAAM;AACf,0BAAC,YAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA,aAAO,oBAAC,QAAD;AAAU,QAAA,IAAI,MAAd;AAAe,QAAA,EAAE,EAAC,QAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAAP;AACD,KAHS,EAGP,IAHO,CAAV;AAID;;AAED,MAAIV,SAAJ,EAAe;AACb,WACE,oBAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAGD,GAJD,MAIO,IAAI,CAACA,SAAD,IAAc,CAACF,UAAnB,EAA+B;AACpC,WACE;AAAK,MAAA,SAAS,EAAC,cAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6DADF,EAEE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAFF,CADF;AAMD;AACF,CAzCD;;AA2CA,SAASa,eAAT,CAAyB;AAAEC,EAAAA;AAAF,CAAzB,EAA2C;AACzC,SAAO;AACLC,IAAAA,KAAK,EAAED,YAAY,CAACC,KADf;AAELb,IAAAA,SAAS,EAAEY,YAAY,CAACZ,SAFnB;AAGLS,IAAAA,OAAO,EAAEG,YAAY,CAACH;AAHjB,GAAP;AAKD;;AAED,eAAef,OAAO,CAACiB,eAAD,EAAkBhB,OAAlB,CAAP,CAAkCC,YAAlC,CAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport queryString from 'query-string';\nimport Loading from '../../components/Loading/Loading';\nimport ToastMessage from '../../components/ToastMessage/ToastMessage';\nimport { Redirect } from 'react-router';\nimport { connect } from 'react-redux';\nimport * as actions from '../../redux';\nimport './Verification.css';\n\nconst Verification = (props) => {\n  const [isVerified, setIsVerified] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const params = queryString.parse(props.location.search);\n  const email = params.email;\n  const token = params.token;\n\n  useEffect(() => {\n    if (email && token && !isLoading) {\n      setIsLoading(true);\n      props.userVerification({\n        email: email,\n        token: token\n      });\n    }\n\n    if (props.success) {\n      setIsLoading(false);\n      setIsVerified(true);\n    }\n  }, [props, email, token, isLoading]);\n\n  if (isVerified) {\n    setTimeout(() => {\n      <ToastMessage />\n      return <Redirect push to=\"/Login\" />;\n    }, 4000);\n  }\n\n  if (isLoading) {\n    return (\n      <Loading />\n    );\n  } else if (!isLoading && !isVerified) {\n    return (\n      <div className=\"verification\">\n        <div>You must send another email to verify your account.</div>\n        <button>Send email</button>\n      </div>\n    );\n  }\n};\n\nfunction mapStateToProps({ usersReducer }) {\n  return {\n    error: usersReducer.error,\n    isLoading: usersReducer.isLoading,\n    success: usersReducer.success\n  };\n}\n\nexport default connect(mapStateToProps, actions)(Verification);"]},"metadata":{},"sourceType":"module"}