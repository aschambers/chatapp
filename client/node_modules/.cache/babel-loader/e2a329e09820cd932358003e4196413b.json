{"ast":null,"code":"/* jshint node: true */\n'use strict';\n/**\n  ## cog/logger\n\n  ```js\n  var logger = require('cog/logger');\n  ```\n\n  Simple browser logging offering similar functionality to the\n  [debug](https://github.com/visionmedia/debug) module.\n\n  ### Usage\n\n  Create your self a new logging instance and give it a name:\n\n  ```js\n  var debug = logger('phil');\n  ```\n\n  Now do some debugging:\n\n  ```js\n  debug('hello');\n  ```\n\n  At this stage, no log output will be generated because your logger is\n  currently disabled.  Enable it:\n\n  ```js\n  logger.enable('phil');\n  ```\n\n  Now do some more logger:\n\n  ```js\n  debug('Oh this is so much nicer :)');\n  // --> phil: Oh this is some much nicer :)\n  ```\n\n  ### Reference\n**/\n\nvar active = [];\nvar unleashListeners = [];\nvar targets = [console];\n/**\n  #### logger(name)\n\n  Create a new logging instance.\n**/\n\nvar logger = module.exports = function (name) {\n  // initial enabled check\n  var enabled = checkActive();\n\n  function checkActive() {\n    return enabled = active.indexOf('*') >= 0 || active.indexOf(name) >= 0;\n  } // register the check active with the listeners array\n\n\n  unleashListeners[unleashListeners.length] = checkActive; // return the actual logging function\n\n  return function () {\n    var args = [].slice.call(arguments); // if we have a string message\n\n    if (typeof args[0] == 'string' || args[0] instanceof String) {\n      args[0] = name + ': ' + args[0];\n    } // if not enabled, bail\n\n\n    if (!enabled) {\n      return;\n    } // log\n\n\n    targets.forEach(function (target) {\n      target.log.apply(target, args);\n    });\n  };\n};\n/**\n  #### logger.reset()\n\n  Reset logging (remove the default console logger, flag all loggers as\n  inactive, etc, etc.\n**/\n\n\nlogger.reset = function () {\n  // reset targets and active states\n  targets = [];\n  active = [];\n  return logger.enable();\n};\n/**\n  #### logger.to(target)\n\n  Add a logging target.  The logger must have a `log` method attached.\n\n**/\n\n\nlogger.to = function (target) {\n  targets = targets.concat(target || []);\n  return logger;\n};\n/**\n  #### logger.enable(names*)\n\n  Enable logging via the named logging instances.  To enable logging via all\n  instances, you can pass a wildcard:\n\n  ```js\n  logger.enable('*');\n  ```\n\n  __TODO:__ wildcard enablers\n**/\n\n\nlogger.enable = function () {\n  // update the active\n  active = active.concat([].slice.call(arguments)); // trigger the unleash listeners\n\n  unleashListeners.forEach(function (listener) {\n    listener();\n  });\n  return logger;\n};","map":null,"metadata":{},"sourceType":"script"}