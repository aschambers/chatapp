{"ast":null,"code":"import _slicedToArray from \"/Users/metabou/Desktop/chatapp/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport { useState, useEffect } from \"react\";\n\nconst useDrag = ({\n  id,\n  effect,\n  ref,\n  onDragStart,\n  onDragOver,\n  onDragEnd\n}) => {\n  const _useState = useState(\"draggable\"),\n        _useState2 = _slicedToArray(_useState, 2),\n        dragState = _useState2[0],\n        updateDragState = _useState2[1];\n\n  const dragStartCb = ev => {\n    updateDragState(\"dragStart\");\n    ev.dataTransfer.dropEffect = effect;\n    ev.dataTransfer.setData(\"source\", id);\n    onDragStart && onDragStart();\n  };\n\n  const dragOverCb = ev => {\n    updateDragState(\"dragging\");\n    onDragOver && onDragOver();\n  };\n\n  const dragEndCb = ev => {\n    updateDragState(\"draggable\");\n    onDragEnd && onDragEnd();\n  };\n\n  useEffect(() => {\n    const elem = ref.current;\n\n    if (elem) {\n      elem.setAttribute(\"draggable\", true);\n      elem.addEventListener(\"dragstart\", dragStartCb);\n      elem.addEventListener(\"dragover\", dragOverCb);\n      elem.addEventListener(\"dragend\", dragEndCb);\n      return () => {\n        elem.removeEventListener(\"dragstart\", dragStartCb);\n        elem.removeEventListener(\"dragover\", dragOverCb);\n        elem.removeEventListener(\"dragend\", dragEndCb);\n      };\n    }\n  }, [dragStartCb, dragEndCb, dragOverCb]);\n  return {\n    dragState: dragState\n  };\n};\n\nexport default useDrag;","map":{"version":3,"sources":["/Users/metabou/Desktop/chatapp/client/src/hooks/useDrag.js"],"names":["useState","useEffect","useDrag","id","effect","ref","onDragStart","onDragOver","onDragEnd","dragState","updateDragState","dragStartCb","ev","dataTransfer","dropEffect","setData","dragOverCb","dragEndCb","elem","current","setAttribute","addEventListener","removeEventListener"],"mappings":";AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;;AAEA,MAAMC,OAAO,GAAG,CAAC;AAAEC,EAAAA,EAAF;AAAMC,EAAAA,MAAN;AAAcC,EAAAA,GAAd;AAAmBC,EAAAA,WAAnB;AAAgCC,EAAAA,UAAhC;AAA4CC,EAAAA;AAA5C,CAAD,KAA6D;AAAA,oBACtCR,QAAQ,CAAC,WAAD,CAD8B;AAAA;AAAA,QACpES,SADoE;AAAA,QACzDC,eADyD;;AAE3E,QAAMC,WAAW,GAAGC,EAAE,IAAI;AACxBF,IAAAA,eAAe,CAAC,WAAD,CAAf;AACAE,IAAAA,EAAE,CAACC,YAAH,CAAgBC,UAAhB,GAA6BV,MAA7B;AACAQ,IAAAA,EAAE,CAACC,YAAH,CAAgBE,OAAhB,CAAwB,QAAxB,EAAkCZ,EAAlC;AACAG,IAAAA,WAAW,IAAIA,WAAW,EAA1B;AACD,GALD;;AAMA,QAAMU,UAAU,GAAGJ,EAAE,IAAI;AACvBF,IAAAA,eAAe,CAAC,UAAD,CAAf;AACAH,IAAAA,UAAU,IAAIA,UAAU,EAAxB;AACD,GAHD;;AAKA,QAAMU,SAAS,GAAGL,EAAE,IAAI;AACtBF,IAAAA,eAAe,CAAC,WAAD,CAAf;AACAF,IAAAA,SAAS,IAAIA,SAAS,EAAtB;AACD,GAHD;;AAIAP,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMiB,IAAI,GAAGb,GAAG,CAACc,OAAjB;;AACA,QAAID,IAAJ,EAAU;AACRA,MAAAA,IAAI,CAACE,YAAL,CAAkB,WAAlB,EAA+B,IAA/B;AACAF,MAAAA,IAAI,CAACG,gBAAL,CAAsB,WAAtB,EAAmCV,WAAnC;AACAO,MAAAA,IAAI,CAACG,gBAAL,CAAsB,UAAtB,EAAkCL,UAAlC;AACAE,MAAAA,IAAI,CAACG,gBAAL,CAAsB,SAAtB,EAAiCJ,SAAjC;AACA,aAAO,MAAM;AACXC,QAAAA,IAAI,CAACI,mBAAL,CAAyB,WAAzB,EAAsCX,WAAtC;AACAO,QAAAA,IAAI,CAACI,mBAAL,CAAyB,UAAzB,EAAqCN,UAArC;AACAE,QAAAA,IAAI,CAACI,mBAAL,CAAyB,SAAzB,EAAoCL,SAApC;AACD,OAJD;AAKD;AACF,GAbQ,EAaN,CAACN,WAAD,EAAcM,SAAd,EAAyBD,UAAzB,CAbM,CAAT;AAcA,SAAO;AACLP,IAAAA,SAAS,EAAEA;AADN,GAAP;AAGD,CAlCD;;AAoCA,eAAeP,OAAf","sourcesContent":["import { useState, useEffect } from \"react\";\n\nconst useDrag = ({ id, effect, ref, onDragStart, onDragOver, onDragEnd }) => {\n  const [dragState, updateDragState] = useState(\"draggable\");\n  const dragStartCb = ev => {\n    updateDragState(\"dragStart\");\n    ev.dataTransfer.dropEffect = effect;\n    ev.dataTransfer.setData(\"source\", id);\n    onDragStart && onDragStart();\n  };\n  const dragOverCb = ev => {\n    updateDragState(\"dragging\");\n    onDragOver && onDragOver();\n  };\n\n  const dragEndCb = ev => {\n    updateDragState(\"draggable\");\n    onDragEnd && onDragEnd();\n  };\n  useEffect(() => {\n    const elem = ref.current;\n    if (elem) {\n      elem.setAttribute(\"draggable\", true);\n      elem.addEventListener(\"dragstart\", dragStartCb);\n      elem.addEventListener(\"dragover\", dragOverCb);\n      elem.addEventListener(\"dragend\", dragEndCb);\n      return () => {\n        elem.removeEventListener(\"dragstart\", dragStartCb);\n        elem.removeEventListener(\"dragover\", dragOverCb);\n        elem.removeEventListener(\"dragend\", dragEndCb);\n      };\n    }\n  }, [dragStartCb, dragEndCb, dragOverCb]);\n  return {\n    dragState: dragState\n  };\n};\n\nexport default useDrag;\n"]},"metadata":{},"sourceType":"module"}