{"ast":null,"code":"/* jshint node: true */\n'use strict';\n/**\n  ## cog/throttle\n\n  ```js\n  var throttle = require('cog/throttle');\n  ```\n\n  ### throttle(fn, delay, opts)\n\n  A cherry-pickable throttle function.  Used to throttle `fn` to ensure\n  that it can be called at most once every `delay` milliseconds.  Will\n  fire first event immediately, ensuring the next event fired will occur\n  at least `delay` milliseconds after the first, and so on.\n\n**/\n\nmodule.exports = function (fn, delay, opts) {\n  var lastExec = (opts || {}).leading !== false ? 0 : Date.now();\n  var trailing = (opts || {}).trailing;\n  var timer;\n  var queuedArgs;\n  var queuedScope; // trailing defaults to true\n\n  trailing = trailing || trailing === undefined;\n\n  function invokeDefered() {\n    fn.apply(queuedScope, queuedArgs || []);\n    lastExec = Date.now();\n  }\n\n  return function () {\n    var tick = Date.now();\n    var elapsed = tick - lastExec; // always clear the defered timer\n\n    clearTimeout(timer);\n\n    if (elapsed < delay) {\n      queuedArgs = [].slice.call(arguments, 0);\n      queuedScope = this;\n      return trailing && (timer = setTimeout(invokeDefered, delay - elapsed));\n    } // call the function\n\n\n    lastExec = tick;\n    fn.apply(this, arguments);\n  };\n};","map":null,"metadata":{},"sourceType":"script"}