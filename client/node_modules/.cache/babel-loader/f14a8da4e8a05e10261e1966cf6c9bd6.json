{"ast":null,"code":"import _slicedToArray from \"/Users/metabou/Desktop/chatapp/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/metabou/Desktop/chatapp/client/src/views/Invite/Invite.js\";\nimport React, { useState, useEffect } from 'react';\nimport queryString from 'query-string';\nimport Loading from '../../components/Loading/Loading';\nimport ToastMessage from '../../components/ToastMessage/ToastMessage';\nimport { toast } from 'react-toastify';\nimport { Redirect } from 'react-router';\nimport { connect } from 'react-redux';\nimport * as actions from '../../redux';\nimport Navigation from '../../components/Navigation/Navigation';\nimport './Invite.css';\n\nconst Invite = props => {\n  const _useState = useState(false),\n        _useState2 = _slicedToArray(_useState, 2),\n        isLoading = _useState2[0],\n        setIsLoading = _useState2[1];\n\n  const _useState3 = useState(false),\n        _useState4 = _slicedToArray(_useState3, 2),\n        isRedirectSuccess = _useState4[0],\n        setIsRedirectSuccess = _useState4[1];\n\n  const _useState5 = useState(false),\n        _useState6 = _slicedToArray(_useState5, 2),\n        isRedirectFail = _useState6[0],\n        setIsRedirectFail = _useState6[1];\n\n  const _useState7 = useState(\"\"),\n        _useState8 = _slicedToArray(_useState7, 2),\n        emailAddress = _useState8[0],\n        setEmailAddress = _useState8[1];\n\n  const params = queryString.parse(props.location.search);\n  const email = params.email;\n  const token = params.token;\n  useEffect(() => {\n    if (!email && !token && !isRedirectFail) {\n      setIsLoading(false);\n    }\n\n    if (email && token && !isLoading) {\n      setIsLoading(true);\n      props.inviteVerification({\n        email: email,\n        token: token\n      });\n    }\n\n    if (props.success && !isRedirectSuccess) {\n      toast.success(\"You have been added to the server successfully, please login!\", {\n        position: toast.POSITION.BOTTOM_CENTER\n      });\n      setIsLoading(false);\n      setTimeout(() => {\n        setIsRedirectSuccess(true);\n      }, 3000);\n    }\n\n    if (props.error && !isRedirectFail) {\n      toast.error(\"Invite has expired or is no longer valid!\", {\n        position: toast.POSITION.BOTTOM_CENTER\n      });\n      setIsLoading(false);\n      setTimeout(() => {\n        setIsRedirectFail(true);\n      }, 3000);\n    }\n\n    props.resetInviteValues();\n  }, [props, email, token, isLoading, isRedirectSuccess, isRedirectFail]);\n\n  if (isRedirectSuccess || isRedirectFail) {\n    return React.createElement(Redirect, {\n      push: true,\n      to: \"/Login\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 57\n      },\n      __self: this\n    });\n  }\n\n  if (isLoading) {\n    return React.createElement(Loading, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 62\n      },\n      __self: this\n    });\n  }\n\n  const acceptInvite = () => {\n    props.inviteVerification({\n      email: emailAddress,\n      token: token\n    });\n  };\n\n  return React.createElement(\"div\", {\n    className: \"invitepage\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74\n    },\n    __self: this\n  }, React.createElement(Navigation, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 75\n    },\n    __self: this\n  }), React.createElement(ToastMessage, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 76\n    },\n    __self: this\n  }), React.createElement(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }, \"Please enter your email address to accept the invitation.\"), React.createElement(\"input\", {\n    value: emailAddress,\n    onChange: event => {\n      setEmailAddress(event.target.value);\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78\n    },\n    __self: this\n  }), React.createElement(\"button\", {\n    onClick: () => {\n      acceptInvite();\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79\n    },\n    __self: this\n  }, \"Accept Invite\"));\n};\n\nfunction mapStateToProps({\n  invitesReducer\n}) {\n  return {\n    error: invitesReducer.error,\n    isLoading: invitesReducer.isLoading,\n    success: invitesReducer.success\n  };\n}\n\nexport default connect(mapStateToProps, actions)(Invite);","map":{"version":3,"sources":["/Users/metabou/Desktop/chatapp/client/src/views/Invite/Invite.js"],"names":["React","useState","useEffect","queryString","Loading","ToastMessage","toast","Redirect","connect","actions","Navigation","Invite","props","isLoading","setIsLoading","isRedirectSuccess","setIsRedirectSuccess","isRedirectFail","setIsRedirectFail","emailAddress","setEmailAddress","params","parse","location","search","email","token","inviteVerification","success","position","POSITION","BOTTOM_CENTER","setTimeout","error","resetInviteValues","acceptInvite","event","target","value","mapStateToProps","invitesReducer"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport queryString from 'query-string';\nimport Loading from '../../components/Loading/Loading';\nimport ToastMessage from '../../components/ToastMessage/ToastMessage';\nimport { toast } from 'react-toastify';\nimport { Redirect } from 'react-router';\nimport { connect } from 'react-redux';\nimport * as actions from '../../redux';\nimport Navigation from '../../components/Navigation/Navigation';\nimport './Invite.css';\n\nconst Invite = (props) => {\n  const [isLoading, setIsLoading] = useState(false);\n  const [isRedirectSuccess, setIsRedirectSuccess] = useState(false);\n  const [isRedirectFail, setIsRedirectFail] = useState(false);\n  const [emailAddress, setEmailAddress] = useState(\"\");\n  const params = queryString.parse(props.location.search);\n  const email = params.email;\n  const token = params.token;\n\n  useEffect(() => {\n    if ((!email && !token) && !isRedirectFail) {\n      setIsLoading(false);\n    }\n\n    if (email && token && !isLoading) {\n      setIsLoading(true);\n      props.inviteVerification({\n        email: email,\n        token: token\n      });\n    }\n\n    if (props.success && !isRedirectSuccess) {\n      toast.success(\"You have been added to the server successfully, please login!\", {\n        position: toast.POSITION.BOTTOM_CENTER\n      });\n      setIsLoading(false);\n      setTimeout(() => {\n        setIsRedirectSuccess(true);\n      }, 3000);\n    }\n\n    if (props.error && !isRedirectFail) {\n      toast.error(\"Invite has expired or is no longer valid!\", {\n        position: toast.POSITION.BOTTOM_CENTER\n      });\n      setIsLoading(false);\n      setTimeout(() => {\n        setIsRedirectFail(true);\n      }, 3000);\n    }\n    props.resetInviteValues();\n  }, [props, email, token, isLoading, isRedirectSuccess, isRedirectFail]);\n\n  if (isRedirectSuccess || isRedirectFail) {\n    return <Redirect push to=\"/Login\" />;\n  }\n\n  if (isLoading) {\n    return (\n      <Loading />\n    );\n  }\n\n  const acceptInvite = () => {\n    props.inviteVerification({\n      email: emailAddress,\n      token: token\n    });\n  }\n\n  return (\n    <div className=\"invitepage\">\n      <Navigation />\n      <ToastMessage />\n      <p>Please enter your email address to accept the invitation.</p>\n      <input value={emailAddress} onChange={(event) => { setEmailAddress(event.target.value); }} />\n      <button onClick={() => { acceptInvite(); }}>Accept Invite</button>\n    </div>\n  );\n};\n\nfunction mapStateToProps({ invitesReducer }) {\n  return {\n    error: invitesReducer.error,\n    isLoading: invitesReducer.isLoading,\n    success: invitesReducer.success\n  };\n}\n\nexport default connect(mapStateToProps, actions)(Invite);"]},"metadata":{},"sourceType":"module"}