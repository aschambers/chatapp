{"ast":null,"code":"import _slicedToArray from \"/Users/metabou/Desktop/chatapp/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/metabou/Desktop/chatapp/client/src/components/Login/Login.js\";\nimport React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport * as actions from '../../redux';\nimport { Redirect } from 'react-router';\nimport { toast } from 'react-toastify';\nimport ToastMessage from '../../components/ToastMessage/ToastMessage';\nimport ResetPassword from '../../components/ResetPassword/ResetPassword';\nimport './Login.css';\n\nconst Login = props => {\n  const _useState = useState(''),\n        _useState2 = _slicedToArray(_useState, 2),\n        email = _useState2[0],\n        setEmail = _useState2[1];\n\n  const _useState3 = useState(''),\n        _useState4 = _slicedToArray(_useState3, 2),\n        password = _useState4[0],\n        setPassword = _useState4[1];\n\n  const _useState5 = useState(false),\n        _useState6 = _slicedToArray(_useState5, 2),\n        notVerified = _useState6[0],\n        setNotVerified = _useState6[1];\n\n  const _useState7 = useState(false),\n        _useState8 = _slicedToArray(_useState7, 2),\n        isRedirect = _useState8[0],\n        setIsRedirect = _useState8[1];\n\n  const _useState9 = useState(false),\n        _useState10 = _slicedToArray(_useState9, 2),\n        resetModal = _useState10[0],\n        setResetModal = _useState10[1];\n\n  const _useState11 = useState(''),\n        _useState12 = _slicedToArray(_useState11, 2),\n        resetEmail = _useState12[0],\n        setResetEmail = _useState12[1];\n\n  useEffect(() => {\n    if (props.error) {\n      toast.dismiss();\n      toast.error('Please check your username and password, and try again!', {\n        position: 'bottom-center'\n      });\n    }\n\n    if (props.forgotPassError) {\n      toast.dismiss();\n      toast.error('Error Requesting Password!', {\n        position: toast.POSITION.TOP_CENTER\n      });\n    }\n\n    if (props.forgotPassSuccess) {\n      setResetModal(false);\n      setResetEmail('');\n      toast.dismiss();\n      toast.success('Success, please check your email for instructions!', {\n        position: toast.POSITION.TOP_CENTER\n      });\n    }\n\n    if (props.notVerified && !notVerified) {\n      setNotVerified(true);\n    }\n\n    if (props.error) {\n      toast.dismiss();\n      toast.error('Please check your email and password, and try again!', {\n        position: 'bottom-center'\n      });\n    }\n\n    props.resetUserValues();\n  }, [props, notVerified]);\n\n  const closeToast = () => {\n    setIsRedirect(true);\n  };\n\n  if (notVerified && !isRedirect) {\n    toast.error('Your account has not been verified!', {\n      position: 'bottom-center'\n    });\n    setTimeout(() => {\n      closeToast();\n    }, 3000);\n  }\n\n  if (isRedirect) {\n    return React.createElement(Redirect, {\n      push: true,\n      to: \"/Verification\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 63\n      },\n      __self: this\n    });\n  }\n\n  if (props.success) {\n    return React.createElement(Redirect, {\n      push: true,\n      to: \"/Dashboard\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    });\n  }\n\n  const userLogin = async () => {\n    const params = {\n      email: email,\n      password: password\n    };\n\n    if (!email && !password) {\n      toast.error('Email and password are required.', {\n        position: 'bottom-center'\n      });\n    } else {\n      props.userLogin(params);\n    }\n  };\n\n  const forgotPassword = () => {\n    setResetModal(true);\n  };\n\n  const resetModalDefault = () => {\n    setResetModal(false);\n    setResetEmail('');\n  };\n\n  const resetPassword = () => {\n    props.resetPassword({\n      email: resetEmail\n    });\n  };\n\n  return React.createElement(\"div\", {\n    className: \"authcontainerlogin\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 98\n    },\n    __self: this\n  }, React.createElement(ToastMessage, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  }), React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 100\n    },\n    __self: this\n  }, \"Login to chatter!\"), React.createElement(\"div\", {\n    className: \"authcontainerlogin__section\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 101\n    },\n    __self: this\n  }, React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102\n    },\n    __self: this\n  }, \"Email\"), React.createElement(\"input\", {\n    onChange: event => setEmail(event.target.value),\n    value: email,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    },\n    __self: this\n  }), React.createElement(\"span\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 104\n    },\n    __self: this\n  }, \"Password\"), React.createElement(\"input\", {\n    onChange: event => setPassword(event.target.value),\n    value: password,\n    type: \"password\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105\n    },\n    __self: this\n  }), React.createElement(\"p\", {\n    onClick: forgotPassword,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106\n    },\n    __self: this\n  }, \"Forgot your password?\"), React.createElement(\"button\", {\n    onClick: userLogin,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 107\n    },\n    __self: this\n  }, \"Login\"), React.createElement(Link, {\n    to: \"/Signup\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108\n    },\n    __self: this\n  }, React.createElement(\"p\", {\n    className: \"register\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108\n    },\n    __self: this\n  }, \"Need an account? Register.\"))), resetModal ? React.createElement(ResetPassword, {\n    resetEmail: resetEmail,\n    setResetEmail: value => {\n      setResetEmail(value);\n    },\n    setModalOpen: () => {\n      resetModalDefault();\n    },\n    resetPassword: () => {\n      resetPassword();\n    },\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 112\n    },\n    __self: this\n  }) : null);\n};\n\nfunction mapStateToProps({\n  usersReducer\n}) {\n  return {\n    error: usersReducer.error,\n    isLoading: usersReducer.isLoading,\n    success: usersReducer.success,\n    notVerified: usersReducer.notVerified,\n    forgotPassError: usersReducer.forgotPassError,\n    forgotPassSuccess: usersReducer.forgotPassSuccess\n  };\n}\n\nexport default connect(mapStateToProps, actions)(Login);","map":{"version":3,"sources":["/Users/metabou/Desktop/chatapp/client/src/components/Login/Login.js"],"names":["React","useState","useEffect","Link","connect","actions","Redirect","toast","ToastMessage","ResetPassword","Login","props","email","setEmail","password","setPassword","notVerified","setNotVerified","isRedirect","setIsRedirect","resetModal","setResetModal","resetEmail","setResetEmail","error","dismiss","position","forgotPassError","POSITION","TOP_CENTER","forgotPassSuccess","success","resetUserValues","closeToast","setTimeout","userLogin","params","forgotPassword","resetModalDefault","resetPassword","event","target","value","mapStateToProps","usersReducer","isLoading"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport * as actions from '../../redux';\nimport { Redirect } from 'react-router';\nimport { toast } from 'react-toastify';\nimport ToastMessage from '../../components/ToastMessage/ToastMessage';\nimport ResetPassword from '../../components/ResetPassword/ResetPassword';\nimport './Login.css';\n\nconst Login = (props) => {\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [notVerified, setNotVerified] = useState(false);\n  const [isRedirect, setIsRedirect] = useState(false);\n  const [resetModal, setResetModal] = useState(false);\n  const [resetEmail, setResetEmail] = useState('');\n\n  useEffect(() => {\n    if (props.error) {\n      toast.dismiss();\n      toast.error('Please check your username and password, and try again!', { position: 'bottom-center' });\n    }\n\n    if (props.forgotPassError) {\n      toast.dismiss();\n      toast.error('Error Requesting Password!', { position: toast.POSITION.TOP_CENTER });\n    }\n\n    if (props.forgotPassSuccess) {\n      setResetModal(false);\n      setResetEmail('');\n      toast.dismiss();\n      toast.success('Success, please check your email for instructions!', { position: toast.POSITION.TOP_CENTER });\n    }\n\n    if (props.notVerified && !notVerified) {\n      setNotVerified(true);\n    }\n\n    if (props.error) {\n      toast.dismiss();\n      toast.error('Please check your email and password, and try again!', { position: 'bottom-center' });\n    }\n    props.resetUserValues();\n  }, [props, notVerified]);\n\n  const closeToast = () => {\n    setIsRedirect(true);\n  }\n\n  if (notVerified && !isRedirect) {\n    toast.error('Your account has not been verified!', {\n      position: 'bottom-center'\n    });\n\n    setTimeout(() => {\n      closeToast();\n    }, 3000);\n  }\n\n  if (isRedirect) {\n    return <Redirect push to=\"/Verification\" />;\n  }\n\n  if (props.success) {\n    return <Redirect push to=\"/Dashboard\" />;\n  }\n\n  const userLogin = async() => {\n    const params = {\n      email: email,\n      password: password\n    }\n    if(!email && !password) {\n      toast.error('Email and password are required.', { position: 'bottom-center' });\n    } else {\n      props.userLogin(params);\n    }\n  }\n\n  const forgotPassword = () => {\n    setResetModal(true);\n  }\n\n  const resetModalDefault = () => {\n    setResetModal(false);\n    setResetEmail('');\n  }\n\n  const resetPassword = () => {\n    props.resetPassword({\n      email: resetEmail\n    });\n  }\n\n  return (\n    <div className=\"authcontainerlogin\">\n      <ToastMessage />\n      <span>Login to chatter!</span>\n      <div className=\"authcontainerlogin__section\">\n        <span>Email</span>\n        <input onChange={event => setEmail(event.target.value)} value={email} />\n        <span>Password</span>\n        <input onChange={event => setPassword(event.target.value)} value={password} type=\"password\" />\n        <p onClick={forgotPassword}>Forgot your password?</p>\n        <button onClick={userLogin}>Login</button>\n        <Link to=\"/Signup\"><p className=\"register\">Need an account? Register.</p></Link>\n      </div>\n\n      {resetModal ?\n        <ResetPassword\n          resetEmail={resetEmail}\n          setResetEmail={(value) => { setResetEmail(value); }}\n          setModalOpen={() => { resetModalDefault(); }}\n          resetPassword={() => { resetPassword(); }}\n        />\n      : null}\n    </div>\n  );\n};\n\nfunction mapStateToProps({ usersReducer }) {\n  return {\n    error: usersReducer.error,\n    isLoading: usersReducer.isLoading,\n    success: usersReducer.success,\n    notVerified: usersReducer.notVerified,\n    forgotPassError: usersReducer.forgotPassError,\n    forgotPassSuccess: usersReducer.forgotPassSuccess,\n  }\n}\n\nexport default connect(mapStateToProps, actions)(Login);"]},"metadata":{},"sourceType":"module"}