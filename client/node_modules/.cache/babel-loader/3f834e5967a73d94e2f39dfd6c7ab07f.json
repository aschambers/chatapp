{"ast":null,"code":"var _jsxFileName = \"/Users/metabou/Desktop/ChatterSanctum/chatapp/client/src/components/ChatroomFriend/ChatroomFriend.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport * as actions from '../../redux';\nimport { ROOT_URL } from '../../config/networkSettings';\nimport io from \"socket.io-client\";\nimport Moment from 'react-moment';\nimport 'moment-timezone';\nimport './ChatroomFriend.css';\n\nclass ChatroomFriend extends Component {\n  constructor(props) {\n    super(props);\n\n    this.sendMessage = event => {\n      if (event) {\n        event.preventDefault();\n        const data = {\n          username: this.props.username,\n          message: this.state.message,\n          userId: this.props.userId,\n          friendId: this.props.friendId !== null ? this.props.friendId : this.props.userId,\n          room: \"\".concat(ROOT_URL, \"/friends/\").concat(this.props.groupdId),\n          previousRoom: \"\".concat(ROOT_URL, \"/friends/\").concat(this.state.groupId)\n        };\n\n        if (data.userId === data.friendId) {\n          this.socket.emit('SEND_PERSONAL_MESSAGE', data);\n        } else if (data.userId !== data.friendId) {\n          this.socket.emit('SEND_PRIVATE_MESSAGE', data);\n        }\n\n        this.setState({\n          message: \"\"\n        });\n      }\n    };\n\n    this.state = {\n      message: \"\",\n      messages: [],\n      socketId: \"\",\n      currentSocket: \"\",\n      userId: null,\n      friendId: null,\n      groupId: null,\n      room: null,\n      previousRoom: null\n    };\n  }\n\n  async componentDidMount() {\n    this.socket = io(ROOT_URL);\n    this.socket.on('connect', () => {\n      this.setState({\n        socketId: this.socket.id,\n        userId: this.props.userId,\n        friendId: this.props.friendId,\n        groupId: this.props.groupId\n      });\n    });\n    const data = {\n      userId: this.props.userId,\n      friendId: this.props.friendId !== null ? this.props.friendId : this.props.userId,\n      room: \"\".concat(ROOT_URL, \"/friends/\").concat(this.props.groupdId),\n      previousRoom: \"\".concat(ROOT_URL, \"/friends/\").concat(this.props.groupdId)\n    };\n\n    if (data.userId === data.friendId) {\n      this.socket.emit('GET_PERSONAL_MESSAGES', data);\n    } else if (data.userId !== data.friendId) {\n      this.socket.emit('GET_PRIVATE_MESSAGES', data);\n    }\n\n    this.socket.on('RECEIVE_PRIVATE_MESSAGES', data => {\n      // scroll to latest message after rendering messages in firefox\n      if (navigator.userAgent.search(\"Firefox\") > -1) {\n        this.setState({\n          messages: data.reverse()\n        }, () => {\n          if (data && data.length > 0) {\n            const element = \"message\" + (this.state.messages.length - 1);\n\n            if (document.getElementById(element)) {\n              document.getElementById(element).scrollIntoView();\n            }\n          }\n        });\n      } else if (navigator.userAgent.search(\"Firefox\") < 0) {\n        this.setState({\n          messages: data\n        });\n      }\n    });\n    this.socket.on('RECEIVE_PERSONAL_MESSAGES', data => {\n      // scroll to latest message after rendering messages in firefox\n      if (navigator.userAgent.search(\"Firefox\") > -1) {\n        this.setState({\n          messages: data.reverse()\n        }, () => {\n          if (data && data.length > 0) {\n            const element = \"message\" + (this.state.messages.length - 1);\n\n            if (document.getElementById(element)) {\n              document.getElementById(element).scrollIntoView();\n            }\n          }\n        });\n      } else if (navigator.userAgent.search(\"Firefox\") < 0) {\n        this.setState({\n          messages: data\n        });\n      }\n    });\n  }\n\n  async componentWillReceiveProps(nextProps) {\n    if (nextProps.groupId !== this.state.groupId) {\n      this.setState({\n        userId: nextProps.userId,\n        friendId: nextProps.friendId,\n        groupId: nextProps.groupId,\n        room: \"\".concat(ROOT_URL, \"/friends/\").concat(this.props.groupdId),\n        previousRoom: \"\".concat(ROOT_URL, \"/friends/\").concat(this.state.groupId)\n      });\n      const data = {\n        userId: nextProps.userId,\n        friendId: nextProps.friendId,\n        room: \"\".concat(ROOT_URL, \"/friends/\").concat(this.props.groupdId),\n        previousRoom: \"\".concat(ROOT_URL, \"/friends/\").concat(this.state.groupId)\n      };\n\n      if (data.userId === data.friendId) {\n        this.socket.emit('GET_PERSONAL_MESSAGES', data);\n      } else if (data.userId !== data.friendId) {\n        this.socket.emit('GET_PRIVATE_MESSAGES', data);\n      }\n    }\n  }\n\n  componentWillUnmount() {\n    this.socket.emit('LEAVE_CHATROOMS', {\n      room: this.state.room\n    });\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"chatroom\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 130\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      className: \"privatechatarea\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 131\n      },\n      __self: this\n    }, React.createElement(\"div\", {\n      id: \"privatechatareamessages\",\n      className: \"privatechatarea-messages\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }, this.state.messages && this.state.messages.length > 0 ? this.state.messages.map((item, index) => {\n      return React.createElement(\"div\", {\n        id: \"message\" + index,\n        key: index,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        className: \"privatechatarea-messages-user\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136\n        },\n        __self: this\n      }, item.username), \" \", React.createElement(Moment, {\n        format: \"MM/DD/YYYY\",\n        className: \"privatechatarea-messages-time\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136\n        },\n        __self: this\n      }, item.createdAt))), React.createElement(\"p\", {\n        className: \"privatechatarea-messages-message\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137\n        },\n        __self: this\n      }, item.message));\n    }) : null), React.createElement(\"div\", {\n      className: \"privatechatarea-container\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 142\n      },\n      __self: this\n    }, React.createElement(\"input\", {\n      placeholder: \"Send a message!\",\n      type: \"text\",\n      onChange: event => {\n        this.setState({\n          message: event.target.value\n        });\n      },\n      value: this.state.message,\n      onKeyDown: event => {\n        event.keyCode === 13 && event.shiftKey === false ? this.sendMessage(event) : this.sendMessage(null);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 143\n      },\n      __self: this\n    }))));\n  }\n\n}\n\nfunction mapStateToProps({\n  usersReducer\n}) {\n  return {\n    error: usersReducer.error,\n    isLoading: usersReducer.isLoading,\n    success: usersReducer.success,\n    user: usersReducer.user,\n    users: usersReducer.users\n  };\n}\n\nexport default connect(mapStateToProps, actions)(ChatroomFriend);","map":{"version":3,"sources":["/Users/metabou/Desktop/ChatterSanctum/chatapp/client/src/components/ChatroomFriend/ChatroomFriend.js"],"names":["React","Component","connect","actions","ROOT_URL","io","Moment","ChatroomFriend","constructor","props","sendMessage","event","preventDefault","data","username","message","state","userId","friendId","room","groupdId","previousRoom","groupId","socket","emit","setState","messages","socketId","currentSocket","componentDidMount","on","id","navigator","userAgent","search","reverse","length","element","document","getElementById","scrollIntoView","componentWillReceiveProps","nextProps","componentWillUnmount","render","map","item","index","createdAt","target","value","keyCode","shiftKey","mapStateToProps","usersReducer","error","isLoading","success","user","users"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport * as actions from '../../redux';\nimport { ROOT_URL } from '../../config/networkSettings';\nimport io from \"socket.io-client\";\nimport Moment from 'react-moment';\nimport 'moment-timezone';\nimport './ChatroomFriend.css';\n\nclass ChatroomFriend extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      message: \"\",\n      messages: [],\n      socketId: \"\",\n      currentSocket: \"\",\n      userId: null,\n      friendId: null,\n      groupId: null,\n      room: null,\n      previousRoom: null\n    }\n  }\n\n  async componentDidMount() {\n    this.socket = io(ROOT_URL);\n\n    this.socket.on('connect', () => {\n      this.setState({ socketId: this.socket.id, userId: this.props.userId, friendId: this.props.friendId, groupId: this.props.groupId });\n    });\n\n    const data = {\n      userId: this.props.userId,\n      friendId: this.props.friendId !== null ? this.props.friendId: this.props.userId,\n      room: `${ROOT_URL}/friends/${this.props.groupdId}`,\n      previousRoom: `${ROOT_URL}/friends/${this.props.groupdId}`\n    };\n    if (data.userId === data.friendId) {\n      this.socket.emit('GET_PERSONAL_MESSAGES', data);\n    } else if (data.userId !== data.friendId) {\n      this.socket.emit('GET_PRIVATE_MESSAGES', data);\n    }\n\n    this.socket.on('RECEIVE_PRIVATE_MESSAGES', (data) => {\n      // scroll to latest message after rendering messages in firefox\n      if (navigator.userAgent.search(\"Firefox\") > -1) {\n        this.setState({ messages: data.reverse() }, () => {\n          if (data && data.length > 0) {\n            const element = \"message\" + (this.state.messages.length - 1);\n            if (document.getElementById(element)) {\n              document.getElementById(element).scrollIntoView();\n            }\n          }\n        });\n      } else if (navigator.userAgent.search(\"Firefox\") < 0) {\n        this.setState({ messages: data });\n      }\n    });\n\n    this.socket.on('RECEIVE_PERSONAL_MESSAGES', (data) => {\n      // scroll to latest message after rendering messages in firefox\n      if (navigator.userAgent.search(\"Firefox\") > -1) {\n        this.setState({ messages: data.reverse() }, () => {\n          if (data && data.length > 0) {\n            const element = \"message\" + (this.state.messages.length - 1);\n            if (document.getElementById(element)) {\n              document.getElementById(element).scrollIntoView();\n            }\n          }\n        });\n      } else if (navigator.userAgent.search(\"Firefox\") < 0) {\n        this.setState({ messages: data });\n      }\n    });\n  }\n\n  async componentWillReceiveProps(nextProps) {\n    if (nextProps.groupId !== this.state.groupId) {\n      this.setState({\n        userId: nextProps.userId,\n        friendId: nextProps.friendId,\n        groupId: nextProps.groupId,\n        room: `${ROOT_URL}/friends/${this.props.groupdId}`,\n        previousRoom: `${ROOT_URL}/friends/${this.state.groupId}`\n      });\n      const data = {\n        userId: nextProps.userId,\n        friendId: nextProps.friendId,\n        room: `${ROOT_URL}/friends/${this.props.groupdId}`,\n        previousRoom: `${ROOT_URL}/friends/${this.state.groupId}`\n      };\n      if (data.userId === data.friendId) {\n        this.socket.emit('GET_PERSONAL_MESSAGES', data);\n      } else if (data.userId !== data.friendId) {\n        this.socket.emit('GET_PRIVATE_MESSAGES', data);\n      }\n    }\n  }\n\n  componentWillUnmount() {\n    this.socket.emit('LEAVE_CHATROOMS', {\n      room: this.state.room\n    });\n  }\n\n  sendMessage = (event) => {\n    if (event) {\n      event.preventDefault();\n      const data = {\n        username: this.props.username,\n        message: this.state.message,\n        userId: this.props.userId,\n        friendId: this.props.friendId !== null ? this.props.friendId : this.props.userId,\n        room: `${ROOT_URL}/friends/${this.props.groupdId}`,\n        previousRoom: `${ROOT_URL}/friends/${this.state.groupId}`\n      }\n      if (data.userId === data.friendId) {\n        this.socket.emit('SEND_PERSONAL_MESSAGE', data);\n      } else if (data.userId !== data.friendId) {\n        this.socket.emit('SEND_PRIVATE_MESSAGE', data);\n      }\n      this.setState({ message: \"\" });\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"chatroom\">\n        <div className=\"privatechatarea\">\n          <div id=\"privatechatareamessages\" className=\"privatechatarea-messages\">\n            {this.state.messages && this.state.messages.length > 0 ? this.state.messages.map((item, index) => {\n              return (\n                <div id={\"message\" + index} key={index}>\n                  <p><span className=\"privatechatarea-messages-user\">{item.username}</span> <Moment format=\"MM/DD/YYYY\" className=\"privatechatarea-messages-time\"><span>{item.createdAt}</span></Moment></p>\n                  <p className=\"privatechatarea-messages-message\">{item.message}</p>\n                </div>\n              )\n            }) : null}\n          </div>\n          <div className=\"privatechatarea-container\">\n            <input placeholder=\"Send a message!\" type=\"text\" onChange={(event) => { this.setState({ message: event.target.value }); }} value={this.state.message} onKeyDown={(event) => { event.keyCode === 13 && event.shiftKey === false ? this.sendMessage(event) : this.sendMessage(null) }}></input>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nfunction mapStateToProps({ usersReducer }) {\n  return {\n    error: usersReducer.error,\n    isLoading: usersReducer.isLoading,\n    success: usersReducer.success,\n    user: usersReducer.user,\n    users: usersReducer.users\n  };\n}\n\nexport default connect(mapStateToProps, actions)(ChatroomFriend);"]},"metadata":{},"sourceType":"module"}