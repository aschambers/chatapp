{"ast":null,"code":"/**\n  ## pluck\n\n  Extract targeted properties from a source object. When a single property\n  value is requested, then just that value is returned.\n\n  In the case where multiple properties are requested (in a varargs calling\n  style) a new object will be created with the requested properties copied\n  across.\n\n  __NOTE:__ In the second form extraction of nested properties is\n  not supported.\n\n  <<< examples/pluck.js\n\n**/\nmodule.exports = function () {\n  var fields = [];\n\n  function extractor(parts, maxIdx) {\n    return function (item) {\n      var partIdx = 0;\n      var val = item;\n\n      do {\n        val = val && val[parts[partIdx++]];\n      } while (val && partIdx <= maxIdx);\n\n      return val;\n    };\n  }\n\n  [].slice.call(arguments).forEach(function (path) {\n    var parts = typeof path == 'number' ? [path] : (path || '').split('.');\n    fields[fields.length] = {\n      name: parts[0],\n      parts: parts,\n      maxIdx: parts.length - 1\n    };\n  });\n\n  if (fields.length <= 1) {\n    return extractor(fields[0].parts, fields[0].maxIdx);\n  } else {\n    return function (item) {\n      var data = {};\n\n      for (var ii = 0, len = fields.length; ii < len; ii++) {\n        data[fields[ii].name] = extractor([fields[ii].parts[0]], 0)(item);\n      }\n\n      return data;\n    };\n  }\n};","map":null,"metadata":{},"sourceType":"script"}