{"ast":null,"code":"var _jsxFileName = \"/Users/metabou/Desktop/chatapp/client/src/views/Chatroom/Chatroom.js\";\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport * as actions from '../../redux';\nimport { ROOT_URL } from '../../config/networkSettings';\nimport io from \"socket.io-client\";\nimport './Chatroom.css';\nimport person from '../../assets/images/person-icon.png';\nimport general from '../../assets/images/general.png';\nimport AuthNavigation from '../../components/AuthNavigation/AuthNavigation';\n\nclass Chatroom extends Component {\n  constructor(props) {\n    super(props);\n\n    this.sendMessage = event => {// if(event) {\n      //   event.preventDefault();\n      //   if(this.state.clickedUsername.length > 0 && this.state.clickedUsername !== this.state.username) {\n      //     this.socket.emit('PRIVATE_MESSAGE', {\n      //       from: this.state.username,\n      //       to: this.state.clickedUsername,\n      //       fromSocket: this.state.socketId,\n      //       toSocket: this.state.currentSocket,\n      //       message: this.state.message\n      //     });\n      //     this.setState({message: ''});\n      //   } else if(this.state.clickedUsername.length > 0 && this.state.clickedUsername === this.state.username) {\n      //     this.socket.emit('PERSONAL_MESSAGE', {\n      //       from: this.state.username,\n      //       to: this.state.clickedUsername,\n      //       fromSocket: this.state.socketId,\n      //       toSocket: this.state.currentSocket,\n      //       message: this.state.message\n      //     });\n      //     this.setState({message: ''});\n      //   } else if(this.state.clickedUsername.length < 1) {\n      //     this.socket.emit('SEND_MESSAGE', {\n      //       username: this.state.username,\n      //       message: this.state.message\n      //     });\n      //     this.setState({message: ''});\n      //   }\n      // }\n    };\n\n    this.userDetails = user => {// this.setState({ clickedUsername: user.username, clickedType: user.type, userDetails: true, currentSocket: user.socketId }, () => {\n      //   this.socket.emit('GET_USERS');\n      // });\n    };\n\n    this.state = {\n      username: \"\",\n      message: \"\",\n      type: \"\",\n      messages: [],\n      users: [],\n      clickedUsername: \"\",\n      clickedType: \"\",\n      privateMessages: [],\n      personalMessages: [],\n      userDetails: false,\n      socketId: \"\",\n      currentSocket: \"\"\n    };\n  }\n\n  componentDidMount() {// this.props.currentUser();\n    // this.socket = io(ROOT_URL);\n    // this.socket.on('connect', () => {\n    //   this.setState({ socketId: this.socket.id });\n    // });\n    // this.socket.emit('GET_MESSAGES');\n    // this.socket.emit('GET_USERS');\n    // this.socket.on('RECEIVE_MESSAGE', (data) => {\n    //   this.setState({ messages: data});\n    // });\n    // this.socket.on('RECEIVE_USERS', (data) => {\n    //   this.setState({ users: data });\n    //   if(data && data.length) {\n    //     for(let i = 0; i < data.length; i++) {\n    //       if(this.state.clickedUsername && this.state.clickedUsername.length > 0 && this.state.clickedUsername === this.state.username) {\n    //         let userPersonalMessages = [];\n    //         for(let k = 0; k < data[i].personalMessages.length; k++) {\n    //           if(data[i].personalMessages[k].username === this.state.username) {\n    //             userPersonalMessages.push(data[i].personalMessages[k]);\n    //           }\n    //         }\n    //         if(userPersonalMessages.length > 0) {\n    //           this.setState({ ...this.state, personalMessages: userPersonalMessages, privateMessages: [] });\n    //         }\n    //       } else {\n    //         let userPrivateMessages = [];\n    //         for(let j = 0; j < data[i].privateMessages.length; j++) {\n    //           if((data[i].privateMessages[j].username === this.state.username && data[i].privateMessages[j].sentTo === this.state.clickedUsername) || (data[i].privateMessages[j].username === this.state.clickedUsername && data[i].privateMessages[j].sentTo === this.state.username)) {\n    //             userPrivateMessages.push(data[i].privateMessages[j]);\n    //           }\n    //         }\n    //         if(userPrivateMessages.length > 0) {\n    //           this.setState({ ...this.state, personalMessages: [], privateMessages: userPrivateMessages });\n    //         }\n    //       }\n    //     }\n    //   }\n    // });\n    // this.socket.on('RECEIVE_LOGOUT', (data) => {\n    //   this.setState({ users: data });\n    // });\n  }\n\n  componentWillReceiveProps(nextProps) {// if(nextProps.user) {\n    //   const {\n    //     username,\n    //     type,\n    //     personalMessages,\n    //     privateMessages\n    //   } = nextProps.user;\n    //   this.setState({ username: username, type: type });\n    //   this.socket.emit('SEND_USER', {\n    //     username: username,\n    //     type: type,\n    //     socketId: this.socket.id,\n    //     personalMessages: personalMessages || [],\n    //     privateMessages: privateMessages || [],\n    //     active: true\n    //   });\n    // }\n  }\n\n  componentWillUnmount() {// this.socket.disconnect(true);\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      className: \"chatroom\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 146\n      },\n      __self: this\n    });\n  }\n\n}\n\nfunction mapStateToProps({\n  usersReducer\n}) {\n  return {\n    error: usersReducer.error,\n    isLoading: usersReducer.isLoading,\n    success: usersReducer.success,\n    user: usersReducer.user\n  };\n}\n\nexport default connect(mapStateToProps, actions)(Chatroom);","map":{"version":3,"sources":["/Users/metabou/Desktop/chatapp/client/src/views/Chatroom/Chatroom.js"],"names":["React","Component","connect","actions","ROOT_URL","io","person","general","AuthNavigation","Chatroom","constructor","props","sendMessage","event","userDetails","user","state","username","message","type","messages","users","clickedUsername","clickedType","privateMessages","personalMessages","socketId","currentSocket","componentDidMount","componentWillReceiveProps","nextProps","componentWillUnmount","render","mapStateToProps","usersReducer","error","isLoading","success"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAO,KAAKC,OAAZ,MAAyB,aAAzB;AACA,SAASC,QAAT,QAAyB,8BAAzB;AACA,OAAOC,EAAP,MAAe,kBAAf;AACA,OAAO,gBAAP;AACA,OAAOC,MAAP,MAAmB,qCAAnB;AACA,OAAOC,OAAP,MAAoB,iCAApB;AACA,OAAOC,cAAP,MAA2B,gDAA3B;;AAEA,MAAMC,QAAN,SAAuBR,SAAvB,CAAiC;AAC/BS,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;;AADiB,SA+FnBC,WA/FmB,GA+FJC,KAAD,IAAW,CACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD,KA5HkB;;AAAA,SA8HnBC,WA9HmB,GA8HJC,IAAD,IAAU,CACtB;AACA;AACA;AACD,KAlIkB;;AAGjB,SAAKC,KAAL,GAAa;AACXC,MAAAA,QAAQ,EAAE,EADC;AAEXC,MAAAA,OAAO,EAAE,EAFE;AAGXC,MAAAA,IAAI,EAAE,EAHK;AAIXC,MAAAA,QAAQ,EAAE,EAJC;AAKXC,MAAAA,KAAK,EAAE,EALI;AAMXC,MAAAA,eAAe,EAAE,EANN;AAOXC,MAAAA,WAAW,EAAE,EAPF;AAQXC,MAAAA,eAAe,EAAE,EARN;AASXC,MAAAA,gBAAgB,EAAE,EATP;AAUXX,MAAAA,WAAW,EAAE,KAVF;AAWXY,MAAAA,QAAQ,EAAE,EAXC;AAYXC,MAAAA,aAAa,EAAE;AAZJ,KAAb;AAcD;;AAEDC,EAAAA,iBAAiB,GAAG,CAClB;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACD;;AAEDC,EAAAA,yBAAyB,CAACC,SAAD,EAAY,CACnC;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACD;;AAEDC,EAAAA,oBAAoB,GAAG,CACrB;AACD;;AAuCDC,EAAAA,MAAM,GAAG;AACP,WACE;AAAK,MAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MADF;AAkDD;;AAxL8B;;AA2LjC,SAASC,eAAT,CAAyB;AAAEC,EAAAA;AAAF,CAAzB,EAA2C;AACzC,SAAO;AACLC,IAAAA,KAAK,EAAED,YAAY,CAACC,KADf;AAELC,IAAAA,SAAS,EAAEF,YAAY,CAACE,SAFnB;AAGLC,IAAAA,OAAO,EAAEH,YAAY,CAACG,OAHjB;AAILtB,IAAAA,IAAI,EAAEmB,YAAY,CAACnB;AAJd,GAAP;AAMD;;AAED,eAAeb,OAAO,CAAC+B,eAAD,EAAkB9B,OAAlB,CAAP,CAAkCM,QAAlC,CAAf","sourcesContent":["import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport * as actions from '../../redux';\nimport { ROOT_URL } from '../../config/networkSettings';\nimport io from \"socket.io-client\";\nimport './Chatroom.css';\nimport person from '../../assets/images/person-icon.png';\nimport general from '../../assets/images/general.png';\nimport AuthNavigation from '../../components/AuthNavigation/AuthNavigation';\n\nclass Chatroom extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      username: \"\",\n      message: \"\",\n      type: \"\",\n      messages: [],\n      users: [],\n      clickedUsername: \"\",\n      clickedType: \"\",\n      privateMessages: [],\n      personalMessages: [],\n      userDetails: false,\n      socketId: \"\",\n      currentSocket: \"\"\n    }\n  }\n\n  componentDidMount() {\n    // this.props.currentUser();\n\n    // this.socket = io(ROOT_URL);\n\n    // this.socket.on('connect', () => {\n    //   this.setState({ socketId: this.socket.id });\n    // });\n\n    // this.socket.emit('GET_MESSAGES');\n    // this.socket.emit('GET_USERS');\n\n    // this.socket.on('RECEIVE_MESSAGE', (data) => {\n    //   this.setState({ messages: data});\n    // });\n\n    // this.socket.on('RECEIVE_USERS', (data) => {\n    //   this.setState({ users: data });\n    //   if(data && data.length) {\n    //     for(let i = 0; i < data.length; i++) {\n    //       if(this.state.clickedUsername && this.state.clickedUsername.length > 0 && this.state.clickedUsername === this.state.username) {\n    //         let userPersonalMessages = [];\n    //         for(let k = 0; k < data[i].personalMessages.length; k++) {\n    //           if(data[i].personalMessages[k].username === this.state.username) {\n    //             userPersonalMessages.push(data[i].personalMessages[k]);\n    //           }\n    //         }\n    //         if(userPersonalMessages.length > 0) {\n    //           this.setState({ ...this.state, personalMessages: userPersonalMessages, privateMessages: [] });\n    //         }\n    //       } else {\n    //         let userPrivateMessages = [];\n    //         for(let j = 0; j < data[i].privateMessages.length; j++) {\n    //           if((data[i].privateMessages[j].username === this.state.username && data[i].privateMessages[j].sentTo === this.state.clickedUsername) || (data[i].privateMessages[j].username === this.state.clickedUsername && data[i].privateMessages[j].sentTo === this.state.username)) {\n    //             userPrivateMessages.push(data[i].privateMessages[j]);\n    //           }\n    //         }\n    //         if(userPrivateMessages.length > 0) {\n    //           this.setState({ ...this.state, personalMessages: [], privateMessages: userPrivateMessages });\n    //         }\n    //       }\n    //     }\n    //   }\n    // });\n\n    // this.socket.on('RECEIVE_LOGOUT', (data) => {\n    //   this.setState({ users: data });\n    // });\n  }\n\n  componentWillReceiveProps(nextProps) {\n    // if(nextProps.user) {\n    //   const {\n    //     username,\n    //     type,\n    //     personalMessages,\n    //     privateMessages\n    //   } = nextProps.user;\n\n    //   this.setState({ username: username, type: type });\n\n    //   this.socket.emit('SEND_USER', {\n    //     username: username,\n    //     type: type,\n    //     socketId: this.socket.id,\n    //     personalMessages: personalMessages || [],\n    //     privateMessages: privateMessages || [],\n    //     active: true\n    //   });\n    // }\n  }\n\n  componentWillUnmount() {\n    // this.socket.disconnect(true);\n  }\n\n  sendMessage = (event) => {\n    // if(event) {\n    //   event.preventDefault();\n    //   if(this.state.clickedUsername.length > 0 && this.state.clickedUsername !== this.state.username) {\n    //     this.socket.emit('PRIVATE_MESSAGE', {\n    //       from: this.state.username,\n    //       to: this.state.clickedUsername,\n    //       fromSocket: this.state.socketId,\n    //       toSocket: this.state.currentSocket,\n    //       message: this.state.message\n    //     });\n    //     this.setState({message: ''});\n    //   } else if(this.state.clickedUsername.length > 0 && this.state.clickedUsername === this.state.username) {\n    //     this.socket.emit('PERSONAL_MESSAGE', {\n    //       from: this.state.username,\n    //       to: this.state.clickedUsername,\n    //       fromSocket: this.state.socketId,\n    //       toSocket: this.state.currentSocket,\n    //       message: this.state.message\n    //     });\n    //     this.setState({message: ''});\n    //   } else if(this.state.clickedUsername.length < 1) {\n    //     this.socket.emit('SEND_MESSAGE', {\n    //       username: this.state.username,\n    //       message: this.state.message\n    //     });\n    //     this.setState({message: ''});\n    //   }\n    // }\n  }\n\n  userDetails = (user) => {\n    // this.setState({ clickedUsername: user.username, clickedType: user.type, userDetails: true, currentSocket: user.socketId }, () => {\n    //   this.socket.emit('GET_USERS');\n    // });\n  }\n\n  render() {\n    return (\n      <div className=\"chatroom\">\n        \n        {/* <div className=\"chatContainer\">\n          <div className=\"chatContainer-list\">\n          <div className=\"chatContainer-general\" onClick={() => { this.setState({ clickedUsername: \"\", clickedType: '', userDetails: false }) }}>\n            <img src={general} style={{ height: '2.5rem', width: '2.5rem' }} alt=\"general-chat\" /><div>general</div>\n          </div>\n          {this.state.users.length > 0 ? this.state.users.map((user, index)  => {\n            return (\n              <div key={index} className={this.state.clickedUsername === user.username ? \"chatContainer-sideperson private-message\" : \"chatContainer-sideperson\"} onClick={() => this.userDetails(user)}>\n                <img src={user.type === 'owner' ? person : (user.type === 'admin' ? person : (user.type === 'moderator' ? person : (user.type === 'voice' ? person : person)))} alt=\"user-icon\" style={{ height: '2.5rem', width: '2.5rem' }} />\n                <div>{user.username}</div> {user.active === true ? <div className=\"userStatus-online\" /> : <div className=\"userStatus-offline\" />}\n              </div>\n            )\n          }) : null}\n          </div>\n          <div className=\"chatContainer-area\">\n            {this.state.clickedUsername.length > 0 && this.state.clickedUsername !== this.state.username ?\n            (this.state.privateMessages.length > 0 ? this.state.privateMessages.map((message, index) => {\n              return (\n                <div className=\"chatContainer-container\" key={index}>\n                  <span className=\"chatContainer-eachusername\" style={{ fontWeight: 900 }}>{message.username}: </span>\n                  <span className=\"chatContainer-eachmessage\">{message.message}</span>\n                </div>\n              )\n            }) : null) :\n            this.state.clickedUsername.length > 0 && this.state.clickedUsername === this.state.username ? (this.state.personalMessages.length > 0 ? this.state.personalMessages.map((message, index) => {\n              return (\n                <div className=\"chatContainer-container\" key={index}>\n                  <span className=\"chatContainer-eachusername\" style={{ fontWeight: 900 }}>{message.username}: </span>\n                  <span className=\"chatContainer-eachmessage\">{message.message}</span>\n                </div>\n            )}) : null) :\n            this.state.clickedUsername.length < 1 ?\n            (this.state.messages.length > 0 ? this.state.messages.map((message, index)  => {\n            return (\n              <div className=\"chatContainer-container\" key={index}>\n                <span className=\"chatContainer-eachusername\" style={{ fontWeight: 900 }}>{message.username}: </span>\n                <span className=\"chatContainer-eachmessage\">{message.message}</span>\n              </div>\n            )}) : null) : null}\n          </div>\n        </div>\n        <div className=\"chatContainer-message\">\n          <input className=\"chatMessage\" type=\"text\" onChange={(event) => { this.setState({ message: event.target.value }); }} value={this.state.message} onKeyDown={(event) => { event.keyCode === 13 && event.shiftKey === false ? this.sendMessage(event) : this.sendMessage(null) }} />\n          <button className=\"chatSend\" onClick={(event) => { this.sendMessage(event) }}>Send</button>\n        </div> */}\n      </div>\n    );\n  }\n}\n\nfunction mapStateToProps({ usersReducer }) {\n  return {\n    error: usersReducer.error,\n    isLoading: usersReducer.isLoading,\n    success: usersReducer.success,\n    user: usersReducer.user\n  };\n}\n\nexport default connect(mapStateToProps, actions)(Chatroom);"]},"metadata":{},"sourceType":"module"}