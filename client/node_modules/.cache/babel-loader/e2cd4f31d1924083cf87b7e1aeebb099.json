{"ast":null,"code":"import _slicedToArray from \"/Users/metabou/Desktop/chatapp/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/metabou/Desktop/chatapp/client/src/views/Verification/Verification.js\";\nimport React, { useState, useEffect } from 'react';\nimport queryString from 'query-string';\nimport Loading from '../../components/Loading/Loading';\nimport { toast } from 'react-toastify';\nimport { Redirect } from 'react-router';\nimport { connect } from 'react-redux';\nimport * as actions from '../../redux';\nimport Navigation from '../../components/Navigation/Navigation';\nimport './Verification.css';\n\nconst Verification = props => {\n  const _useState = useState(\"\"),\n        _useState2 = _slicedToArray(_useState, 2),\n        emailAddress = _useState2[0],\n        setEmailAddress = _useState2[1];\n\n  const _useState3 = useState(false),\n        _useState4 = _slicedToArray(_useState3, 2),\n        isVerified = _useState4[0],\n        setIsVerified = _useState4[1];\n\n  const _useState5 = useState(false),\n        _useState6 = _slicedToArray(_useState5, 2),\n        notVerified = _useState6[0],\n        setNotVerified = _useState6[1];\n\n  const _useState7 = useState(false),\n        _useState8 = _slicedToArray(_useState7, 2),\n        alreadyVerified = _useState8[0],\n        setAlreadyVerified = _useState8[1];\n\n  const _useState9 = useState(false),\n        _useState10 = _slicedToArray(_useState9, 2),\n        isLoading = _useState10[0],\n        setIsLoading = _useState10[1];\n\n  const _useState11 = useState(false),\n        _useState12 = _slicedToArray(_useState11, 2),\n        isRedirect = _useState12[0],\n        setIsRedirect = _useState12[1];\n\n  const params = queryString.parse(props.location.search);\n  const email = params.email;\n  const token = params.token;\n  useEffect(() => {\n    if (email && token && !isLoading && !notVerified) {\n      setIsLoading(true);\n      props.userVerification({\n        email: email,\n        token: token\n      });\n    }\n\n    if (props.resultEmail) {\n      toast.success(\"Please check your email for a verification link!\", {\n        position: toast.POSITION.BOTTOM_CENTER\n      });\n      setTimeout(() => {\n        setIsRedirect(true);\n      }, 3000);\n    }\n\n    console.log(props);\n\n    if (props.noEmail) {\n      toast.error(\"Email Address does not exist.\", {\n        position: toast.POSITION.BOTTOM_CENTER\n      });\n    }\n\n    if (props.success && !notVerified) {\n      setIsVerified(true);\n      setIsLoading(false);\n    }\n\n    if (props.already && !notVerified) {\n      setAlreadyVerified(true);\n      setIsLoading(false);\n    }\n\n    if (props.error && !notVerified) {\n      setIsLoading(false);\n      setNotVerified(true);\n\n      if (email) {\n        setEmailAddress(email);\n      }\n    }\n\n    props.resetUserValues();\n  }, [props, email, token, isLoading, notVerified]);\n\n  const closeToast = () => {\n    setIsRedirect(true);\n  };\n\n  const sendEmail = () => {\n    if (!emailAddress) {\n      toast.error(\"Email Address is required to send a verification email\", {\n        position: toast.POSITION.BOTTOM_CENTER\n      });\n    } else {\n      props.sendEmail({\n        email: emailAddress\n      });\n    }\n  };\n\n  if (alreadyVerified && !isRedirect) {\n    return toast.success(\"Your account has already been verified!\", {\n      position: toast.POSITION.BOTTOM_CENTER\n    }, {\n      onClose: closeToast()\n    });\n  }\n\n  if (isVerified && !isRedirect) {\n    return toast.success(\"Your account has been verified!\", {\n      position: toast.POSITION.BOTTOM_CENTER\n    }, {\n      onClose: closeToast()\n    });\n  }\n\n  if (isRedirect) {\n    return React.createElement(Redirect, {\n      push: true,\n      to: \"/Login\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102\n      },\n      __self: this\n    });\n  }\n\n  if (isLoading) {\n    return React.createElement(Loading, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107\n      },\n      __self: this\n    });\n  }\n\n  if (!isLoading && !isVerified) {\n    return React.createElement(\"div\", {\n      className: \"verification\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 113\n      },\n      __self: this\n    }, React.createElement(Navigation, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114\n      },\n      __self: this\n    }), React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115\n      },\n      __self: this\n    }, \"Your account has not been verified. Please send another email to verify your account.\"), React.createElement(\"input\", {\n      value: emailAddress,\n      onChange: event => {\n        setEmailAddress(event.target.value);\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      onClick: () => {\n        sendEmail();\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, \"Send Email\"));\n  }\n};\n\nfunction mapStateToProps({\n  usersReducer\n}) {\n  return {\n    error: usersReducer.error,\n    isLoading: usersReducer.isLoading,\n    success: usersReducer.success,\n    already: usersReducer.already,\n    resultEmail: usersReducer.resultEmail,\n    noEmail: usersReducer.noEmail\n  };\n}\n\nexport default connect(mapStateToProps, actions)(Verification);","map":{"version":3,"sources":["/Users/metabou/Desktop/chatapp/client/src/views/Verification/Verification.js"],"names":["React","useState","useEffect","queryString","Loading","toast","Redirect","connect","actions","Navigation","Verification","props","emailAddress","setEmailAddress","isVerified","setIsVerified","notVerified","setNotVerified","alreadyVerified","setAlreadyVerified","isLoading","setIsLoading","isRedirect","setIsRedirect","params","parse","location","search","email","token","userVerification","resultEmail","success","position","POSITION","BOTTOM_CENTER","setTimeout","console","log","noEmail","error","already","resetUserValues","closeToast","sendEmail","onClose","event","target","value","mapStateToProps","usersReducer"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport queryString from 'query-string';\nimport Loading from '../../components/Loading/Loading';\nimport { toast } from 'react-toastify';\nimport { Redirect } from 'react-router';\nimport { connect } from 'react-redux';\nimport * as actions from '../../redux';\nimport Navigation from '../../components/Navigation/Navigation';\nimport './Verification.css';\n\nconst Verification = (props) => {\n  const [emailAddress, setEmailAddress] = useState(\"\");\n  const [isVerified, setIsVerified] = useState(false);\n  const [notVerified, setNotVerified] = useState(false);\n  const [alreadyVerified, setAlreadyVerified] = useState(false);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isRedirect, setIsRedirect] = useState(false);\n  const params = queryString.parse(props.location.search);\n  const email = params.email;\n  const token = params.token;\n\n  useEffect(() => {\n    if (email && token && !isLoading && !notVerified) {\n      setIsLoading(true);\n      props.userVerification({\n        email: email,\n        token: token\n      });\n    }\n\n    if (props.resultEmail) {\n      toast.success(\"Please check your email for a verification link!\", {\n        position: toast.POSITION.BOTTOM_CENTER\n      });\n      setTimeout(() => {\n        setIsRedirect(true);\n      }, 3000);\n    }\n\n    console.log(props);\n\n    if (props.noEmail) {\n      toast.error(\"Email Address does not exist.\", {\n        position: toast.POSITION.BOTTOM_CENTER\n      });\n    }\n\n    if (props.success && !notVerified) {\n      setIsVerified(true);\n      setIsLoading(false);\n    }\n\n    if (props.already && !notVerified) {\n      setAlreadyVerified(true);\n      setIsLoading(false);\n    }\n    if (props.error && !notVerified) {\n      setIsLoading(false);\n      setNotVerified(true);\n      if (email) {\n        setEmailAddress(email);\n      }\n    }\n    props.resetUserValues();\n  }, [props, email, token, isLoading, notVerified]);\n\n  const closeToast = () => {\n    setIsRedirect(true);\n  }\n\n  const sendEmail = () => {\n    if (!emailAddress) {\n      toast.error(\"Email Address is required to send a verification email\", {\n        position: toast.POSITION.BOTTOM_CENTER\n      });\n    } else {\n      props.sendEmail({ email: emailAddress });\n    }\n  }\n\n  if (alreadyVerified && !isRedirect) {\n    return (\n      toast.success(\"Your account has already been verified!\", {\n        position: toast.POSITION.BOTTOM_CENTER\n      }, {\n        onClose: closeToast()\n      })\n    );\n  }\n\n  if (isVerified && !isRedirect) {\n    return (\n      toast.success(\"Your account has been verified!\", {\n        position: toast.POSITION.BOTTOM_CENTER\n      }, {\n        onClose: closeToast()\n      })\n    );\n  }\n\n  if (isRedirect) {\n    return <Redirect push to=\"/Login\" />;\n  }\n\n  if (isLoading) {\n    return (\n      <Loading />\n    );\n  }\n\n  if (!isLoading && !isVerified) {\n    return (\n      <div className=\"verification\">\n        <Navigation />\n        <p>Your account has not been verified. Please send another email to verify your account.</p>\n        <input value={emailAddress} onChange={(event) => { setEmailAddress(event.target.value); }} />\n        <button onClick={() => { sendEmail(); }}>Send Email</button>\n      </div>\n    );\n  }\n};\n\nfunction mapStateToProps({ usersReducer }) {\n  return {\n    error: usersReducer.error,\n    isLoading: usersReducer.isLoading,\n    success: usersReducer.success,\n    already: usersReducer.already,\n    resultEmail: usersReducer.resultEmail,\n    noEmail: usersReducer.noEmail\n  };\n}\n\nexport default connect(mapStateToProps, actions)(Verification);"]},"metadata":{},"sourceType":"module"}