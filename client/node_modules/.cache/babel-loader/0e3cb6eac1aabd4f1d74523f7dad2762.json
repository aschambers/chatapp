{"ast":null,"code":"import _slicedToArray from \"/Users/metabou/Desktop/chatapp/client/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nvar _jsxFileName = \"/Users/metabou/Desktop/chatapp/client/src/views/ResetPassword/ResetPassword.js\";\nimport React, { useState, useEffect } from 'react';\nimport queryString from 'query-string';\nimport Loading from '../../components/Loading/Loading';\nimport ToastMessage from '../../components/ToastMessage/ToastMessage';\nimport { toast } from 'react-toastify';\nimport { Redirect } from 'react-router';\nimport { connect } from 'react-redux';\nimport * as actions from '../../redux';\nimport Navigation from '../../components/Navigation/Navigation';\nimport './ResetPassword.css';\n\nconst ResetPassword = props => {\n  const _useState = useState(\"\"),\n        _useState2 = _slicedToArray(_useState, 2),\n        emailAddress = _useState2[0],\n        setEmailAddress = _useState2[1];\n\n  const _useState3 = useState(\"\"),\n        _useState4 = _slicedToArray(_useState3, 2),\n        password = _useState4[0],\n        setPassword = _useState4[1];\n\n  const _useState5 = useState(false),\n        _useState6 = _slicedToArray(_useState5, 2),\n        isLoading = _useState6[0],\n        setIsLoading = _useState6[1];\n\n  const _useState7 = useState(false),\n        _useState8 = _slicedToArray(_useState7, 2),\n        isRedirect = _useState8[0],\n        setIsRedirect = _useState8[1];\n\n  const params = queryString.parse(props.location.search);\n  const email = params.email;\n  const token = params.token;\n  useEffect(() => {\n    if (email && token) {\n      setEmailAddress(email);\n    }\n\n    if (props.resetPassSuccess) {\n      setIsLoading(false);\n      toast.success(\"Password was reset successfully!\", {\n        position: toast.POSITION.BOTTOM_CENTER\n      });\n      setTimeout(() => {\n        setIsRedirect(true);\n      }, 3000);\n    }\n\n    if (props.resetPassError) {\n      setIsLoading(false);\n      toast.error(\"Password was unable to be reset.\", {\n        position: toast.POSITION.BOTTOM_CENTER\n      });\n    }\n\n    props.resetUserValues();\n  }, [props, email, token]);\n\n  if (isRedirect) {\n    return React.createElement(Redirect, {\n      push: true,\n      to: \"/Login\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46\n      },\n      __self: this\n    });\n  }\n\n  if (isLoading) {\n    return React.createElement(Loading, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 51\n      },\n      __self: this\n    });\n  }\n\n  const resetPassword = () => {\n    setIsLoading(true);\n    props.resetPassword({\n      email: emailAddress,\n      token: token,\n      password: password\n    });\n  };\n\n  if (!isLoading) {\n    return React.createElement(\"div\", {\n      className: \"resetpassword\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 66\n      },\n      __self: this\n    }, React.createElement(Navigation, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 67\n      },\n      __self: this\n    }), React.createElement(ToastMessage, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68\n      },\n      __self: this\n    }), React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }, \"ResetPassword\"), React.createElement(\"div\", {\n      className: \"authcontainersignup__section\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 70\n      },\n      __self: this\n    }, React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    }, \"Email\"), React.createElement(\"input\", {\n      onChange: event => setEmailAddress(event.target.value),\n      value: email,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 72\n      },\n      __self: this\n    }), React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73\n      },\n      __self: this\n    }, \"Password\"), React.createElement(\"input\", {\n      onChange: event => setConfirmPassword(event.target.value),\n      value: confirmPassword,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }), React.createElement(\"span\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 75\n      },\n      __self: this\n    }, \"Confirm Password\"), React.createElement(\"input\", {\n      type: \"password\",\n      onChange: event => setPassword(event.target.value),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 76\n      },\n      __self: this\n    }), React.createElement(\"button\", {\n      onClick: () => {\n        resetPassword();\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 77\n      },\n      __self: this\n    }, \"Reset Password\")));\n  }\n};\n\nfunction mapStateToProps({\n  usersReducer\n}) {\n  return {\n    resetPassLoading: usersReducer.isLoading,\n    resetPassSuccess: usersReducer.resetPassSuccess,\n    resetPassError: usersReducer.resetPassError\n  };\n}\n\nexport default connect(mapStateToProps, actions)(ResetPassword);","map":{"version":3,"sources":["/Users/metabou/Desktop/chatapp/client/src/views/ResetPassword/ResetPassword.js"],"names":["React","useState","useEffect","queryString","Loading","ToastMessage","toast","Redirect","connect","actions","Navigation","ResetPassword","props","emailAddress","setEmailAddress","password","setPassword","isLoading","setIsLoading","isRedirect","setIsRedirect","params","parse","location","search","email","token","resetPassSuccess","success","position","POSITION","BOTTOM_CENTER","setTimeout","resetPassError","error","resetUserValues","resetPassword","event","target","value","setConfirmPassword","confirmPassword","mapStateToProps","usersReducer","resetPassLoading"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport queryString from 'query-string';\nimport Loading from '../../components/Loading/Loading';\nimport ToastMessage from '../../components/ToastMessage/ToastMessage';\nimport { toast } from 'react-toastify';\nimport { Redirect } from 'react-router';\nimport { connect } from 'react-redux';\nimport * as actions from '../../redux';\nimport Navigation from '../../components/Navigation/Navigation';\nimport './ResetPassword.css';\n\nconst ResetPassword = (props) => {\n  const [emailAddress, setEmailAddress] = useState(\"\");\n  const [password, setPassword] = useState(\"\");\n  const [isLoading, setIsLoading] = useState(false);\n  const [isRedirect, setIsRedirect] = useState(false);\n  const params = queryString.parse(props.location.search);\n  const email = params.email;\n  const token = params.token;\n\n  useEffect(() => {\n    if (email && token) {\n      setEmailAddress(email);\n    }\n    if (props.resetPassSuccess) {\n      setIsLoading(false);\n      toast.success(\"Password was reset successfully!\", {\n        position: toast.POSITION.BOTTOM_CENTER\n      });\n      setTimeout(() => {\n        setIsRedirect(true);\n      }, 3000);\n    }\n\n    if (props.resetPassError) {\n      setIsLoading(false);\n      toast.error(\"Password was unable to be reset.\", {\n        position: toast.POSITION.BOTTOM_CENTER\n      });\n    }\n\n    props.resetUserValues();\n  }, [props, email, token]);\n\n  if (isRedirect) {\n    return <Redirect push to=\"/Login\" />;\n  }\n\n  if (isLoading) {\n    return (\n      <Loading />\n    );\n  }\n\n  const resetPassword = () => {\n    setIsLoading(true);\n    props.resetPassword({\n      email: emailAddress,\n      token: token,\n      password: password\n    });\n  }\n\n  if (!isLoading) {\n    return (\n      <div className=\"resetpassword\">\n        <Navigation />\n        <ToastMessage />\n        <span>ResetPassword</span>\n        <div className=\"authcontainersignup__section\">\n          <span>Email</span>\n          <input onChange={event => setEmailAddress(event.target.value)} value={email} />\n          <span>Password</span>\n          <input onChange={event => setConfirmPassword(event.target.value)} value={confirmPassword}/>\n          <span>Confirm Password</span>\n          <input type=\"password\" onChange={event => setPassword(event.target.value)} />\n          <button onClick={() => { resetPassword(); }}>Reset Password</button>\n        </div>\n      </div>\n    );\n  }\n};\n\nfunction mapStateToProps({ usersReducer }) {\n  return {\n    resetPassLoading: usersReducer.isLoading,\n    resetPassSuccess: usersReducer.resetPassSuccess,\n    resetPassError: usersReducer.resetPassError\n  };\n}\n\nexport default connect(mapStateToProps, actions)(ResetPassword);"]},"metadata":{},"sourceType":"module"}